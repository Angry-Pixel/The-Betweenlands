// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

project.ext.buildnumber = ''
if (System.getenv().BUILD_NUMBER) project.buildnumber = '-' + System.getenv().BUILD_NUMBER

def modid = getModIdFromJava()
version = getVersionFromJava() + project.buildnumber
group = 'net.angrypixel'
archivesBaseName = 'TheBetweenlands'
sourceCompatibility = targetCompatibility = '1.8'

minecraft {
    version = "1.11.2-13.20.0.2309"
    runDir = 'minecraft'
    replace '${version}', project.version
    replace '${mcversion}', project.minecraft.version
    replace '/*!*/true/*!*/', 'false'
	
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20170527"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

//Processes the resources of sourceSets.main
processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//Builds the universal jar
jar {
    classifier = 'universal'
    exclude("**/pack.mcmeta");
    exclude("**/pack.png");
    addManifestAttributes(manifest)
}

//Builds the source jar with all the source files of sourceSets.main
task sourcesJar(type: Jar, dependsOn: classes) << {
    classifier = 'src'
    from sourceSets.main.allSource
}

//Builds the dev jar with all the output files of sourceSets.main
task devJar(type: Jar) << {
    classifier = 'dev'
    from sourceSets.main.output
}

//Builds the server jar
task serverJar(type: Jar, dependsOn: classes) {
	dependsOn jar
	classifier = 'server'
	//sourceSets.main.output.classesDir does not work here because it contains the deobfuscated classes which we can't use
	from (zipTree(jar.archivePath)) {
	
		//A list of files or folders to be excluded from the server build
		exclude("**/assets/" + modid + "/models/**")
		exclude("**/assets/" + modid + "/shaders/**")
		exclude("**/assets/" + modid + "/sounds/**")
		exclude("**/assets/" + modid + "/textures/**")
		exclude("**/assets/" + modid + "/sounds.json")
		exclude("**/assets/" + modid + "/blockstates/**")
		
	}
	addManifestAttributes(manifest)
}

//Builds a zip file with all client side assets
task assetsZip(type: Zip) {
	dependsOn jar
	classifier = 'assets'
	destinationDir = file("$rootDir/build/libs")	
	
	from (sourceSets.main.output) {
		
		exclude("mcmod.info")
		exclude("thebetweenlands/**")
		exclude("**/assets/" + modid + "/loot_tables/**")
		
	}
}

build.finalizedBy serverJar

artifacts {
    //archives sourcesJar, devJar
    archives assetsZip
}


//Returns the current version by reading directly from the ModInfo.java file
String getVersionFromJava() {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    File file = file("src/main/java/thebetweenlands/common/lib/ModInfo.java")
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }

    return "$major.$revision.$patch";
}

//Returns the mod ID by reading directly from the ModInfo.java file
String getModIdFromJava() {
    String id = "N/A";
    String prefix = "public static final String ID = \"";
    File file = file("src/main/java/thebetweenlands/common/lib/ModInfo.java")
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            id = s.substring(prefix.length(), s.length() - 2);
        }
    }

    return "$id";
}

//Adds the manifest attributes to the specified Manifest
def addManifestAttributes(Manifest m) {
	m.attributes ('FMLCorePlugin': 'thebetweenlands.core.TheBetweenlandsLoadingPlugin')
    m.attributes ('FMLCorePluginContainsFMLMod': 'true')
}


//JEI intergration
repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
}

dependencies {
    deobfCompile "mezz.jei:jei_1.11.2:4.3.6.282:api"
}