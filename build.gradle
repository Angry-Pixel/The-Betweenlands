plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.1'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

idea {
	// Tell IDEA to always download sources/javadoc artifacts from maven.
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

version = mod_version
group = 'org.angrypixel'
base {
	archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-this-escape"// << "-Werror"

neoForge {
	version = project.neoforge_version
	validateAccessTransformers = true

	runs {
		configureEach {
			gameDirectory = project.file('run')
			systemProperty 'forge.logging.console.level', 'debug'
			logLevel = org.slf4j.event.Level.DEBUG
		}

		client {
			client()
			systemProperty 'forge.enabledGameTestNamespaces', modid
			programArguments.addAll '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
		}

		server {
			server()
			systemProperty 'forge.enabledGameTestNamespaces', modid
			programArgument '--nogui'
		}

		data {
			data()
			programArguments.addAll '--mod', modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
	}

	mods {
		thebetweenlands {
			sourceSet this.sourceSets.main
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' exclude '.cache' }

repositories {
	mavenLocal()
	maven {
		name "Jared's Maven" // JEI
		url 'https://maven.blamejared.com/'
	}
}

dependencies {
	implementation "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "angrypixel",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "angrypixel",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"ModSide": "BOTH" // Just in case it's still supported
        ])
    }
}


task serverJar(type: Jar, dependsOn: jar) {
	group = 'build'
	description = "Creates server jar files"
	archiveClassifier = 'server'
	
	from(zipTree(jar.archiveFile)) {
		exclude "assets/thebetweenlands/sounds/**"
		exclude "assets/thebetweenlands/models/**"
		exclude "assets/thebetweenlands/particles/**"
		exclude "assets/thebetweenlands/textures/**"
		exclude "assets/thebetweenlands/shaders/**"
	}
	
	manifest {
		attributes jar.manifest.getAttributes()
		
		attributes ([
			"ModSide": "SERVER"
		])
	}
}

assemble.dependsOn(serverJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
