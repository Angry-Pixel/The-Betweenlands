package thebetweenlands.common.datagen;

import com.google.common.collect.ImmutableList;
import com.google.gson.JsonObject;
import net.minecraft.Util;
import net.minecraft.core.Holder;
import net.minecraft.core.component.DataComponents;
import net.minecraft.data.CachedOutput;
import net.minecraft.data.DataProvider;
import net.minecraft.data.PackOutput;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.neoforged.neoforge.common.data.LanguageProvider;
import net.neoforged.neoforge.registries.DeferredBlock;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredItem;
import org.apache.commons.lang3.StringUtils;
import thebetweenlands.api.aspect.registry.AspectType;
import thebetweenlands.api.item.amphibious.AmphibiousArmorUpgrade;
import thebetweenlands.common.TheBetweenlands;
import thebetweenlands.common.herblore.elixir.ElixirEffectRegistry;
import thebetweenlands.common.herblore.elixir.effects.ElixirEffect;
import thebetweenlands.common.registries.*;
import thebetweenlands.util.LangConversionHelper;
import thebetweenlands.util.LangFormatSplitter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class BLLanguageProvider extends LanguageProvider {

	private final PackOutput output;
	public final Map<String, String> upsideDownEntries = new HashMap<>();
	public static final Map<String, String> SUBTITLE_GENERATOR = new HashMap<>();

	public BLLanguageProvider(PackOutput output) {
		super(output, TheBetweenlands.ID, "en_us");
		this.output = output;
	}

	@Override
	protected void addTranslations() {
		this.add("itemGroup.thebetweenlands.blocks", "The Betweenlands Blocks");
		this.add("itemGroup.thebetweenlands.items", "The Betweenlands Items");
		this.add("itemGroup.thebetweenlands.gear", "The Betweenlands Gear");
		this.add("itemGroup.thebetweenlands.specials", "The Betweenlands Specials");
		this.add("itemGroup.thebetweenlands.plants", "The Betweenlands Plants");
		this.add("itemGroup.thebetweenlands.herblore", "The Betweenlands Herblore");

		this.add("container.thebetweenlands.crab_pot_filter", "Crab Pot Filter");
		this.add("container.thebetweenlands.fishing_tackle_box", "Fishing Tackle Box");
		this.add("container.thebetweenlands.fish_trimming_table", "Trimming Table");
		this.add("container.thebetweenlands.fish_trimming_table.butcher", "Chop!");
		this.add("container.thebetweenlands.smoking_rack", "Smoking Rack");

		this.add("jei.thebetweenlands.recipe.animator", "Animator");
		this.add("jei.thebetweenlands.animator.life", "Life amount: %d");
		this.add("jei.thebetweenlands.animator.fuel", "Fuel amount: %d");
		this.add("jei.thebetweenlands.animator.entity_spawn", "This recipe will spawn %s");
		this.add("jei.thebetweenlands.recipe.bubbler_crab_pot_filter", "Crab Pot Filter (Bubbler Crab)");
		this.add("jei.thebetweenlands.recipe.compost", "Compost");
		this.add("jei.thebetweenlands.compost.amount", "Compost amount: %d");
		this.add("jei.thebetweenlands.time", "Process time: %d minutes and %d seconds");
		this.add("jei.thebetweenlands.time.minutes", "Process time: %d minutes");
		this.add("jei.thebetweenlands.time.seconds", "Process time: %d seconds");
		this.add("jei.thebetweenlands.recipe.druid_altar", "Druid Altar");
		this.add("jei.thebetweenlands.druid_circle_reactivate", "Reactivates Druid Spawner");
		this.add("jei.thebetweenlands.recipe.mortar", "Pestle and Mortar");
		this.add("jei.thebetweenlands.recipe.purifier", "Purifier");
		this.add("jei.thebetweenlands.recipe.silt_crab_pot_filter", "Crab Pot Filter (Silt Crab)");
		this.add("jei.thebetweenlands.recipe.smoking_rack", "Smoking Rack");
		this.add("jei.thebetweenlands.recipe.steeping_pot", "Steeping Pot");

		this.addAdvancement("adventurer.root", "Adventurer", "The beginning of The Betweenlands Adventure");
		this.addAdvancement("adventurer.give_me_that", "Give Me That", "Obtain the Swamp Talisman");
		this.addAdvancement("adventurer.dank_world", "Dank World", "Step through the Portal Tree");
		this.addAdvancement("adventurer.pothead", "Pothead", "Loot 10 Pots of Chance");
		this.addAdvancement("adventurer.enter_the_stronghold", "Enter the Stronghold", "Find a Wight Fortress");
		this.addAdvancement("adventurer.big_wood", "That's Some Big Wood", "Find a Giant Weedwood Tree");
		this.addAdvancement("adventurer.ruined_it", "Ruined It", "Discover some Ruins");
		this.addAdvancement("adventurer.idolised", "Idolised", "Discover an Idol Head");
		this.addAdvancement("adventurer.tall_tough", "Tall 'n Tough", "Find a Cragrock Tower");
		this.addAdvancement("adventurer.cookie_crumbles", "How the Cookie Crumbles", "Complete a Cragrock Tower");
		this.addAdvancement("adventurer.environmentalist", "Environmentalist", "Get a Pyrad angry by hitting its tree");
		this.addAdvancement("adventurer.rule_them_all", "None to Rule Them All", "Obtain all Rings");
		this.addAdvancement("adventurer.3spoopy5me", "3spoopy5me", "Experience the Spook event");
		this.addAdvancement("adventurer.winter_is_coming", "Winter is Coming", "Experience the Winter event");
		this.addAdvancement("adventurer.santa_wight", "Santa Wight", "Break a present");
		this.addAdvancement("adventurer.bouldery_bois", "Bouldery Bois", "Get rolled over by a Boulder Sprite");
		this.addAdvancement("adventurer.light_the_braziers", "Light the Braziers", "Find a Sludgeon Tower");
		this.addAdvancement("adventurer.a_real_poopy_experience", "A Real Poopy Experience", "Enter the Labyrinthine Vaults");
		this.addAdvancement("adventurer.disgracing_the_dead", "Disgracing the Dead", "Loot 20 Urns of Chance");
		this.addAdvancement("adventurer.flat_round_and_up_in_the_sky", "Flat, Round and Up in the Sky", "Conquer the Raised Isles");
		this.addAdvancement("adventurer.captain101", "Captain 101", "Obtain a Weedwood Rowboat");
		this.addAdvancement("adventurer.full_of_hot_air", "Full of Hot Air", "Obtain a Draeton Aircraft");
		this.addAdvancement("adventurer.up_up_and_away", "Up, Up and Away", "Obtain a Volarkite");
		this.addAdvancement("adventurer.king_of_the_hill", "King of the Hill", "Claim a Chiromaw Matriarch Nest");
		this.addAdvancement("adventurer.queen_of_the_hill", "Queen of the Hill", "Raid a Chiromaw Matriarch Nest without claiming it");
		this.addAdvancement("adventurer.gambling_addict", "Gambling Addict", "Animate way too many Item Scrolls");
		this.addAdvancement("adventurer.thunderstruck", "Thunderstruck!", "Fly into lightning while using a Volarkite or riding a Draeton");
		this.addAdvancement("adventurer.shake_it_off", "Shake It Off", "Get overrun by an Infestation");
		this.addAdvancement("adventurer.vinyl_countdown", "The Vinyl Countdown", "Collect all Betweenlands music discs");
		this.addAdvancement("adventurer.i_think_you_urned_this", "I Think You've Urned This", "Loot 20 Alcove Urns");

		this.addAdvancement("craftsman.root", "Craftsman", "Creating the world");
		this.addAdvancement("craftsman.getting_harder_wood", "Getting Harder Wood", "Collect wood in the Betweenlands");
		this.addAdvancement("craftsman.all_over_again", "All Over Again", "Create a Weedwood Crafting Table");
		this.addAdvancement("craftsman.efficiency", "Efficiency", "Create a Dual Sulfur Furnace");
		this.addAdvancement("craftsman.freebies", "Freebies", "Obtain extra ingots using Limestone Flux");
		this.addAdvancement("craftsman.in_the_air_tonight", "In the Air Tonight", "Predict a weather event with windchimes");
		this.addAdvancement("craftsman.teach_a_man_to_fish", "Teach a Man to Fish", "Craft a Weedwood Fishing Rod");
		this.addAdvancement("craftsman.fishy_business", "Fishy Business", "Catch an Anadia using a Weedwood Fishing Rod");
		this.addAdvancement("craftsman.jar_o_worms", "Jar O' Worms", "Bait your rod from a Silt Glass Jar full of worms");
		this.addAdvancement("craftsman.net_fish_and_chill", "Net Fish and Chill", "Sit back and relax on a Fishing Tackle Box");
		this.addAdvancement("craftsman.fish_guts", "Fish Guts", "Craft and use a Trimming Table");
		this.addAdvancement("craftsman.authentic_flavor", "Authentic Flavor", "Use a Smoking Rack to smoke some food");
		this.addAdvancement("craftsman.its_a_trap", "It's A Trap!", "Obtain a Crab Pot and lure a crab into it");
		this.addAdvancement("craftsman.natures_purifier", "Nature's Purifier", "Use a Crab Pot Filter to convert an item");
		this.addAdvancement("craftsman.aquaman", "Aquaman", "Obtain a full suit of Amphibious armor");
		this.addAdvancement("craftsman.percolation_station", "Percolation Station", "Place a Water Filter and collect clean water");
		this.addAdvancement("craftsman.omega_3s", "Omega 3s", "Use a Steeping Pot to obtain Fish Oil");
		this.addAdvancement("craftsman.ill_treat_you_right", "I'll Treat You Right", "Use Fish Oil to craft Treated Planks");
		this.addAdvancement("craftsman.paint_job", "Paint Job", "Use Dye to color a block");
		this.addAdvancement("craftsman.let_it_shine", "Let It Shine", "Use Glowing Goop on an Item Frame");
		this.addAdvancement("craftsman.dye_hard", "Dye Hard", "Create every dye color using a Steeping Pot");

		this.addAdvancement("farmer.root", "Farmer", "Surviving the hunger");
		this.addAdvancement("farmer.mr_compost", "Mr. Compost", "Compost your soil");
		this.addAdvancement("farmer.now_kiss", "Now Kiss", "Breed together two Mire Snails");
		this.addAdvancement("farmer.baby_murderer", "Baby Murder", "Cook a Mire Snail Egg and scramble it");
		this.addAdvancement("farmer.necrofarmer", "Necrofarmer", "Feed your decayed crops some Plant Tonic");
		this.addAdvancement("farmer.sporadically_radical", "Sporadically Radical", "Grow and harvest Yellow Dotted Fungi Spores");
		this.addAdvancement("farmer.lively_crops", "Lively Crops", "Let a Sporeling hatch from your crops");
		this.addAdvancement("farmer.mushroom_master", "Mushroom Master", "Collect all the mushrooms");
		this.addAdvancement("farmer.a_vine_bush", "A Vine Bush", "Collect and plant White Pear Seeds");
		this.addAdvancement("farmer.flower_power", "Flower Power", "Grow some flowers on your farm");
		this.addAdvancement("farmer.pure_and_dirty", "Pure and Dirty", "Use Purified Swamp Dirt for your farm");
		this.addAdvancement("farmer.fertile_soil", "Fertile Soil", "Dig up a worm while making holes for crops");
		this.addAdvancement("farmer.bountiful_barnacles", "Bountiful Barnacles", "Harvest and replace a cluster of Barnacles");
		this.addAdvancement("farmer.premium_produce", "Premium Produce", "Craft and consume a Pearled Pear");
		this.addAdvancement("farmer.your_bush_smells", "Your Bush Smells", "Infuse a Weedwood Bush using a Pheromone Thorax");
		this.addAdvancement("farmer.moving_day", "Moving Day", "Put Silk Grubs in a Moth House to produce Silk");
		this.addAdvancement("farmer.multicore_threading", "Multicore Threading", "Use lanterns to boost a Moth House's production speed");
		this.addAdvancement("farmer.grubhub_inc", "Grubhub Inc.", "Awaken a Grub Hub using Pheromone Extract");

		this.addAdvancement("herbalist.root", "Herbalist", "Herbal testing");
		this.addAdvancement("herbalist.im_a_druid", "I'm a Druid", "Harvest ingredients using your Sickle");
		this.addAdvancement("herbalist.screw_peta", "Screw PETA", "Test an ingredient on a caged Gecko");
		this.addAdvancement("herbalist.a_kind_heart", "A Kind Heart After All", "Release a test-Gecko");
		this.addAdvancement("herbalist.bookworms", "Bookworms", "Obtain an Herblore Book");
		this.addAdvancement("herbalist.fully_booked", "Fully Booked", "Completely fill in the Herblore Book");
		this.addAdvancement("herbalist.steep_learning_curve", "Steep Learning Curve", "Place a Steeping Pot");
		this.addAdvancement("herbalist.tea_bagging", "Tea Bagging", "Craft a Silk Bundle and steep some tea");
		this.addAdvancement("herbalist.home_remedy_extraordinaire", "Home Remedy Extraordinaire", "Steep all brews");
		this.addAdvancement("herbalist.you_cant_see_me", "You Can't See Me", "Use the vision aspect to make an Item Frame invisible");

		this.addAdvancement("miner.root", "Miner", "Going deeper");
		this.addAdvancement("miner.advanced_darkness", "Advanced Darkness", "Enter a cave");
		this.addAdvancement("miner.new_shinies", "New Shinies", "Obtain a Syrmorite or Octine Ingot");
		this.addAdvancement("miner.spelunking", "Spelunking", "Find your way back by using Caving Rope");
		this.addAdvancement("miner.rock_bottom", "Rock Bottom", "Enter the Pitstone Caves");
		this.addAdvancement("miner.get_schwifty", "Get Schwifty", "Obtain a Swift Pick");

		this.addAdvancement("survivalist.root", "Survivalist", "Living in a swamp");
		this.addAdvancement("survivalist.a_cure", "A Cure", "Collect Balls of Sap");
		this.addAdvancement("survivalist.say_nay_to_decay", "Say 'Nay' to Decay", "Collect Weeping Blue Petals");
		this.addAdvancement("survivalist.you_are_what_you_eat", "You Are What You Eat", "Consume Rotten Food");
		this.addAdvancement("survivalist.hardcore_munchies", "Hardcore Munchies", "Consume some Chiromaw Wings");
		this.addAdvancement("survivalist.dimwitted", "Dimwitted", "Use a normal Torch in the Betweenlands");
		this.addAdvancement("survivalist.pyromaniac", "Pyromaniac", "Set Moss on fire with an Octine ingot");
		this.addAdvancement("survivalist.quest_for_fire", "Quest for Fire", "Set Peat on fire");
		this.addAdvancement("survivalist.fetch", "Fetch", "Distract a Peat Mummy with a Shimmerstone");
		this.addAdvancement("survivalist.hardware_laundry", "Hardware Laundry", "Purify your tools");
		this.addAdvancement("survivalist.onions_have_layers", "Onions Have Layers, Tools Alike", "Coat your tools against corrosion");
		this.addAdvancement("survivalist.hashtag_blessed", "#Blessed", "Get saved by the Blessed effect from a Simulacrum");
		this.addAdvancement("survivalist.uh_oh_stinky", "Uh Oh, Stinky", "Use a Fumigant to remove your stench");
		this.addAdvancement("survivalist.sacrifices_were_made", "Sacrifices Were Made", "You can't make an Olmlette without breaking some eggs");


		this.addBlock(BlockRegistry.ALEMBIC, "Alembic");
		this.addBlock(BlockRegistry.ALGAE, "Algae");
		this.addBlock(BlockRegistry.ANCIENT_REMNANT_BLOCK, "Block of Ancient Remnant");
		this.addBlock(BlockRegistry.ANGRY_BETWEENSTONE, "Angry Betweenstone");
		this.addBlock(BlockRegistry.ANIMATOR, "Animator");
		this.addBlock(BlockRegistry.AQUA_MIDDLE_GEM_BLOCK, "Block of Aqua Middle Gem");
		this.addBlock(BlockRegistry.AQUA_MIDDLE_GEM_ORE, "Aqua Middle Gem Ore");
		this.addBlock(BlockRegistry.ARROW_ARUM, "Arrow Arum");
		this.addBlock(BlockRegistry.BARNACLE, "Barnacle");
		this.addBlock(BlockRegistry.BEAM_LENS_SUPPORT, "Beam Lens Support");
		this.addBlock(BlockRegistry.BEAM_ORIGIN, "Beam Origin");
		this.addBlock(BlockRegistry.BEAM_RELAY, "Beam Relay");
		this.addBlock(BlockRegistry.BEAM_TUBE, "Beam Tube");
		this.addBlock(BlockRegistry.BETWEENLANDS_BEDROCK, "Betweenlands Bedrock");
		this.addBlock(BlockRegistry.BETWEENSTONE, "Betweenstone");
		this.addBlock(BlockRegistry.BETWEENSTONE_BRICK_SLAB, "Betweenstone Brick Slab");
		this.addBlock(BlockRegistry.BETWEENSTONE_BRICK_STAIRS, "Betweenstone Brick Stairs");
		this.addBlock(BlockRegistry.BETWEENSTONE_BRICK_WALL, "Betweenstone Brick Wall");
		this.addBlock(BlockRegistry.BETWEENSTONE_BRICKS, "Betweenstone Bricks");
		this.addBlock(BlockRegistry.BETWEENSTONE_BUTTON, "Betweenstone Button");
		this.addBlock(BlockRegistry.BETWEENSTONE_PEBBLE, "Betweenstone Pebble");
		this.addBlock(BlockRegistry.BETWEENSTONE_PILLAR, "Betweenstone Pillar");
		this.addBlock(BlockRegistry.BETWEENSTONE_PRESSURE_PLATE, "Betweenstone Pressure Plate");
		this.addBlock(BlockRegistry.BETWEENSTONE_SLAB, "Betweenstone Slab");
		this.addBlock(BlockRegistry.BETWEENSTONE_STAIRS, "Betweenstone Stairs");
		this.addBlock(BlockRegistry.BETWEENSTONE_TILES, "Betweenstone Tiles");
		this.addBlock(BlockRegistry.BETWEENSTONE_WALL, "Betweenstone Wall");
		this.addBlock(BlockRegistry.BLACK_HAT_MUSHROOM, "Black Hat Mushroom");
		this.addBlock(BlockRegistry.BLACK_ICE, "Black Ice");
		this.addBlock(BlockRegistry.BLACK_PRESENT, "Black Present");
		this.addBlock(BlockRegistry.BLADDERWORT_FLOWER, "Bladderwort Flower");
		this.addBlock(BlockRegistry.BLADDERWORT_STALK, "Bladderwort Stalk");
		this.addBlock(BlockRegistry.BLUE_BAUBLE, "Blue Bauble");
		this.addBlock(BlockRegistry.BLUE_EYED_GRASS, "Blue-Eyed Grass");
		this.addBlock(BlockRegistry.BLUE_IRIS, "Blue Iris");
		this.addBlock(BlockRegistry.BLUE_PRESENT, "Blue Present");
		this.addBlock(BlockRegistry.BOG_BEAN_FLOWER, "Bog Bean Flower");
		this.addBlock(BlockRegistry.BOG_BEAN_STALK, "Bog Bean Stalk");
		this.addBlock(BlockRegistry.BONE_NESTING_BLOCK, "Nesting Block");
		this.addBlock(BlockRegistry.BONESET, "Boneset");
		this.addBlock(BlockRegistry.BOTTLE_BRUSH_GRASS, "Bottle Brush Grass");
		this.addBlock(BlockRegistry.BOTTOM_SPIRIT_TREE_LEAVES, "Lower Spirit Tree Leaves");
		this.addBlock(BlockRegistry.BRAZIER, "Brazier");
		this.addBlock(BlockRegistry.BROKEN_MUD_TILES, "Broken Mud Tiles");
		this.addBlock(BlockRegistry.BROOMSEDGE, "Broomsedge");
		this.addBlock(BlockRegistry.BROWN_PRESENT, "Brown Present");
		this.addBlock(BlockRegistry.BROWN_RUST_FILTERED_SILT_GLASS, "Brown Rust Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLE_SLAB, "Brown Rust Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLE_STAIRS, "Brown Rust Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLES, "Brown Rust Mud Brick Shingles");
		this.addBlock(BlockRegistry.BROWN_RUST_REED_MAT, "Brown Rust Reed Mat");
		this.addBlock(BlockRegistry.BROWN_RUST_SAMITE, "Brown Rust Samite");
		this.addBlock(BlockRegistry.BROWN_RUST_SAMITE_CANVAS_PANEL, "Brown Rust Samite Canvas Panel");
		this.addBlock(BlockRegistry.BULB_CAPPED_MUSHROOM, "Bulb-Capped Mushroom");
		this.addBlock(BlockRegistry.BULB_CAPPED_MUSHROOM_CAP, "Bulb-Capped Mushroom Cap");
		this.addBlock(BlockRegistry.BULB_CAPPED_MUSHROOM_STALK, "Bulb-Capped Mushroom Stalk");
		this.addBlock(BlockRegistry.BUTTON_BUSH, "Button Bush");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_FILTERED_SILT_GLASS, "Cadmium Green Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLE_SLAB, "Cadmium Green Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLE_STAIRS, "Cadmium Green Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLES, "Cadmium Green Mud Brick Shingles");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_REED_MAT, "Cadmium Green Reed Mat");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_SAMITE, "Cadmium Green Samite");
		this.addBlock(BlockRegistry.CADMIUM_GREEN_SAMITE_CANVAS_PANEL, "Cadmium Green Samite Canvas Panel");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_FILTERED_SILT_GLASS, "Camelot Magenta Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_SLAB, "Camelot Magenta Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_STAIRS, "Camelot Magenta Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLES, "Camelot Magenta Mud Brick Shingles");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_REED_MAT, "Camelot Magenta Reed Mat");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_SAMITE, "Camelot Magenta Samite");
		this.addBlock(BlockRegistry.CAMELOT_MAGENTA_SAMITE_CANVAS_PANEL, "Camelot Magenta Samite Canvas Panel");
		this.addBlock(BlockRegistry.CARDINAL_FLOWER, "Cardinal Flower");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_FILTERED_SILT_GLASS, "Caribbean Green Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_SLAB, "Caribbean Green Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_STAIRS, "Caribbean Green Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLES, "Caribbean Green Mud Brick Shingles");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_REED_MAT, "Caribbean Green Reed Mat");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_SAMITE, "Caribbean Green Samite");
		this.addBlock(BlockRegistry.CARIBBEAN_GREEN_SAMITE_CANVAS_PANEL, "Caribbean Green Samite Canvas Panel");
		this.addBlock(BlockRegistry.CARVED_MUD_BRICK_EDGE, "Carved Mud Brick Edge");
		this.addBlock(BlockRegistry.CARVED_MUD_BRICKS, "Carved Mud Bricks");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_1, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_2, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_3, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_4, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_5, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_6, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_7, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_8, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_9, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_10, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_11, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_12, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_13, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_14, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_15, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CARVED_ROTTEN_BARK_16, "Carved Rotten Bark");
		this.addBlock(BlockRegistry.CATTAIL, "Cattail");
		this.addBlock(BlockRegistry.CAVE_GRASS, "Cave Grass");
		this.addBlock(BlockRegistry.CAVE_MOSS, "Cave Moss");
		this.addBlock(BlockRegistry.CAVE_MOSS_PLANT, "Cave Moss Plant");
		this.addBlock(BlockRegistry.CAVING_ROPE_LIGHT, "Caving Rope Light");
		this.addBlock(BlockRegistry.CENSER, "Censer");
		this.addBlock(BlockRegistry.CHAMPAGNE_FILTERED_SILT_GLASS, "Champagne Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLE_SLAB, "Champagne Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLE_STAIRS, "Champagne Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLES, "Champagne Mud Brick Shingles");
		this.addBlock(BlockRegistry.CHAMPAGNE_REED_MAT, "Champagne Reed Mat");
		this.addBlock(BlockRegistry.CHAMPAGNE_SAMITE, "Champagne Samite");
		this.addBlock(BlockRegistry.CHAMPAGNE_SAMITE_CANVAS_PANEL, "Champagne Samite Canvas Panel");
		this.addBlock(BlockRegistry.CHIP_PATH, "Weedwood Chip Path");
		this.addBlock(BlockRegistry.CHISELED_BETWEENSTONE, "Chiseled Betweenstone");
		this.addBlock(BlockRegistry.CHISELED_CRAGROCK, "Chiseled Cragrock");
		this.addBlock(BlockRegistry.CHISELED_LIMESTONE, "Chiseled Limestone");
		this.addBlock(BlockRegistry.CHISELED_PITSTONE, "Chiseled Pitstone");
		this.addBlock(BlockRegistry.CHISELED_SCABYST_1, "Chiseled Scabyst");
		this.addBlock(BlockRegistry.CHISELED_SCABYST_2, "Chiseled Scabyst");
		this.addBlock(BlockRegistry.CHISELED_SCABYST_3, "Chiseled Scabyst");
		this.addBlock(BlockRegistry.CLIMBABLE_MUD_BRICKS, "Climbable Mud Bricks");
		this.addBlock(BlockRegistry.COARSE_SWAMP_DIRT, "Coarse Swamp Dirt");
		this.addBlock(BlockRegistry.COMPACTED_MUD, "Compacted Mud");
		this.addBlock(BlockRegistry.COMPACTED_MUD_MIRAGE, "Compacted Mud Mirage");
		this.addBlock(BlockRegistry.COMPACTED_MUD_SLAB, "Compacted Mud Slab");
		this.addBlock(BlockRegistry.COMPACTED_MUD_SLOPE, "Compacted Mud Slope");
		this.addBlock(BlockRegistry.COMPOST_BIN, "Compost Bin");
		this.addBlock(BlockRegistry.COMPOST_BLOCK, "Compost Block");
		this.addBlock(BlockRegistry.CONNECTED_AMATE_PAPER_PANE, "Connected Amate Paper Pane");
		this.addBlock(BlockRegistry.COPPER_IRIS, "Copper Iris");
		this.addBlock(BlockRegistry.CORRUPT_BETWEENSTONE, "Corrupt Betweenstone");
		this.addBlockWithDesc(BlockRegistry.CRAB_POT, "Crab Pot", "Add Anadia Remains to tempt Crabs.\nCan be placed on top of a Crab Pot Filter for more uses.\nOnly functional underwater.");
		this.addBlockWithDesc(BlockRegistry.CRAB_POT_FILTER, "Crab Pot Filter", "Used with a Crab Pot.\nCrab Pots placed above, containing Silt or Bubbler Crabs, provide extra functions.\nOnly functional underwater.");
		this.add("block.thebetweenlands.crab_pot_filter.not_underwater", "This block can only be used underwater");
		this.addBlock(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_SLAB, "Cracked Betweenstone Brick Slab");
		this.addBlock(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_STAIRS, "Cracked Betweenstone Brick Stairs");
		this.addBlock(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_WALL, "Cracked Betweenstone Brick Wall");
		this.addBlock(BlockRegistry.CRACKED_BETWEENSTONE_BRICKS, "Cracked Betweenstone Bricks");
		this.addBlock(BlockRegistry.CRACKED_BETWEENSTONE_TILES, "Cracked Betweenstone Tiles");
		this.addBlock(BlockRegistry.CRACKED_CHISELED_CRAGROCK, "Cracked Chiseled Cragrock");
		this.addBlock(BlockRegistry.CRACKED_CRAGROCK_BRICKS, "Cracked Cragrock Bricks");
		this.addBlock(BlockRegistry.CRACKED_CRAGROCK_TILES, "Cracked Cragrock Tiles");
		this.addBlock(BlockRegistry.CRACKED_DECAYED_MUD_TILES, "Cracked Decayed Mud Tiles");
		this.addBlock(BlockRegistry.CRACKED_LIMESTONE_BRICKS, "Cracked Limestone Bricks");
		this.addBlock(BlockRegistry.CRACKED_MUD_TILES, "Cracked Mud Tiles");
		this.addBlock(BlockRegistry.CRAGROCK, "Cragrock");
		this.addBlock(BlockRegistry.CRAGROCK_BRICK_SLAB, "Cragrock Brick Slab");
		this.addBlock(BlockRegistry.CRAGROCK_BRICK_STAIRS, "Cragrock Brick Stairs");
		this.addBlock(BlockRegistry.CRAGROCK_BRICK_WALL, "Cragrock Brick Wall");
		this.addBlock(BlockRegistry.CRAGROCK_BRICKS, "Cragrock Bricks");
		this.addBlock(BlockRegistry.CRAGROCK_PILLAR, "Cragrock Pillar");
		this.addBlock(BlockRegistry.CRAGROCK_SLAB, "Cragrock Slab");
		this.addBlock(BlockRegistry.CRAGROCK_STAIRS, "Cragrock Stairs");
		this.addBlock(BlockRegistry.CRAGROCK_TILES, "Cragrock Tiles");
		this.addBlock(BlockRegistry.CRAGROCK_WALL, "Cragrock Wall");
		this.addBlock(BlockRegistry.CRAWLER_DUNGEON_DOOR_RUNES, "Dungeon Door");
		this.addBlock(BlockRegistry.CRIMSON_MIDDLE_GEM_BLOCK, "Block of Crimson Middle Gem");
		this.addBlock(BlockRegistry.CRIMSON_MIDDLE_GEM_ORE, "Crimson Middle Gem Ore");
		this.addBlock(BlockRegistry.CRYPTWEED, "Cryptweed");
		this.addBlock(BlockRegistry.CRYPTWEED_PLANT, "Cryptweed Plant");
		this.addBlock(BlockRegistry.CYAN_BAUBLE, "Cyan Bauble");
		this.addBlock(BlockRegistry.CYAN_PRESENT, "Cyan Present");
		this.addBlock(BlockRegistry.DAMP_TORCH, "Damp Torch");
		this.addBlock(BlockRegistry.DEAD_GRASS, "Dead Grass");
		this.addBlock(BlockRegistry.DEAD_LICHEN, "Dead Lichen");
		this.addBlock(BlockRegistry.DEAD_MOSS, "Dead Moss");
		this.addBlock(BlockRegistry.DEAD_WEEDWOOD_BUSH, "Dead Weedwood Bush");
		this.addBlock(BlockRegistry.DECAY_INFESTED_WEEDWOOD_BUSH, "Decay Infested Weedwood Bush");
		this.addBlock(BlockRegistry.DECAY_PIT_CONTROL, "Pit of Decay");
		this.addBlock(BlockRegistry.DECAY_PIT_GROUND_CHAIN, "Pit of Decay Chain");
		this.addBlock(BlockRegistry.DECAY_PIT_HANGING_CHAIN, "Pit of Decay Chain");
		this.addBlock(BlockRegistry.DECAYED_MUD_TILES, "Decayed Mud Tiles");
		this.addBlock(BlockRegistry.DEEP_WATER_CORAL, "Deep Water Coral");
		this.addBlock(BlockRegistry.DEEP_WATER_CORAL_BLOCK, "Deep Water Coral Block");
		this.addBlock(BlockRegistry.DEEPMAN_SIMULACRUM_1, "Deepman Simulacrum");
		this.addBlock(BlockRegistry.DEEPMAN_SIMULACRUM_2, "Deepman Simulacrum");
		this.addBlock(BlockRegistry.DEEPMAN_SIMULACRUM_3, "Deepman Simulacrum");
		this.addBlock(BlockRegistry.DIAGONAL_ENERGY_BARRIER, "Energy Barrier");
		this.addBlock(BlockRegistry.DOTTED_SCABYST_PITSTONE, "Scabyst Lined Pitstone");
		this.addBlock(BlockRegistry.DRUID_ALTAR, "Dark Druid Altar");
		this.addBlock(BlockRegistry.DRUID_STONE_1, "Rune Stone");
		this.addBlock(BlockRegistry.DRUID_STONE_2, "Rune Stone");
		this.addBlock(BlockRegistry.DRUID_STONE_3, "Rune Stone");
		this.addBlock(BlockRegistry.DRUID_STONE_4, "Rune Stone");
		this.addBlock(BlockRegistry.DRUID_STONE_5, "Rune Stone");
		this.addBlock(BlockRegistry.DRUID_STONE_6, "Rune Stone");
		this.addBlock(BlockRegistry.DUAL_SULFUR_FURNACE, "Dual Sulfur Furnace");
		this.addBlock(BlockRegistry.DUG_SWAMP_DIRT, "Dug Swamp Dirt");
		this.addBlock(BlockRegistry.DUG_SWAMP_GRASS, "Dug Swamp Grass");
		this.addBlock(BlockRegistry.DULL_LAVENDER_FILTERED_SILT_GLASS, "Dull Lavender Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLE_SLAB, "Dull Lavender Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLE_STAIRS, "Dull Lavender Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLES, "Dull Lavender Mud Brick Shingles");
		this.addBlock(BlockRegistry.DULL_LAVENDER_REED_MAT, "Dull Lavender Reed Mat");
		this.addBlock(BlockRegistry.DULL_LAVENDER_SAMITE, "Dull Lavender Samite");
		this.addBlock(BlockRegistry.DULL_LAVENDER_SAMITE_CANVAS_PANEL, "Dull Lavender Samite Canvas Panel");
		this.addBlock(BlockRegistry.DUNGEON_DOOR_COMBINATION, "Dungeon Door Code");
		this.addBlock(BlockRegistry.DUNGEON_DOOR_RUNES, "Dungeon Door");
		this.addBlock(BlockRegistry.DUNGEON_WALL_CANDLE, "Wall Candle");
		this.addBlock(BlockRegistry.EDGE_LEAF, "Edge Leaf");
		this.addBlock(BlockRegistry.EDGE_MOSS, "Edge Moss");
		this.addBlock(BlockRegistry.EDGE_SHROOM, "Edge Shroom");
		this.addBlock(BlockRegistry.ELM_CYAN_FILTERED_SILT_GLASS, "Elm Cyan Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLE_SLAB, "Elm Cyan Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLE_STAIRS, "Elm Cyan Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLES, "Elm Cyan Mud Brick Shingles");
		this.addBlock(BlockRegistry.ELM_CYAN_REED_MAT, "Elm Cyan Reed Mat");
		this.addBlock(BlockRegistry.ELM_CYAN_SAMITE, "Elm Cyan Samite");
		this.addBlock(BlockRegistry.ELM_CYAN_SAMITE_CANVAS_PANEL, "Elm Cyan Samite Canvas Panel");
		this.addBlock(BlockRegistry.ENERGY_BARRIER, "Energy Barrier");
		this.addBlock(BlockRegistry.EXTINGUISHED_SULFUR_TORCH, "Extinguished Sulfur Torch");
		this.addBlock(BlockRegistry.FALLEN_LEAVES, "Fallen Leaves");
		this.addBlock(BlockRegistry.FILTERED_SILT, "Filtered Silt");
		this.addBlock(BlockRegistry.FILTERED_SILT_GLASS, "Filtered Silt Glass");
		this.addBlock(BlockRegistry.FILTERED_SILT_GLASS_JAR, "Filtered Silt Glass Jar");
		this.add("block.thebetweenlands.filtered_silt_glass_jar.empty", "It's Empty!");
		this.add("block.thebetweenlands.filtered_silt_glass_jar.fluid", "Contains: %s");
		this.add("block.thebetweenlands.filtered_silt_glass_jar.amount", "%sMb/4000Mb");
		this.addBlock(BlockRegistry.FILTERED_SILT_GLASS_PANE, "Filtered Silt Glass Pane");
		this.addBlock(BlockRegistry.FINE_LATTICE, "Fine Lattice");
		this.addBlockWithDesc(BlockRegistry.FISH_TRIMMING_TABLE, "Trimming Table", "Uses a bone axe to chop caught fish and crabs.");
		this.addBlock(BlockRegistry.FISHING_TACKLE_BOX, "Fishing Tackle Box");
		this.addBlock(BlockRegistry.FLATHEAD_MUSHROOM, "Flathead Mushroom");
		this.addBlock(BlockRegistry.FLOWERED_NETTLE, "Flowered Nettle");
		this.addBlock(BlockRegistry.GECKO_CAGE, "Gecko Cage");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".all_discovered", "You've already discovered all aspects on this item");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".no_aspects", "This item doesn't seem to have any aspects");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".more_aspects", "This item still seems to have some more undiscovered aspects");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".last_aspect", "This seems to be the last undiscovered aspect on this item");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".no_book", "You don't have a book to write down your discoveries");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".no_gecko", "You can't conduct this experiment without a gecko");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".gecko_recovering", "The gecko is still recovering from the last experiment");

		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_armaniis", "The gecko seems very calm and looks at you with loving eyes");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_azuwynn", "You can see the gecko's muscles twitching uncontrollably");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_byariis", "The gecko is chewing furiously on its tail and looks around as if possessed");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_byrginaz", "The gecko is drooling, sweating and peeing around its cage");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_celawynn", "You can hear the gecko's belly rumbling and it seems to burp a lot");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_dayuniis", "The gecko is walking around like a drunkard and looks around in a schizophrenic manner");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_fergalaz", "The gecko's scales seem to become rock hard, it can barely move");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_firnalaz", "The gecko's scales have a red glow and it breathes a hot breath");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_freiwynn", "The gecko's eyes are pulsating");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_geoliirgaz", "The gecko has an empty look in its eyes and doesn't seem to respond to anything");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_ordaniis", "The gecko's scales seem to be glowing slightly");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_uduriis", "The gecko runs around frantically in nonsensical patterns");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_wodren", "The gecko's eyes flare up and for a moment it looked like it had self awareness...");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_yeowynn", "You've never seen a healthier gecko, it's bursting with energy");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_yihinren", "The gecko's scales became puffy and its head looks... different");
		this.add(BlockRegistry.GECKO_CAGE.get().getDescriptionId() + ".discover_yunugaz", "The gecko seems light, and its breath sounds like a hollow wind");

		this.addBlock(BlockRegistry.GIANT_ROOT, "Giant Root");
		this.addBlock(BlockRegistry.GIANT_ROOT_DOOR, "Giant Root Door");
		this.addBlock(BlockRegistry.GIANT_ROOT_FENCE, "Giant Root Fence");
		this.addBlock(BlockRegistry.GIANT_ROOT_FENCE_GATE, "Giant Root Fence Gate");
		this.addBlock(BlockRegistry.GIANT_ROOT_PLANKS, "Giant Root Planks");
		this.addBlock(BlockRegistry.GIANT_ROOT_SLAB, "Giant Root Slab");
		this.addBlock(BlockRegistry.GIANT_ROOT_STAIRS, "Giant Root Stairs");
		this.addBlock(BlockRegistry.GIANT_ROOT_TRAPDOOR, "Giant Root Trapdoor");
		this.addBlock(BlockRegistry.GLOWING_BETWEENSTONE_TILE, "Glowing Betweenstone Tile");
		this.addBlockWithDesc(BlockRegistry.GLOWING_GOOP, "Glowing Goop", "Fish can't hide forever.");
		this.addBlock(BlockRegistry.GLOWING_SMOOTH_CRAGROCK, "Glowing Smooth Cragrock");
		this.addBlock(BlockRegistry.GOLDEN_CLUB_FLOWER, "Golden Club Flower");
		this.addBlock(BlockRegistry.GOLDEN_CLUB_STALK, "Golden Club Stalk");
		this.addBlock(BlockRegistry.GRAY_PRESENT, "Gray Present");
		this.addBlock(BlockRegistry.GREEN_ASPECT_VIAL, "Green Aspect Vial");
		this.addBlock(BlockRegistry.GREEN_BAUBLE, "Green Bauble");
		this.addBlock(BlockRegistry.GREEN_DENTROTHYST, "Green Dentrothyst");
		this.addBlock(BlockRegistry.GREEN_MIDDLE_GEM_BLOCK, "Block of Green Middle Gem");
		this.addBlock(BlockRegistry.GREEN_MIDDLE_GEM_ORE, "Green Middle Gem Ore");
		this.addBlock(BlockRegistry.GREEN_PRESENT, "Green Present");
		this.addBlock(BlockRegistry.GROUND_ITEM, "Ground Item");
		this.addBlock(BlockRegistry.GRUB_HUB, "Grub Hub");
		this.addBlock(BlockRegistry.GRUB_INFESTED_WEEDWOOD_BUSH, "Grub Infested Weedwood Bush");
		this.addBlock(BlockRegistry.HANGER, "Hanger");
		this.addBlock(BlockRegistry.HEARTHGROVE_BARK, "Hearthgrove Bark");
		this.addBlock(BlockRegistry.HEARTHGROVE_DOOR, "Hearthgrove Door");
		this.addBlock(BlockRegistry.HEARTHGROVE_FENCE, "Hearthgrove Fence");
		this.addBlock(BlockRegistry.HEARTHGROVE_FENCE_GATE, "Hearthgrove Fence Gate");
		this.addBlock(BlockRegistry.HEARTHGROVE_LEAVES, "Hearthgrove Leaves");
		this.addBlock(BlockRegistry.HEARTHGROVE_LOG, "Hearthgrove Log");
		this.addBlock(BlockRegistry.HEARTHGROVE_PLANKS, "Hearthgrove Planks");
		this.addBlock(BlockRegistry.HEARTHGROVE_SAPLING, "Hearthgrove Sapling");
		this.addBlock(BlockRegistry.HEARTHGROVE_SLAB, "Hearthgrove Slab");
		this.addBlock(BlockRegistry.HEARTHGROVE_STAIRS, "Hearthgrove Stairs");
		this.addBlock(BlockRegistry.HEARTHGROVE_TRAPDOOR, "Hearthgrove Trapdoor");
		this.addBlock(BlockRegistry.HOLLOW_LOG, "Hollow Log");
		this.addBlock(BlockRegistry.HORIZONTAL_SCABYST_PITSTONE, "Scabyst Lined Pitstone");
		this.addBlock(BlockRegistry.INACTIVE_GLOWING_SMOOTH_CRAGROCK, "Inactive Glowing Smooth Cragrock");
		this.addBlock(BlockRegistry.INFUSER, "Infuser");
		this.addBlock(BlockRegistry.ITEM_CAGE, "Item Cage");
		this.addBlock(BlockRegistry.ITEM_SHELF, "Item Shelf");
		this.addBlock(BlockRegistry.LAKE_CAVERN_SIMULACRUM_1, "Lake Cavern Simulacrum");
		this.addBlock(BlockRegistry.LAKE_CAVERN_SIMULACRUM_2, "Lake Cavern Simulacrum");
		this.addBlock(BlockRegistry.LAKE_CAVERN_SIMULACRUM_3, "Lake Cavern Simulacrum");
		this.addBlock(BlockRegistry.LATTICE, "Lattice");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_FILTERED_SILT_GLASS, "Lavender Blue Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLE_SLAB, "Lavender Blue Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLE_STAIRS, "Lavender Blue Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLES, "Lavender Blue Mud Brick Shingles");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_REED_MAT, "Lavender Blue Reed Mat");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_SAMITE, "Lavender Blue Samite");
		this.addBlock(BlockRegistry.LAVENDER_BLUE_SAMITE_CANVAS_PANEL, "Lavender Blue Samite Canvas Panel");
		this.addBlock(BlockRegistry.LICHEN, "Lichen");
		this.addBlock(BlockRegistry.LIFE_CRYSTAL_ORE_STALACTITE, "Life Crystal Stalactite");
		this.addBlock(BlockRegistry.LIFE_CRYSTAL_STALACTITE, "Life Crystal Stalactite");
		this.addBlock(BlockRegistry.LIGHT_BLUE_BAUBLE, "Light Blue Bauble");
		this.addBlock(BlockRegistry.LIGHT_BLUE_PRESENT, "Light Blue Present");
		this.addBlock(BlockRegistry.LIGHT_GRAY_PRESENT, "Light Gray Present");
		this.addBlock(BlockRegistry.LIME_PRESENT, "Lime Present");
		this.addBlock(BlockRegistry.LIMESTONE, "Limestone");
		this.addBlock(BlockRegistry.LIMESTONE_BRICK_SLAB, "Limestone Brick Slab");
		this.addBlock(BlockRegistry.LIMESTONE_BRICK_STAIRS, "Limestone Brick Stairs");
		this.addBlock(BlockRegistry.LIMESTONE_BRICK_WALL, "Limestone Brick Wall");
		this.addBlock(BlockRegistry.LIMESTONE_BRICKS, "Limestone Bricks");
		this.addBlock(BlockRegistry.LIMESTONE_PILLAR, "Limestone Pillar");
		this.addBlock(BlockRegistry.LIMESTONE_SLAB, "Limestone Slab");
		this.addBlock(BlockRegistry.LIMESTONE_STAIRS, "Limestone Stairs");
		this.addBlock(BlockRegistry.LIMESTONE_TILES, "Limestone Tiles");
		this.addBlock(BlockRegistry.LIMESTONE_WALL, "Limestone Wall");
		this.addBlock(BlockRegistry.LOOT_POT_1, "Pot of Chance");
		this.addBlock(BlockRegistry.LOOT_POT_2, "Pot of Chance");
		this.addBlock(BlockRegistry.LOOT_POT_3, "Pot of Chance");
		this.addBlock(BlockRegistry.LOOT_URN_1, "Urn of Chance");
		this.addBlock(BlockRegistry.LOOT_URN_2, "Urn of Chance");
		this.addBlock(BlockRegistry.LOOT_URN_3, "Urn of Chance");
		this.addBlock(BlockRegistry.LYESTONE, "Lyestone");
		this.addBlock(BlockRegistry.MAGENTA_BAUBLE, "Magenta Bauble");
		this.addBlock(BlockRegistry.MAGENTA_PRESENT, "Magenta Present");
		this.addBlock(BlockRegistry.MAROON_FILTERED_SILT_GLASS, "Maroon Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.MAROON_MUD_BRICK_SHINGLE_SLAB, "Maroon Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.MAROON_MUD_BRICK_SHINGLE_STAIRS, "Maroon Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.MAROON_MUD_BRICK_SHINGLES, "Maroon Mud Brick Shingles");
		this.addBlock(BlockRegistry.MAROON_REED_MAT, "Maroon Reed Mat");
		this.addBlock(BlockRegistry.MAROON_SAMITE, "Maroon Samite");
		this.addBlock(BlockRegistry.MAROON_SAMITE_CANVAS_PANEL, "Maroon Samite Canvas Panel");
		this.addBlock(BlockRegistry.MARSH_HIBISCUS, "Marsh Hibiscus");
		this.addBlock(BlockRegistry.MARSH_MALLOW, "Marsh Mallow");
		this.addBlock(BlockRegistry.MARSH_MARIGOLD_FLOWER, "Marsh Marigold Flower");
		this.addBlock(BlockRegistry.MARSH_MARIGOLD_STALK, "Marsh Marigold Stalk");
		this.addBlock(BlockRegistry.MIDDLE_SPIRIT_TREE_LEAVES, "Middle Spirit Tree Leaves");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_FILTERED_SILT_GLASS, "Midnight Purple Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_SLAB, "Midnight Purple Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_STAIRS, "Midnight Purple Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLES, "Midnight Purple Mud Brick Shingles");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_REED_MAT, "Midnight Purple Reed Mat");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_SAMITE, "Midnight Purple Samite");
		this.addBlock(BlockRegistry.MIDNIGHT_PURPLE_SAMITE_CANVAS_PANEL, "Midnight Purple Samite Canvas Panel");
		this.addBlock(BlockRegistry.MILKWEED, "Milkweed");
		this.addBlock(BlockRegistry.MIMIC_DUNGEON_DOOR_RUNES, "Dungeon Door");
		this.addBlock(BlockRegistry.MIRAGE_BETWEENSTONE_BRICKS, "Mirage Betweenstone Bricks");
		this.addBlock(BlockRegistry.MIRE_CORAL, "Mire Coral");
		this.addBlock(BlockRegistry.MIRE_CORAL_BLOCK, "Miral Coral Block");
		this.addBlock(BlockRegistry.MIST_BRIDGE, "Mist Bridge");
		this.addBlock(BlockRegistry.MOB_SPAWNER, "Monster Spawner");
		this.addBlock(BlockRegistry.MORTAR, "Mortar");
		this.addBlock(BlockRegistry.MOSS, "Moss");
		this.addBlock(BlockRegistry.MOSS_BED, "Moss Bed");
		this.addBlock(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_SLAB, "Mossy Betweenstone Brick Slab");
		this.addBlock(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_STAIRS, "Mossy Betweenstone Brick Stairs");
		this.addBlock(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_WALL, "Mossy Betweenstone Brick Wall");
		this.addBlock(BlockRegistry.MOSSY_BETWEENSTONE_BRICKS, "Mossy Betweenstone Bricks");
		this.addBlock(BlockRegistry.MOSSY_BETWEENSTONE_TILES, "Mossy Betweenstone Tiles");
		this.addBlock(BlockRegistry.MOSSY_CHISELED_CRAGROCK, "Mossy Chiseled Cragrock");
		this.addBlock(BlockRegistry.MOSSY_CRAGROCK_BOTTOM, "Mossy Cragrock Bottom");
		this.addBlock(BlockRegistry.MOSSY_CRAGROCK_BRICKS, "Mossy Cragrock Bricks");
		this.addBlock(BlockRegistry.MOSSY_CRAGROCK_TILES, "Mossy Cragrock Tiles");
		this.addBlock(BlockRegistry.MOSSY_CRAGROCK_TOP, "Mossy Cragrock Top");
		this.addBlock(BlockRegistry.MOSSY_LIMESTONE_BRICKS, "Mossy Limestone Bricks");
		this.addBlock(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE, "Mossy Smooth Betweenstone");
		this.addBlock(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_SLAB, "Mossy Smooth Betweenstone Slab");
		this.addBlock(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_STAIRS, "Mossy Smooth Betweenstone Stairs");
		this.addBlock(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_WALL, "Mossy Smooth Betweenstone Wall");
		this.addBlock(BlockRegistry.MOTH_HOUSE, "Moth House");
		this.addBlock(BlockRegistry.MOTH_INFESTED_WEEDWOOD_BUSH, "Moth Infested Weedwood Bush");
		this.addBlock(BlockRegistry.MUD, "Mud");
		this.addBlock(BlockRegistry.MUD_BRICK_ALCOVE, "Mud Brick Alcove");
		this.addBlock(BlockRegistry.MUD_BRICK_SHINGLE_ROOF, "Mud Brick Shingle Roof");
		this.addBlock(BlockRegistry.MUD_BRICK_SHINGLE_SLAB, "Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.MUD_BRICK_SHINGLE_STAIRS, "Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.MUD_BRICK_SHINGLE_WALL, "Mud Brick Shingle Wall");
		this.addBlock(BlockRegistry.MUD_BRICK_SHINGLES, "Mud Brick Shingles");
		this.addBlock(BlockRegistry.MUD_BRICK_SLAB, "Mud Brick Slab");
		this.addBlock(BlockRegistry.MUD_BRICK_SPIKE_TRAP, "Mud Brick Spike Trap");
		this.addBlock(BlockRegistry.MUD_BRICK_STAIRS, "Mud Brick Stairs");
		this.addBlock(BlockRegistry.MUD_BRICK_WALL, "Mud Brick Wall");
		this.addBlock(BlockRegistry.MUD_BRICKS, "Mud Bricks");
		this.addBlock(BlockRegistry.MUD_ENERGY_BARRIER, "Energy Barrier");
		this.addBlock(BlockRegistry.MUD_FLOWER_POT, "Mud Flower Pot");
		this.addBlock(BlockRegistry.MUD_FLOWER_POT_CANDLE, "Mud Flower Pot Candle");
		this.addBlock(BlockRegistry.MUD_LOOT_POT_1, "Muddy Pot of Chance");
		this.addBlock(BlockRegistry.MUD_LOOT_POT_2, "Muddy Pot of Chance");
		this.addBlock(BlockRegistry.MUD_LOOT_POT_3, "Muddy Pot of Chance");
		this.addBlock(BlockRegistry.MUD_TILES, "Mud Tiles");
		this.addBlock(BlockRegistry.MUD_TILES_SPIKE_TRAP, "Mud Tile Spike Trap");
		this.addBlock(BlockRegistry.NETTLE, "Nettle");
		this.addBlock(BlockRegistry.NIBBLETWIG_BARK, "Nibbletwig Bark");
		this.addBlock(BlockRegistry.NIBBLETWIG_DOOR, "Nibbletwig Door");
		this.addBlock(BlockRegistry.NIBBLETWIG_FENCE, "Nibbletwig Fence");
		this.addBlock(BlockRegistry.NIBBLETWIG_FENCE_GATE, "Nibbletwig Fence Gate");
		this.addBlock(BlockRegistry.NIBBLETWIG_LEAVES, "Nibbletwig Leaves");
		this.addBlock(BlockRegistry.NIBBLETWIG_LOG, "Nibbletwig Log");
		this.addBlock(BlockRegistry.NIBBLETWIG_PLANKS, "Nibbletwig Planks");
		this.addBlock(BlockRegistry.NIBBLETWIG_SAPLING, "Nibbletwig Sapling");
		this.addBlock(BlockRegistry.NIBBLETWIG_SLAB, "Nibbletwig Slab");
		this.addBlock(BlockRegistry.NIBBLETWIG_STAIRS, "Nibbletwig Stairs");
		this.addBlock(BlockRegistry.NIBBLETWIG_TRAPDOOR, "Nibbletwig Trapdoor");
		this.addBlock(BlockRegistry.OCTINE_BLOCK, "Block of Octine");
		this.addBlock(BlockRegistry.OCTINE_ORE, "Octine Ore");
		this.addBlock(BlockRegistry.OFFERING_TABLE, "Offering Table");
		this.addBlock(BlockRegistry.ORANGE_ASPECT_VIAL, "Orange Aspect Vial");
		this.addBlock(BlockRegistry.ORANGE_DENTROTHYST, "Orange Dentrothyst");
		this.addBlock(BlockRegistry.ORANGE_PRESENT, "Orange Present");
		this.addBlock(BlockRegistry.PALE_GRASS, "Pale Grass");
		this.addBlock(BlockRegistry.PAPER_LANTERN_1, "Blank Amate Paper Lantern");
		this.addBlock(BlockRegistry.PAPER_LANTERN_2, "Checkered Amate Paper Lantern");
		this.addBlock(BlockRegistry.PAPER_LANTERN_3, "Framed Amate Paper Lantern");
		this.addBlock(BlockRegistry.PEARL_BLOCK, "Block of Pearls");
		this.addBlock(BlockRegistry.PEAT, "Peat");
		this.addBlock(BlockRegistry.PEWTER_GREY_FILTERED_SILT_GLASS, "Pewter Grey Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLE_SLAB, "Pewter Grey Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLE_STAIRS, "Pewter Grey Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLES, "Pewter Grey Mud Brick Shingles");
		this.addBlock(BlockRegistry.PEWTER_GREY_REED_MAT, "Pewter Grey Reed Mat");
		this.addBlock(BlockRegistry.PEWTER_GREY_SAMITE, "Pewter Grey Samite");
		this.addBlock(BlockRegistry.PEWTER_GREY_SAMITE_CANVAS_PANEL, "Pewter Grey Samite Canvas Panel");
		this.addBlock(BlockRegistry.PHEROMONE_INFUSED_WEEDWOOD_BUSH, "Pheromone Infused Weedwood Bush");
		this.addBlock(BlockRegistry.PHRAGMITES, "Phragmites");
		this.addBlock(BlockRegistry.PICKERELWEED, "Pickerelweed");
		this.addBlock(BlockRegistry.PINK_BAUBLE, "Pink Bauble");
		this.addBlock(BlockRegistry.PINK_PRESENT, "Pink Present");
		this.addBlock(BlockRegistry.PITCHER_PLANT, "Pitcher Plant");
		this.addBlock(BlockRegistry.PITSTONE, "Pitstone");
		this.addBlock(BlockRegistry.PITSTONE_BRICK_SLAB, "Pitstone Brick Slab");
		this.addBlock(BlockRegistry.PITSTONE_BRICK_STAIRS, "Pitstone Brick Stairs");
		this.addBlock(BlockRegistry.PITSTONE_BRICK_WALL, "Pitstone Brick Wall");
		this.addBlock(BlockRegistry.PITSTONE_BRICKS, "Pitstone Bricks");
		this.addBlock(BlockRegistry.PITSTONE_PILLAR, "Pitstone Pillar");
		this.addBlock(BlockRegistry.PITSTONE_SLAB, "Pitstone Slab");
		this.addBlock(BlockRegistry.PITSTONE_STAIRS, "Pitstone Stairs");
		this.addBlock(BlockRegistry.PITSTONE_TILES, "Pitstone Tiles");
		this.addBlock(BlockRegistry.PITSTONE_WALL, "Pitstone Wall");
		this.addBlock(BlockRegistry.POISON_IVY, "Poison Ivy");
		this.addBlock(BlockRegistry.POLISHED_GREEN_DENTROTHYST, "Polished Green Dentrothyst");
		this.addBlock(BlockRegistry.POLISHED_GREEN_DENTROTHYST_PANE, "Polished Green Dentrothyst Pane");
		this.addBlock(BlockRegistry.POLISHED_LIMESTONE, "Polished Limestone");
		this.addBlock(BlockRegistry.POLISHED_LIMESTONE_SLAB, "Polished Limestone Slab");
		this.addBlock(BlockRegistry.POLISHED_LIMESTONE_STAIRS, "Polished Limestone Stairs");
		this.addBlock(BlockRegistry.POLISHED_LIMESTONE_WALL, "Polished Limestone Wall");
		this.addBlock(BlockRegistry.POLISHED_ORANGE_DENTROTHYST, "Polished Orange Dentrothyst");
		this.addBlock(BlockRegistry.POLISHED_ORANGE_DENTROTHYST_PANE, "Polished Orange Dentrothyst Pane");
		this.addBlock(BlockRegistry.PORTAL, "Portal");
		this.addBlock(BlockRegistry.PORTAL_FRAME_BOTTOM, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_BOTTOM_LEFT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_BOTTOM_RIGHT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_LEFT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_RIGHT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_TOP, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_TOP_LEFT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_FRAME_TOP_RIGHT, "Portal Frame");
		this.addBlock(BlockRegistry.PORTAL_LOG, "Portal Log");
		this.addBlock(BlockRegistry.POSSESSED_BLOCK, "Possessed Block");
		this.addBlock(BlockRegistry.PUDDLE, "Puddle");
		this.addBlock(BlockRegistry.PUFFSHROOM, "Puffshroom");
		this.addBlock(BlockRegistry.PURIFIED_DUG_SWAMP_DIRT, "Purified Dug Swamp Dirt");
		this.addBlock(BlockRegistry.PURIFIED_DUG_SWAMP_GRASS, "Purified Dug Swamp Grass");
		this.addBlock(BlockRegistry.PURIFIED_SWAMP_DIRT, "Purified Swamp Dirt");
		this.addBlock(BlockRegistry.PURIFIER, "Purifier");
		this.addBlock(BlockRegistry.PURPLE_PRESENT, "Purple Present");
		this.addBlock(BlockRegistry.RAISIN_BLACK_FILTERED_SILT_GLASS, "Raisin Black Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLE_SLAB, "Raisin Black Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLE_STAIRS, "Raisin Black Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLES, "Raisin Black Mud Brick Shingles");
		this.addBlock(BlockRegistry.RAISIN_BLACK_REED_MAT, "Raisin Black Reed Mat");
		this.addBlock(BlockRegistry.RAISIN_BLACK_SAMITE, "Raisin Black Samite");
		this.addBlock(BlockRegistry.RAISIN_BLACK_SAMITE_CANVAS_PANEL, "Raisin Black Samite Canvas Panel");
		this.addBlock(BlockRegistry.RED_BAUBLE, "Red Bauble");
		this.addBlock(BlockRegistry.RED_PRESENT, "Red Present");
		this.addBlock(BlockRegistry.REED_MAT, "Reed Mat");
		this.addBlock(BlockRegistry.REPELLER, "Repeller");
		this.addBlock(BlockRegistry.ROOT, "Root");
		this.addBlock(BlockRegistry.ROOT_POD, "Root Pod");
		this.addBlock(BlockRegistry.ROOTMAN_SIMULACRUM_1, "Rootman Simulacrum");
		this.addBlock(BlockRegistry.ROOTMAN_SIMULACRUM_2, "Rootman Simulacrum");
		this.addBlock(BlockRegistry.ROOTMAN_SIMULACRUM_3, "Rootman Simulacrum");
		this.addBlock(BlockRegistry.ROPE, "Rope");
		this.addBlock(BlockRegistry.ROTBULB, "Rotbulb");
		this.addBlock(BlockRegistry.ROTTEN_BARK, "Rotten bark");
		this.addBlock(BlockRegistry.ROTTEN_FENCE, "Rotten Fence");
		this.addBlock(BlockRegistry.ROTTEN_FENCE_GATE, "Rotten Fence Gate");
		this.addBlock(BlockRegistry.ROTTEN_DOOR, "Rotten Door");
		this.addBlock(BlockRegistry.ROTTEN_TRAPDOOR, "Rotten Trapdoor");
		this.addBlock(BlockRegistry.ROTTEN_PLANKS, "Rotten Planks");
		this.addBlock(BlockRegistry.ROTTEN_SLAB, "Rotten Slab");
		this.addBlock(BlockRegistry.ROTTEN_STAIRS, "Rotten Stairs");
		this.addBlock(BlockRegistry.ROUNDED_AMATE_PAPER_PANE, "Rounded Amate Paper Pane");
		this.addBlock(BlockRegistry.RUBBER, "Rubber");
		this.addBlock(BlockRegistry.RUBBER_BLOCK, "Block of Rubber");
		this.addBlock(BlockRegistry.RUBBER_LOG, "Rubber Log");
		this.addBlock(BlockRegistry.RUBBER_SAPLING, "Rubber Sapling");
		this.addBlock(BlockRegistry.RUBBER_TREE_DOOR, "Rubber Tree Door");
		this.addBlock(BlockRegistry.RUBBER_TREE_FENCE, "Rubber Tree Fence");
		this.addBlock(BlockRegistry.RUBBER_TREE_FENCE_GATE, "Rubber Tree Fence Gate");
		this.addBlock(BlockRegistry.RUBBER_TREE_LEAVES, "Rubber Tree Leaves");
		this.addBlock(BlockRegistry.RUBBER_TREE_PLANKS, "Rubber Tree Planks");
		this.addBlock(BlockRegistry.RUBBER_TREE_SLAB, "Rubber Tree Slab");
		this.addBlock(BlockRegistry.RUBBER_TREE_STAIRS, "Rubber Tree Stairs");
		this.addBlock(BlockRegistry.RUBBER_TREE_TRAPDOOR, "Rubber Tree Trapdoor");
		this.addBlock(BlockRegistry.SAFFRON_FILTERED_SILT_GLASS, "Saffron Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLE_SLAB, "Saffron Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLE_STAIRS, "Saffron Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLES, "Saffron Mud Brick Shingles");
		this.addBlock(BlockRegistry.SAFFRON_REED_MAT, "Saffron Reed Mat");
		this.addBlock(BlockRegistry.SAFFRON_SAMITE, "Saffron Samite");
		this.addBlock(BlockRegistry.SAFFRON_SAMITE_CANVAS_PANEL, "Saffron Samite Canvas Panel");
		this.addBlock(BlockRegistry.SAP_BARK, "Sap Bark");
		this.addBlock(BlockRegistry.SAP_LEAVES, "Sap Leaves");
		this.addBlock(BlockRegistry.SAP_LOG, "Sap Log");
		this.addBlock(BlockRegistry.SAP_SAPLING, "Sap Sapling");
		this.addBlock(BlockRegistry.SCABYST_BLOCK, "Block of Scabyst");
		this.addBlock(BlockRegistry.SCABYST_BRICK_SLAB, "Scabyst Brick Slab");
		this.addBlock(BlockRegistry.SCABYST_BRICK_STAIRS, "Scabyst Brick Stairs");
		this.addBlock(BlockRegistry.SCABYST_BRICK_WALL, "Scabyst Brick Wall");
		this.addBlock(BlockRegistry.SCABYST_BRICKS, "Scabyst Bricks");
		this.addBlock(BlockRegistry.SCABYST_DOOR, "Scabyst Door");
		this.addBlock(BlockRegistry.SCABYST_ORE, "Scabyst Ore");
		this.addBlock(BlockRegistry.SCABYST_TRAPDOOR, "Scabyst Trapdoor");
		this.addBlock(BlockRegistry.SEEDED_HANGER, "Seeded Hanger");
		this.addBlock(BlockRegistry.SHADOW_GREEN_FILTERED_SILT_GLASS, "Shadow Green Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLE_SLAB, "Shadow Green Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLE_STAIRS, "Shadow Green Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLES, "Shadow Green Mud Brick Shingles");
		this.addBlock(BlockRegistry.SHADOW_GREEN_REED_MAT, "Shadow Green Reed Mat");
		this.addBlock(BlockRegistry.SHADOW_GREEN_SAMITE, "Shadow Green Samite");
		this.addBlock(BlockRegistry.SHADOW_GREEN_SAMITE_CANVAS_PANEL, "Shadow Green Samite Canvas Panel");
		this.addBlock(BlockRegistry.SHADOW_WALKER, "Shadow Walker");
		this.addBlock(BlockRegistry.SHELF_FUNGUS, "Shelf Fungus");
		this.addBlock(BlockRegistry.SHOOTS, "Shoots");
		this.addBlock(BlockRegistry.SHORT_SWAMP_GRASS, "Short Swamp Grass");
		this.addBlock(BlockRegistry.SILK_COCOONED_WEEDWOOD_BUSH, "Silk Cocooned Weedwood Bush");
		this.addBlock(BlockRegistry.SILT, "Silt");
		this.addBlock(BlockRegistry.SILT_GLASS, "Silt Glass");
		this.addBlockWithDesc(BlockRegistry.SILT_GLASS_JAR, "Silt Glass Jar", "Storage for Tiny Sludge Worms.\nUsing a Weedwood Fishing Rod on the jar adds a worm to the rod.");
		this.add("block.thebetweenlands.silt_glass_jar.worms", "- §a%s Worms");
		this.addBlock(BlockRegistry.SILT_GLASS_LANTERN, "Silt Glass Lantern");
		this.addBlock(BlockRegistry.SILT_GLASS_PANE, "Silt Glass Pane");
		this.addBlock(BlockRegistry.SLIMY_BONE_BLOCK, "Block of Slimy Bone");
		this.addBlock(BlockRegistry.SLIMY_BONE_ORE, "Slimy Bone Ore");
		this.addBlock(BlockRegistry.SLIMY_DIRT, "Slimy Dirt");
		this.addBlock(BlockRegistry.SLIMY_GRASS, "Slimy Grass");
		this.addBlock(BlockRegistry.SLUDGE, "Sludge");
		this.addBlock(BlockRegistry.SLUDGECREEP, "Sludgecreep");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_1, "Sludgy Carved Mud Brick Edge 1");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_2, "Sludgy Carved Mud Brick Edge 2");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_3, "Sludgy Carved Mud Brick Edge 3");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_4, "Sludgy Carved Mud Brick Edge 4");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_1, "Sludgy Carved Mud Bricks 1");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_2, "Sludgy Carved Mud Bricks 2");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_3, "Sludgy Carved Mud Bricks 3");
		this.addBlock(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_4, "Sludgy Carved Mud Bricks 4");
		this.addBlock(BlockRegistry.SLUDGY_DIRT, "Sludgy Dirt");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_1, "Sludgy Mud Brick Slab 1");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_2, "Sludgy Mud Brick Slab 2");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_3, "Sludgy Mud Brick Slab 3");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_4, "Sludgy Mud Brick Slab 4");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_1, "Sludgy Mud Brick Stairs 1");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_2, "Sludgy Mud Brick Stairs 2");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_3, "Sludgy Mud Brick Stairs 3");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_4, "Sludgy Mud Brick Stairs 4");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICKS_1, "Sludgy Mud Bricks 1");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICKS_2, "Sludgy Mud Bricks 2");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICKS_3, "Sludgy Mud Bricks 3");
		this.addBlock(BlockRegistry.SLUDGY_MUD_BRICKS_4, "Sludgy Mud Bricks 4");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_1, "Sludgy Worm Pillar 1");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_2, "Sludgy Worm Pillar 2");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_3, "Sludgy Worm Pillar 3");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_4, "Sludgy Worm Pillar 4");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_5, "Sludgy Worm Pillar 5");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_1, "Sludgy Worm Pillar Top 1");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_2, "Sludgy Worm Pillar Top 2");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_3, "Sludgy Worm Pillar Top 3");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_4, "Sludgy Worm Pillar Top 4");
		this.addBlock(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_5, "Sludgy Worm Pillar Top 5");
		this.addBlock(BlockRegistry.SMOKING_RACK, "Smoking Rack");
		this.addBlock(BlockRegistry.SMOOTH_BETWEENSTONE, "Smooth Betweenstone");
		this.addBlock(BlockRegistry.SMOOTH_BETWEENSTONE_SLAB, "Smooth Betweenstone Slab");
		this.addBlock(BlockRegistry.SMOOTH_BETWEENSTONE_STAIRS, "Smooth Betweenstone Stairs");
		this.addBlock(BlockRegistry.SMOOTH_BETWEENSTONE_WALL, "Smooth Betweenstone Wall");
		this.addBlock(BlockRegistry.SMOOTH_CRAGROCK, "Smooth Cragrock");
		this.addBlock(BlockRegistry.SMOOTH_CRAGROCK_SLAB, "Smooth Cragrock Slab");
		this.addBlock(BlockRegistry.SMOOTH_CRAGROCK_STAIRS, "Smooth Cragrock Stairs");
		this.addBlock(BlockRegistry.SMOOTH_CRAGROCK_WALL, "Smooth Cragrock Wall");
		this.addBlock(BlockRegistry.SMOOTH_PITSTONE, "Smooth Pitstone");
		this.addBlock(BlockRegistry.SMOOTH_PITSTONE_SLAB, "Smooth Pitstone Slab");
		this.addBlock(BlockRegistry.SMOOTH_PITSTONE_STAIRS, "Smooth Pitstone Stairs");
		this.addBlock(BlockRegistry.SMOOTH_PITSTONE_WALL, "Smooth Pitstone Wall");
		this.addBlock(BlockRegistry.SMOULDERING_PEAT, "Smouldering Peat");
		this.addBlock(BlockRegistry.SNOW, "Snow");
		this.addBlock(BlockRegistry.SOFT_RUSH, "Soft Rush");
		this.addBlock(BlockRegistry.SOLID_TAR, "Solid Tar");
		this.addBlock(BlockRegistry.SOLID_TAR_SLAB, "Solid Tar Slab");
		this.addBlock(BlockRegistry.SOLID_TAR_STAIRS, "Solid Tar Stairs");
		this.addBlock(BlockRegistry.SOLID_TAR_WALL, "Solid Tar Wall");
		this.addBlock(BlockRegistry.SPIKE_TRAP, "Spike Trap");
		this.addBlock(BlockRegistry.SPIRIT_TREE_BARK, "Spirit Tree Bark");
		this.addBlock(BlockRegistry.SPIRIT_TREE_LOG, "Spirit Tree Log");
		this.addBlock(BlockRegistry.SPIRIT_TREE_SAPLING, "Spirit Tree Sapling");
		this.addBlock(BlockRegistry.SPREADING_ROTTEN_BARK, "Rotten Bark");
		this.addBlock(BlockRegistry.SPREADING_SLUDGY_DIRT, "Sludgy Dirt");
		this.addBlock(BlockRegistry.SQUARED_AMATE_PAPER_PANE, "Squared Amate Paper Pane");
		this.addBlock(BlockRegistry.STAGNANT_WATER, "Stagnant Water");
		this.addBlock(BlockRegistry.STALACTITE, "Stalactite");
		this.addBlock(BlockRegistry.STEEPING_POT, "Steeping Pot");
		this.addBlock(BlockRegistry.STICK_NESTING_BLOCK, "Nesting Block");
		this.addBlock(BlockRegistry.STRING_ROOTS, "String Roots");
		this.addBlock(BlockRegistry.STRING_ROOTS_PLANT, "String Roots Plant");
		this.addBlock(BlockRegistry.SULFUR_BLOCK, "Block of Sulfur");
		this.addBlock(BlockRegistry.SULFUR_FURNACE, "Sulfur Furnace");
		this.addBlock(BlockRegistry.SULFUR_ORE, "Sulfur Ore");
		this.addBlock(BlockRegistry.SULFUR_TORCH, "Sulfur Torch");
		this.addBlock(BlockRegistry.SUNDEW, "Sundew");
		this.addBlock(BlockRegistry.SUSHI_GREEN_FILTERED_SILT_GLASS, "Sushi Green Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLE_SLAB, "Sushi Green Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLE_STAIRS, "Sushi Green Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLES, "Sushi Green Mud Brick Shingles");
		this.addBlock(BlockRegistry.SUSHI_GREEN_REED_MAT, "Sushi Green Reed Mat");
		this.addBlock(BlockRegistry.SUSHI_GREEN_SAMITE, "Sushi Green Samite");
		this.addBlock(BlockRegistry.SUSHI_GREEN_SAMITE_CANVAS_PANEL, "Sushi Green Samite Canvas Panel");
		this.addBlock(BlockRegistry.SWAMP_DIRT, "Swamp Dirt");
		this.addBlock(BlockRegistry.SWAMP_GRASS, "Swamp Grass");
		this.addBlock(BlockRegistry.SWAMP_KELP, "Swamp Kelp");
		this.addBlock(BlockRegistry.SWAMP_KELP_PLANT, "Swamp Kelp Plant");
		this.addBlock(BlockRegistry.SWAMP_PLANT, "Swamp Plant");
		this.addBlock(BlockRegistry.SWAMP_REED, "Swamp Reed");
		this.addBlock(BlockRegistry.SWAMP_WATER, "Swamp Water");
		this.addBlock(BlockRegistry.SYRMORITE_BARREL, "Syrmorite Barrel");
		this.addBlock(BlockRegistry.SYRMORITE_BLOCK, "Block of Syrmorite");
		this.addBlock(BlockRegistry.SYRMORITE_DOOR, "Syrmorite Door");
		this.addBlock(BlockRegistry.SYRMORITE_HOPPER, "Syrmorite Hopper");
		this.addBlock(BlockRegistry.SYRMORITE_ORE, "Syrmorite Ore");
		this.addBlock(BlockRegistry.SYRMORITE_PRESSURE_PLATE, "Syrmorite Pressure Plate");
		this.addBlock(BlockRegistry.SYRMORITE_RUBBER_TAP, "Syrmorite Rubber Tap");
		this.addBlock(BlockRegistry.SYRMORITE_TRAPDOOR, "Syrmorite Trapdoor");
		this.addBlock(BlockRegistry.TALL_CATTAIL, "Tall Cattail");
		this.addBlock(BlockRegistry.TALL_SLUDGECREEP, "Tall Sludgecreep");
		this.addBlock(BlockRegistry.TALL_SWAMP_GRASS, "Tall Swamp Grass");
		this.addBlock(BlockRegistry.TAR, "Tar");
		this.addBlock(BlockRegistry.TAR_LOOT_POT_1, "Tarred Pot of Chance");
		this.addBlock(BlockRegistry.TAR_LOOT_POT_2, "Tarred Pot of Chance");
		this.addBlock(BlockRegistry.TAR_LOOT_POT_3, "Tarred Pot of Chance");
		this.addBlock(BlockRegistry.TARRED_HEARTHGROVE_BARK, "Tarred Hearthgrove Bark");
		this.addBlock(BlockRegistry.TARRED_HEARTHGROVE_LOG, "Tarred Hearthgrove Log");
		this.addBlock(BlockRegistry.TEMPLE_BRICK_SLAB, "Temple Brick Slab");
		this.addBlock(BlockRegistry.TEMPLE_BRICK_STAIRS, "Temple Brick Stairs");
		this.addBlock(BlockRegistry.TEMPLE_BRICK_WALL, "Temple Brick Wall");
		this.addBlock(BlockRegistry.TEMPLE_BRICKS, "Temple Bricks");
		this.addBlock(BlockRegistry.TEMPLE_PILLAR, "Temple Pillar");
		this.addBlock(BlockRegistry.THATCH, "Thatch");
		this.addBlock(BlockRegistry.THATCH_ROOF, "Thatch Roof");
		this.addBlock(BlockRegistry.THATCH_SLAB, "Thatch Slab");
		this.addBlock(BlockRegistry.THORNS, "Thorns");
		this.addBlock(BlockRegistry.TOP_SPIRIT_TREE_LEAVES, "Upper Spirit Tree Leaves");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_DOOR, "Treated Giant Root Door");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_FENCE, "Treated Giant Root Fence");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_FENCE_GATE, "Treated Giant Root Fence Gate");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_PLANKS, "Treated Giant Root Planks");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_SLAB, "Treated Giant Root Slab");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_STAIRS, "Treated Giant Root Stairs");
		this.addBlock(BlockRegistry.TREATED_GIANT_ROOT_TRAPDOOR, "Treated Giant Root Trapdoor");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_DOOR, "Treated Hearthgrove Door");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_FENCE, "Treated Hearthgrove Fence");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_FENCE_GATE, "Treated Hearthgrove Fence Gate");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_PLANKS, "Treated Hearthgrove Planks");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_SLAB, "Treated Hearthgrove Slab");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_STAIRS, "Treated Hearthgrove Stairs");
		this.addBlock(BlockRegistry.TREATED_HEARTHGROVE_TRAPDOOR, "Treated Hearthgrove Trapdoor");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_DOOR, "Treated Nibbletwig Door");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_FENCE, "Treated Nibbletwig Fence");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_FENCE_GATE, "Treated Nibbletwig Fence Gate");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_PLANKS, "Treated Nibbletwig Planks");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_SLAB, "Treated Nibbletwig Slab");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_STAIRS, "Treated Nibbletwig Stairs");
		this.addBlock(BlockRegistry.TREATED_NIBBLETWIG_TRAPDOOR, "Treated Nibbletwig Trapdoor");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_FENCE, "Treated Rotten Fence");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_FENCE_GATE, "Treated Rotten Fence Gate");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_DOOR, "Treated Rotten Door");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_TRAPDOOR, "Treated Rotten Trapdoor");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_PLANKS, "Treated Rotten Planks");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_SLAB, "Treated Rotten Slab");
		this.addBlock(BlockRegistry.TREATED_ROTTEN_STAIRS, "Treated Rotten Stairs");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_DOOR, "Treated Rubber Tree Door");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_FENCE, "Treated Rubber Tree Fence");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_FENCE_GATE, "Treated Rubber Tree Fence Gate");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_PLANKS, "Treated Rubber Tree Planks");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_SLAB, "Treated Rubber Tree Slab");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_STAIRS, "Treated Rubber Tree Stairs");
		this.addBlock(BlockRegistry.TREATED_RUBBER_TREE_TRAPDOOR, "Treated Rubber Tree Trapdoor");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_DOOR, "Treated Weedwood Door");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_FENCE, "Treated Weedwood Fence");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_FENCE_GATE, "Treated Weedwood Fence Gate");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_PLANKS, "Treated Weedwood Planks");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_SLAB, "Treated Weedwood Slab");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_STAIRS, "Treated Weedwood Stairs");
		this.addBlock(BlockRegistry.TREATED_WEEDWOOD_TRAPDOOR, "Treated Weedwood Trapdoor");
		this.addBlock(BlockRegistry.VALONITE_BLOCK, "Block of Valonite");
		this.addBlock(BlockRegistry.VALONITE_ORE, "Valonite Ore");
		this.addBlock(BlockRegistry.VENUS_FLY_TRAP, "Venus Fly Trap");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_FILTERED_SILT_GLASS, "Vivid Tangerine Filtered Silt Glass Block");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLE_SLAB, "Vivid Tangerine Mud Brick Shingle Slab");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLE_STAIRS, "Vivid Tangerine Mud Brick Shingle Stairs");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLES, "Vivid Tangerine Mud Brick Shingles");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_REED_MAT, "Vivid Tangerine Reed Mat");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_SAMITE, "Vivid Tangerine Samite");
		this.addBlock(BlockRegistry.VIVID_TANGERINE_SAMITE_CANVAS_PANEL, "Vivid Tangerine Samite Canvas Panel");
		this.addBlock(BlockRegistry.VOLARPAD, "Volarpad");
		this.addBlock(BlockRegistry.WALKWAY, "Weedwood Walkway");
		this.addBlock(BlockRegistry.WATER_FILTER, "Water Filter");
		this.addBlock(BlockRegistry.WATER_WEEDS, "Water Weeds");
		this.addBlock(BlockRegistry.WAYSTONE, "Menhir");
		this.addBlock(BlockRegistry.WEAK_BETWEENSTONE_TILES, "Weak Betweenstone Tiles");
		this.addBlock(BlockRegistry.WEAK_MOSSY_BETWEENSTONE_TILES, "Weak Mossy Betweenstone Tiles");
		this.addBlock(BlockRegistry.WEAK_POLISHED_LIMESTONE, "Weak Polished Limestone");
		this.addBlock(BlockRegistry.WEAK_SMOOTH_CRAGROCK, "Weak Smooth Cragrock");
		this.addBlock(BlockRegistry.WEEDWOOD, "Weedwood");
		this.addBlock(BlockRegistry.WEEDWOOD_BARK, "Weedwood Bark");
		this.addBlock(BlockRegistry.WEEDWOOD_BARREL, "Weedwood Barrel");
		this.add("block.thebetweenlands.barrel.fluid", "%s (%sMb)");
		this.addBlock(BlockRegistry.WEEDWOOD_BUSH, "Weedwood Bush");
		this.addBlock(BlockRegistry.WEEDWOOD_BUTTON, "Weedwood Button");
		this.addBlock(BlockRegistry.WEEDWOOD_CRAFTING_TABLE, "Weedwood Crafting Table");
		this.addBlock(BlockRegistry.WEEDWOOD_DOOR, "Weedwood Door");
		this.addBlock(BlockRegistry.WEEDWOOD_FENCE, "Weedwood Fence");
		this.addBlock(BlockRegistry.WEEDWOOD_FENCE_GATE, "Weedwood Fence Gate");
		this.addBlock(BlockRegistry.WEEDWOOD_JUKEBOX, "Weedwood Jukebox");
		this.addBlock(BlockRegistry.WEEDWOOD_LADDER, "Weedwood Ladder");
		this.addBlock(BlockRegistry.WEEDWOOD_LEVER, "Weedwood Lever");
		this.addBlock(BlockRegistry.WEEDWOOD_LOG, "Weedwood Log");
		this.addBlock(BlockRegistry.WEEDWOOD_LOG_FENCE, "Weedwood Log Fence");
		this.addBlock(BlockRegistry.WEEDWOOD_LOG_FENCE_GATE, "Weedwood Log Fence Gate");
		this.addBlock(BlockRegistry.WEEDWOOD_PLANKS, "Weedwood Planks");
		this.addBlock(BlockRegistry.WEEDWOOD_PRESSURE_PLATE, "Weedwood Pressure Plate");
		this.addBlock(BlockRegistry.WEEDWOOD_RUBBER_TAP, "Weedwood Rubber Tap");
		this.addBlock(BlockRegistry.WEEDWOOD_SAPLING, "Weedwood Sapling");
		this.addBlock(BlockRegistry.WEEDWOOD_SIGN, "Weedwood Sign");
		this.addBlock(BlockRegistry.WEEDWOOD_SLAB, "Weedwood Slab");
		this.addBlock(BlockRegistry.WEEDWOOD_STAIRS, "Weedwood Stairs");
		this.addBlock(BlockRegistry.WEEDWOOD_TRAPDOOR, "Weedwood Trapdoor");
		this.addBlock(BlockRegistry.WEEPING_BLUE, "Weeping Blue");
		this.addBlock(BlockRegistry.WHITE_PRESENT, "White Present");
		this.addBlock(BlockRegistry.WIND_CHIME, "Wind Chime");
		this.addBlock(BlockRegistry.WISP, "Wisp");
		this.addBlock(BlockRegistry.WOODEN_SUPPORT_BEAM_1, "Rotten Support Beam");
		this.addBlock(BlockRegistry.WOODEN_SUPPORT_BEAM_2, "Rotten Support Beam");
		this.addBlock(BlockRegistry.WOODEN_SUPPORT_BEAM_3, "Rotten Support Beam");
		this.addBlock(BlockRegistry.WORM_PILLAR, "Worm Pillar");
		this.addBlock(BlockRegistry.WORM_PILLAR_TOP, "Worm Pillar Top");
		this.addBlock(BlockRegistry.YELLOW_BAUBLE, "Yellow Bauble");
		this.addBlock(BlockRegistry.YELLOW_PRESENT, "Yellow Present");

		this.add("block.thebetweenlands.dungeon_door_runes.locked", "Dungeon door code set!");
		this.add("block.thebetweenlands.good_fuel", "This dense log is excellent as fuel.");
		this.add("block.thebetweenlands.tarrable", "Can be tarred");
		this.add("block.thebetweenlands.mist", "This plant can only grow in Sludgeon mist.");
		this.add("block.thebetweenlands.simulacrum.effect", "Effect: %s");
		this.add("simulacrum_effect.thebetweenlands.none", "None");
		this.add("simulacrum_effect.thebetweenlands.random", "Random");
		this.add("simulacrum_effect.thebetweenlands.them", "Them");
		this.add("simulacrum_effect.thebetweenlands.imitation", "Imitation");
		this.add("simulacrum_effect.thebetweenlands.weakness", "Weakness");
		this.add("simulacrum_effect.thebetweenlands.resurrection", "Resurrection");
		this.add("simulacrum_effect.thebetweenlands.sanctuary", "Sanctuary");
		this.add("simulacrum_effect.thebetweenlands.fertility", "Fertility");
		this.add("simulacrum_effect.thebetweenlands.attraction", "Attraction");
		this.add("simulacrum_effect.thebetweenlands.wisp", "Wisp");
		this.add("simulacrum_effect.thebetweenlands.wisdom", "Wisdom");
		this.add("simulacrum_effect.thebetweenlands.blessing", "Blessing");

		this.add("block.thebetweenlands.fog", "Fog");
		this.add("block.thebetweenlands.shallowbreath", "Shallowbreath");
		this.add("block.thebetweenlands.dull_lavender_dye", "Dull Lavender Dye");
		this.add("block.thebetweenlands.maroon_dye", "Maroon Dye");
		this.add("block.thebetweenlands.shadow_green_dye", "Shadow Green Dye");
		this.add("block.thebetweenlands.camelot_magenta_dye", "Camelot Magenta Dye");
		this.add("block.thebetweenlands.saffron_dye", "Saffron Dye");
		this.add("block.thebetweenlands.caribbean_green_dye", "Caribbean Green Dye");
		this.add("block.thebetweenlands.vivid_tangerine_dye", "Vivid Tangerine Dye");
		this.add("block.thebetweenlands.champagne_dye", "Champagne Dye");
		this.add("block.thebetweenlands.raisin_black_dye", "Raisin Black Dye");
		this.add("block.thebetweenlands.sushi_green_dye", "Sushi Green Dye");
		this.add("block.thebetweenlands.elm_cyan_dye", "Elm Cyan Dye");
		this.add("block.thebetweenlands.cadmium_green_dye", "Cadmium Green Dye");
		this.add("block.thebetweenlands.lavender_blue_dye", "Lavender Blue Dye");
		this.add("block.thebetweenlands.brown_rust_dye", "Brown Rust Dye");
		this.add("block.thebetweenlands.midnight_purple_dye", "Mignight Purple Dye");
		this.add("block.thebetweenlands.pewter_grey_dye", "Pewter Grey Dye");
		this.add("block.thebetweenlands.nettle_soup", "Nettle Soup");
		this.add("block.thebetweenlands.nettle_tea", "Nettle Tea");
		this.add("block.thebetweenlands.pheromone_extract", "Pheromone Extract");
		this.add("block.thebetweenlands.swamp_broth", "Swamp Broth");
		this.add("block.thebetweenlands.sturdy_stock", "Sturdy Stock");
		this.add("block.thebetweenlands.pear_cordial", "Pear Cordial");
		this.add("block.thebetweenlands.shamans_brew", "Shaman's Brew");
		this.add("block.thebetweenlands.lake_broth", "Lake Broth");
		this.add("block.thebetweenlands.shell_stock", "Shell Stock");
		this.add("block.thebetweenlands.frog_leg_extract", "Frog Leg Extract");
		this.add("block.thebetweenlands.witch_tea", "Witch Tea");
		this.add("block.thebetweenlands.clean_water", "Clean Water");
		this.add("block.thebetweenlands.fish_oil", "Fish Oil");

		this.addEntityAndEgg(EntityRegistry.ANADIA, "Anadia");
		this.add("entity.thebetweenlands.anadia.head_0", "Grazer");
		this.add("entity.thebetweenlands.anadia.head_1", "Thumphead");
		this.add("entity.thebetweenlands.anadia.head_2", "Prowler");
		this.add("entity.thebetweenlands.anadia.body_0", "Skittish");
		this.add("entity.thebetweenlands.anadia.body_1", "Stubby");
		this.add("entity.thebetweenlands.anadia.body_2", "Slender");
		this.add("entity.thebetweenlands.anadia.tail_0", "Cliptail");
		this.add("entity.thebetweenlands.anadia.tail_1", "Fantail");
		this.add("entity.thebetweenlands.anadia.tail_2", "Longtail");

		this.addEntityAndEgg(EntityRegistry.BUBBLER_CRAB, "Bubbler Crab");
		this.addEntityAndEgg(EntityRegistry.GECKO, "Gecko");
		this.addEntityAndEgg(EntityRegistry.MIRE_SNAIL, "Mire Snail");
		this.addEntityAndEgg(EntityRegistry.SILT_CRAB, "Silt Crab");
		this.addEntityAndEgg(EntityRegistry.SWAMP_HAG, "Swamp Hag");
		this.addEntityAndEgg(EntityRegistry.WIGHT, "Wight");
		this.addEntityAndEgg(EntityRegistry.SLUDGE_WORM, "Small Sludge Worm");
		this.addEntityAndEgg(EntityRegistry.TINY_SLUDGE_WORM, "Tiny Sludge Worm");
		this.addEntityAndEgg(EntityRegistry.STALKER, "Stalker");
		this.addEntityAndEgg(EntityRegistry.PEAT_MUMMY, "Peat Mummy");
		this.addEntityAndEgg(EntityRegistry.DREADFUL_PEAT_MUMMY, "Dreadful Peat Mummy");
		this.addEntityAndEgg(EntityRegistry.ASH_SPRITE, "Ash Sprite");
		this.addEntityAndEgg(EntityRegistry.BARRISHEE, "Barrishee");
		this.addEntityAndEgg(EntityRegistry.GREEBLING, "Greebling");
		this.addEntityAndEgg(EntityRegistry.GREEBLING_CORACLE, "Greebling Coracle");
		this.addEntityAndEgg(EntityRegistry.CRYPT_CRAWLER, "Crypt Crawler");
		this.addEntityAndEgg(EntityRegistry.OLM, "Olm");
		this.addEntityAndEgg(EntityRegistry.EMBERLING, "Emberling");
		this.addEntityAndEgg(EntityRegistry.EMBERLING_SHAMAN, "Emberling Shaman");
		this.addEntityAndEgg(EntityRegistry.DRAGONFLY, "Dragonfly");
		this.addEntityAndEgg(EntityRegistry.FIREFLY, "Firefly");
		this.addEntityAndEgg(EntityRegistry.JELLYFISH, "Jellyfish");
		this.addEntityAndEgg(EntityRegistry.LURKER, "Lurker");
		this.addEntityAndEgg(EntityRegistry.SHAMBLER, "Shambler");
		this.addEntityAndEgg(EntityRegistry.FRESHWATER_URCHIN, "Freshwater Urchin");
		this.addEntityAndEgg(EntityRegistry.CAVE_FISH, "Cave Fish");

		this.addEntityType(EntityRegistry.ANGRY_PEBBLE, "Thrown Angry Pebble");
		this.addEntityType(EntityRegistry.BETWEENSTONE_PEBBLE, "Betweenstone Pebble");
		this.addEntityType(EntityRegistry.ELECTRIC_SHOCK, "Electric Shock");
		this.addEntityType(EntityRegistry.ELIXIR, "Thrown Elixir");
		this.addEntityType(EntityRegistry.FISH_BAIT, "Fish Bait");
		this.addEntityType(EntityRegistry.FISH_HOOK, "Fishing Hook");
		this.addEntityType(EntityRegistry.FISH_VORTEX, "Fish Vortex");
		this.addEntityType(EntityRegistry.ITEM_FRAME, "Item Frame");
		this.addEntityType(EntityRegistry.SEAT, "Seat");
		this.addEntityType(EntityRegistry.URCHIN_SPIKE, "Urchin Spike");
		this.addEntityType(EntityRegistry.MUMMY_ARM, "Mummy Arm");
		this.addEntityType(EntityRegistry.SLUDGE_BALL, "Sludge Ball");
		this.addEntityType(EntityRegistry.BIPED_CRYPT_CRAWLER, "Crypt Crawler");
		this.addEntityType(EntityRegistry.CHIEF_CRYPT_CRAWLER, "Crypt Crawler");
		this.addEntityType(EntityRegistry.TINY_SLUDGE_WORM_HELPER, "Tiny Sludge Worm Helper");

		this.add("item.thebetweenlands.anadia.health", "Health: %s / %s");
		this.add("item.thebetweenlands.anadia.size", "Size: %s");
		this.add("item.thebetweenlands.anadia.speed", "Speed: %s");
		this.add("item.thebetweenlands.anadia.strength", "Strength: %s");
		this.add("item.thebetweenlands.anadia.stamina", "Stamina: %s");

		this.add("item.thebetweenlands.anadia.status", "Status: ");
		this.add("item.thebetweenlands.anadia.rotting_1", "Freshly Caught");
		this.add("item.thebetweenlands.anadia.rotting_2", "Recently Caught");
		this.add("item.thebetweenlands.anadia.rotting_3", "Starting to Ripen");
		this.add("item.thebetweenlands.anadia.rotting_4", "Getting Smelly");
		this.add("item.thebetweenlands.anadia.rotting_5", "Getting Really Stinky");
		this.add("item.thebetweenlands.anadia.rotten", "Rotten");
		this.add("item.thebetweenlands.anadia.smoked", "Smoked");

		this.add("item.thebetweenlands.corrosion.0", "Good as new!");
		this.add("item.thebetweenlands.corrosion.1", "Slightly corroded");
		this.add("item.thebetweenlands.corrosion.2", "Moderately corroded");
		this.add("item.thebetweenlands.corrosion.3", "Very corroded");
		this.add("item.thebetweenlands.corrosion.4", "Extremely corroded");
		this.add("item.thebetweenlands.corrosion.5", "Completely corroded");

		this.add("item.thebetweenlands.coated.0", "Barely any coating left");
		this.add("item.thebetweenlands.coated.1", "Slightly coated");
		this.add("item.thebetweenlands.coated.2", "Moderately coated");
		this.add("item.thebetweenlands.coated.3", "Moderately coated");
		this.add("item.thebetweenlands.coated.4", "Well coated");
		this.add("item.thebetweenlands.coated.5", "Well coated");

		this.add("item.thebetweenlands.food_sickness.fine", "Tastes good");
		this.add("item.thebetweenlands.food_sickness.half", "Tastes fine");
		this.add("item.thebetweenlands.food_sickness.sick", "Can't eat this anymore");

		this.add("item.thebetweenlands.circle_gem.green", "Green Gem");
		this.add("item.thebetweenlands.circle_gem.crimson", "Crimson Gem");
		this.add("item.thebetweenlands.circle_gem.aqua", "Aqua Gem");

		this.add("item.thebetweenlands.decay_food", "Heals decay");
		this.add("item.thebetweenlands.equippable", "Equippable");

		this.add("item.thebetweenlands.used_in_recipes", "§5Used in: §7%s");
		this.add("item.thebetweenlands.compost_recipe", "Compost Bin");
		this.add("item.thebetweenlands.static_aspects", "Gecko Cage");
		this.add("item.thebetweenlands.aspects", "Infuser");
		this.add("item.thebetweenlands.animator_recipe", "Animator");
		this.add("item.thebetweenlands.purifier_recipe", "Purifier");
		this.add("item.thebetweenlands.censer_primary", "Censer");
		this.add("item.thebetweenlands.censer_secondary", "Censer (secondary)");
		this.add("item.thebetweenlands.mortar_recipe", "Mortar");
		this.add("item.thebetweenlands.offering_table_recipe", "Offering Table");
		this.add("item.thebetweenlands.water_filter_recipe", "Water Filter");
		this.add("item.thebetweenlands.steeping_pot_recipe", "Steeping Pot");
		this.add("item.thebetweenlands.silk_bundle_recipe", "Silk Bundle");

		this.add("item.thebetweenlands.amphibious_upgrade.damaged", "Damaged Amphibious Armor Upgrade (%d/%d)");
		this.add("item.thebetweenlands.amphibious_upgrade.broke", "Armor Upgrade %s broke.");
		this.add("item.thebetweenlands.amphibious_upgrade.format", "Amphibious %s");
		this.add("item.thebetweenlands.amphibious_upgrade.helmet", "Helmet");
		this.add("item.thebetweenlands.amphibious_upgrade.chestplate", "Chestplate");
		this.add("item.thebetweenlands.amphibious_upgrade.leggings", "Leggings");
		this.add("item.thebetweenlands.amphibious_upgrade.boots", "Boots");

		this.addItem(ItemRegistry.SWAMP_WATER_BUCKET, "Swamp Water Bucket");
		this.addItem(ItemRegistry.STAGNANT_WATER_BUCKET, "Stagnant Water Bucket");
		this.addItem(ItemRegistry.TAR_BUCKET, "Tar Bucket");
		this.addItem(ItemRegistry.RUBBER_BUCKET, "Rubber Bucket");
		this.addItem(ItemRegistry.CLEAN_WATER_BUCKET, "Clean Water Bucket");
		this.addItem(ItemRegistry.FISH_OIL_BUCKET, "Fish Oil Bucket");
		this.addItem(ItemRegistry.DULL_LAVENDER_DYE_BUCKET, "Dull Lavender Dye Bucket");
		this.addItem(ItemRegistry.MAROON_DYE_BUCKET, "Maroon Dye Bucket");
		this.addItem(ItemRegistry.SHADOW_GREEN_DYE_BUCKET, "Shadow Green Dye Bucket");
		this.addItem(ItemRegistry.CAMELOT_MAGENTA_DYE_BUCKET, "Camelot Magenta Dye Bucket");
		this.addItem(ItemRegistry.SAFFRON_DYE_BUCKET, "Saffron Dye Bucket");
		this.addItem(ItemRegistry.CARIBBEAN_GREEN_DYE_BUCKET, "Caribbean Green Dye Bucket");
		this.addItem(ItemRegistry.VIVID_TANGERINE_DYE_BUCKET, "Vivid Tangerine Dye Bucket");
		this.addItem(ItemRegistry.CHAMPAGNE_DYE_BUCKET, "Champagne Dye Bucket");
		this.addItem(ItemRegistry.RAISIN_BLACK_DYE_BUCKET, "Raisin Black Dye Bucket");
		this.addItem(ItemRegistry.SUSHI_GREEN_DYE_BUCKET, "Sushi Green Dye Bucket");
		this.addItem(ItemRegistry.ELM_CYAN_DYE_BUCKET, "Elm Cyan Dye Bucket");
		this.addItem(ItemRegistry.CADMIUM_GREEN_DYE_BUCKET, "Cadmium Green Dye Bucket");
		this.addItem(ItemRegistry.LAVENDER_BLUE_DYE_BUCKET, "Lavender Blue Dye Bucket");
		this.addItem(ItemRegistry.BROWN_RUST_DYE_BUCKET, "Brown Rust Dye Bucket");
		this.addItem(ItemRegistry.MIDNIGHT_PURPLE_DYE_BUCKET, "Mignight Purple Dye Bucket");
		this.addItem(ItemRegistry.PEWTER_GREY_DYE_BUCKET, "Pewter Grey Dye Bucket");
		this.addItem(ItemRegistry.NETTLE_SOUP_BUCKET, "Nettle Soup Bucket");
		this.addItem(ItemRegistry.NETTLE_TEA_BUCKET, "Nettle Tea Bucket");
		this.addItem(ItemRegistry.PHEROMONE_EXTRACT_BUCKET, "Pheromone Extract Bucket");
		this.addItem(ItemRegistry.SWAMP_BROTH_BUCKET, "Swamp Broth Bucket");
		this.addItem(ItemRegistry.STURDY_STOCK_BUCKET, "Sturdy Stock Bucket");
		this.addItem(ItemRegistry.PEAR_CORDIAL_BUCKET, "Pear Cordial Bucket");
		this.addItem(ItemRegistry.SHAMANS_BREW_BUCKET, "Shaman's Brew Bucket");
		this.addItem(ItemRegistry.LAKE_BROTH_BUCKET, "Lake Broth Bucket");
		this.addItem(ItemRegistry.SHELL_STOCK_BUCKET, "Shell Stock Bucket");
		this.addItem(ItemRegistry.FROG_LEG_EXTRACT_BUCKET, "Frog Leg Extract Bucket");
		this.addItem(ItemRegistry.WITCH_TEA_BUCKET, "Witch Tea Bucket");

		this.addItem(ItemRegistry.ROTTEN_FOOD, "Rotten Food");
		this.add(ItemRegistry.ROTTEN_FOOD.get().getDescriptionId() + ".food", "Rotten Food (%s)");
		this.addItem(ItemRegistry.TAINTED_POTION, "Tainted Potion");
		this.add(ItemRegistry.TAINTED_POTION.get().getDescriptionId() + ".potion", "Tainted Potion (%s)");

		this.addItem(ItemRegistry.CRIMSON_SNAIL_SHELL, "Crimson Snail Shell");
		this.addItem(ItemRegistry.OCHRE_SNAIL_SHELL, "Ochre Snail Shell");
		this.addItem(ItemRegistry.COMPOST, "Compost");
		this.addItem(ItemRegistry.DRAGONFLY_WING, "Dragonfly Wing");
		this.addItemWithDesc(ItemRegistry.LURKER_SKIN, "Lurker Skin", "Tough and grounded.");
		this.addItem(ItemRegistry.DRIED_SWAMP_REED, "Dried Swamp Reed");
		this.addItem(ItemRegistry.REED_ROPE, "Reed Rope");
		this.addItem(ItemRegistry.MUD_BRICK, "Mud Brick");
		this.addItem(ItemRegistry.SYRMORITE_INGOT, "Syrmorite Ingot");
		this.addItem(ItemRegistry.DRY_BARK, "Dry Bark");
		this.addItem(ItemRegistry.SLIMY_BONE, "Slimy Bone");
		this.addItem(ItemRegistry.SNAPPER_ROOT, "Snapper Root");
		this.addItem(ItemRegistry.STALKER_EYE, "Stalker Eye");
		this.addItem(ItemRegistry.SULFUR, "Sulfur");
		this.addItem(ItemRegistry.VALONITE_SHARD, "Valonite Shard");
		this.addItem(ItemRegistry.WEEDWOOD_STICK, "Weedwood Stick");
		this.addItem(ItemRegistry.ANGLER_TOOTH, "Angler Tooth");
		this.addItem(ItemRegistry.WEEDWOOD_BOWL, "Weedwood Bowl");
		this.addItem(ItemRegistry.RUBBER_BALL, "Rubber Ball");
		this.addItem(ItemRegistry.TAR_BEAST_HEART, "Tar Beast Heart");
		this.addItem(ItemRegistry.ANIMATED_TAR_BEAST_HEART, "Animated Tar Beast Heart");
		this.addItem(ItemRegistry.TAR_DRIP, "Tar Drip");
		this.addItem(ItemRegistry.LIMESTONE_FLUX, "Limestone Flux");
		this.addItem(ItemRegistry.INANIMATE_TARMINION, "Inanimate Tarminion");
		this.addItem(ItemRegistry.POISON_GLAND, "Poison Gland");
		this.addItem(ItemRegistry.AMATE_PAPER, "Amate Paper");
		this.addItem(ItemRegistry.SHOCKWAVE_SWORD_PIECE_1, "Shockwave Sword Piece");
		this.addItem(ItemRegistry.SHOCKWAVE_SWORD_PIECE_2, "Shockwave Sword Piece");
		this.addItem(ItemRegistry.SHOCKWAVE_SWORD_PIECE_3, "Shockwave Sword Piece");
		this.addItem(ItemRegistry.SHOCKWAVE_SWORD_PIECE_4, "Shockwave Sword Piece");
		this.addItem(ItemRegistry.AMULET_SOCKET, "Amulet Socket");
		this.addItem(ItemRegistry.SCABYST, "Scabyst");
		this.addItem(ItemRegistry.ITEM_SCROLL, "Item Scroll");
		this.addItem(ItemRegistry.SYRMORITE_NUGGET, "Syrmorite Nugget");
		this.addItem(ItemRegistry.OCTINE_NUGGET, "Octine Nugget");
		this.addItem(ItemRegistry.VALONITE_SPLINTER, "Valonite Splinter");
		this.addItem(ItemRegistry.CREMAINS, "Cremains");
		this.addItem(ItemRegistry.UNDYING_EMBERS, "Undying Embers");
		this.addItem(ItemRegistry.INANIMATE_ANGRY_PEBBLE, "Inanimate Angry Pebble");
		this.addItem(ItemRegistry.ANCIENT_REMNANT, "Ancient Remnant");
		this.addItem(ItemRegistry.LOOT_SCRAPS, "Loot Scraps");
		this.addItem(ItemRegistry.FABRICATED_SCROLL, "Fabricated Scroll");
		this.addItemWithDesc(ItemRegistry.ANADIA_SWIM_BLADDER, "Anadia Swim Bladder", "Keeps the fish from sinking... and floating.");
		this.addItemWithDesc(ItemRegistry.ANADIA_EYE, "Anadia Eye", "Made for aquatic sight.");
		this.addItemWithDesc(ItemRegistry.ANADIA_GILLS, "Anadia Gills", "Fish don't hold their breath.");
		this.addItemWithDesc(ItemRegistry.ANADIA_SCALES, "Anadia Scales", "Forms a protective layer.");
		this.addItemWithDesc(ItemRegistry.ANADIA_BONES, "Anadia Bones", "Thin, but resilient.");
		this.addItem(ItemRegistry.ANADIA_REMAINS, "Anadia Remains");
		this.addItemWithDesc(ItemRegistry.ANADIA_FINS, "Anadia Fins", "They glide through the water like wings through air.");
		this.addItemWithDesc(ItemRegistry.SNOT, "Snot", "Seems to barely have drag in water.");
		this.addItemWithDesc(ItemRegistry.URCHIN_SPIKE, "Urchin Spike", "Offense as defense.");
		this.addItem(ItemRegistry.FISHING_FLOAT_AND_HOOK, "Fishing Float and Hook");
		this.addItem(ItemRegistry.OLMLETTE_MIXTURE, "Olmlette Mixture");
		this.addItem(ItemRegistry.SILK_COCOON, "Silk Cocoon");
		this.addItem(ItemRegistry.SILK_THREAD, "Silk Thread");
		this.addItem(ItemRegistry.DIRTY_SILK_BUNDLE, "Dirty Silk Bundle");
		this.addItem(ItemRegistry.PHEROMONE_THORAXES, "Clutch of Pheromone Thoraxes");
		this.addItem(ItemRegistry.SWAMP_TALISMAN, "Swamp Talisman");
		this.addItem(ItemRegistry.SWAMP_TALISMAN_PIECE_1, "Swamp Talisman Piece");
		this.addItem(ItemRegistry.SWAMP_TALISMAN_PIECE_2, "Swamp Talisman Piece");
		this.addItem(ItemRegistry.SWAMP_TALISMAN_PIECE_3, "Swamp Talisman Piece");
		this.addItem(ItemRegistry.SWAMP_TALISMAN_PIECE_4, "Swamp Talisman Piece");
		this.addItem(ItemRegistry.WEEDWOOD_ROWBOAT, "Weedwood Rowboat");
		this.addItem(ItemRegistry.ORANGE_DENTROTHYST_SHARD, "Orange Dentrothyst Shard");
		this.addItem(ItemRegistry.GREEN_DENTROTHYST_SHARD, "Green Dentrothyst Shard");
		this.addItem(ItemRegistry.FISH_BAIT, "Fish Bait");
		this.add(ItemRegistry.FISH_BAIT.get().getDescriptionId() + ".sink_speed", "Sink speed: %s");
		this.add(ItemRegistry.FISH_BAIT.get().getDescriptionId() + ".dissolve_time", "Dissolve time: %s");
		this.add(ItemRegistry.FISH_BAIT.get().getDescriptionId() + ".range", "Range: %s");
		this.add(ItemRegistry.FISH_BAIT.get().getDescriptionId() + ".glowing", "Glowing: %s");
		this.addItemWithDesc(ItemRegistry.FUMIGANT, "Fumigant", "Removes the Stench of Rot on a Player");
		this.addItem(ItemRegistry.SAP_BALL, "Ball of Sap");
		this.addItem(ItemRegistry.MIRE_SNAIL_EGG, "Mire Snail Egg");
		this.addItem(ItemRegistry.COOKED_MIRE_SNAIL_EGG, "Cooked Mire Snail Egg");
		this.addItem(ItemRegistry.RAW_FROG_LEGS, "Raw Frog's Leg");
		this.addItem(ItemRegistry.COOKED_FROG_LEGS, "Fried Frog's Leg");
		this.addItem(ItemRegistry.RAW_SNAIL_FLESH, "Raw Snail Flesh");
		this.addItem(ItemRegistry.COOKED_SNAIL_FLESH, "Seared Snail Flesh");
		this.addItem(ItemRegistry.REED_DONUT, "Reed Donut");
		this.addItem(ItemRegistry.JAM_DONUT, "Jam Donut");
		this.addItem(ItemRegistry.GERTS_DONUT, "Gert's Donut");
		this.addItem(ItemRegistry.PUFFSHROOM_TENDRIL, "Puffshroom Tendril");
		this.addItem(ItemRegistry.KRAKEN_TENTACLE, "Kraken Tentacle");
		this.addItem(ItemRegistry.KRAKEN_CALAMARI, "Kraken Calamari");
		this.addItem(ItemRegistry.MIDDLE_FRUIT, "White Pear");
		this.addItem(ItemRegistry.MINCE_PIE, "Mince Pie");
		this.addItem(ItemRegistry.CHRISTMAS_PUDDING, "Christmas Pudding");
		this.addItem(ItemRegistry.CANDY_CANE, "Candy Cane");
		this.addItem(ItemRegistry.WEEPING_BLUE_PETAL, "Weeping Blue Petal");
		this.addItem(ItemRegistry.WIGHT_HEART, "Wight Heart");
		this.addItem(ItemRegistry.YELLOW_DOTTED_FUNGUS, "Yellow Dotted Fungus");
		this.addItem(ItemRegistry.SILT_CRAB_CLAW, "Crab Claw");
		this.addItem(ItemRegistry.CRAB_STICK, "Crabstick");
		this.addItem(ItemRegistry.SLUDGE_JELLO, "Sludge Jello");
		this.addItem(ItemRegistry.MIDDLE_FRUIT_JELLO, "White Pear Jello");
		this.addItem(ItemRegistry.SAP_JELLO, "Sap Jello");
		this.addItem(ItemRegistry.GREEN_MARSHMALLOW, "Green Marshmallow");
		this.addItem(ItemRegistry.PINK_MARSHMALLOW, "Pink Marshmallow");
		this.addItem(ItemRegistry.FLATHEAD_MUSHROOM, "Flathead Mushroom");
		this.addItem(ItemRegistry.BLACK_HAT_MUSHROOM, "Black Hat Mushroom");
		this.addItem(ItemRegistry.BULB_CAPPED_MUSHROOM, "Bulb-Capped Mushroom");
		this.addItem(ItemRegistry.FRIED_SWAMP_KELP, "Fried Swamp Kelp");
		this.addItemWithDesc(ItemRegistry.FORBIDDEN_FIG, "Forbidden Fig", "Looks tempting...");
		this.addItem(ItemRegistry.BLUE_CANDY, "Blue Candy");
		this.addItem(ItemRegistry.RED_CANDY, "Red Candy");
		this.addItem(ItemRegistry.YELLOW_CANDY, "Yellow Candy");
		this.addItem(ItemRegistry.CHIROMAW_WING, "Chiromaw Wing");
		this.add("item.thebetweenlands.chiromaw_wing.eat", "Anything will taste better after eating this...");
		this.add("item.thebetweenlands.chiromaw_wing.dont_eat", "I probably shouldn't eat this anymore...");
		this.addItem(ItemRegistry.TANGLED_ROOT, "Tangled Root");
		this.addItem(ItemRegistry.MIRE_SCRAMBLE, "Mire Scramble");
		this.addItem(ItemRegistry.WEEPING_BLUE_PETAL_SALAD, "Weeping Blue Petal Salad");
		this.addItem(ItemRegistry.NIBBLESTICK, "Nibblestick");
		this.addItem(ItemRegistry.SPIRIT_FRUIT, "Spirit Fruit");
		this.addItem(ItemRegistry.SUSHI, "Sushi");
		this.addItemWithDesc(ItemRegistry.ROCK_SNOT_PEARL, "Rocksnot Pearl", "Grants 10 experience when consumed");
		this.addItemWithDesc(ItemRegistry.PEARLED_PEAR, "Pearled Pear", "Grants 80 experience when consumed");
		this.addItem(ItemRegistry.RAW_ANADIA_MEAT, "Raw Anadia Meat");
		this.addItem(ItemRegistry.COOKED_ANADIA_MEAT, "Cooked Anadia Meat");
		this.addItem(ItemRegistry.SMOKED_ANADIA_MEAT, "Smoked Anadia Meat");
		this.addItem(ItemRegistry.BARNACLE, "Barnacle Flesh");
		this.addItem(ItemRegistry.COOKED_BARNACLE, "Cooked Barnacle Flesh");
		this.addItem(ItemRegistry.SMOKED_BARNACLE, "Smoked Barnacle Flesh");
		this.addItem(ItemRegistry.SMOKED_CRAB_STICK, "Smoked Crabstick");
		this.addItem(ItemRegistry.SMOKED_FROG_LEGS, "Smoked Frog's Leg");
		this.addItem(ItemRegistry.SMOKED_PUFFSHROOM_TENDRIL, "Smoked Puffshroom Tendril");
		this.addItem(ItemRegistry.SMOKED_SILT_CRAB_CLAW, "Smoked Crab Claw");
		this.addItem(ItemRegistry.SMOKED_SNAIL_FLESH, "Smoked Snail Flesh");
		this.addItem(ItemRegistry.RAW_OLM_EGG, "Olm Egg Cluster");
		this.addItem(ItemRegistry.COOKED_OLM_EGG, "Baked Olm Egg Cluster");
		this.addItem(ItemRegistry.OLMLETTE, "Olmlette");
		this.addItem(ItemRegistry.SILK_GRUB, "Silk Grub");
		this.addItem(ItemRegistry.NETTLE_SOUP, "Nettle Soup");
		this.addItem(ItemRegistry.NETTLE_TEA, "Nettle Tea");
		this.addItem(ItemRegistry.PHEROMONE_EXTRACT, "Pheromone Extract");
		this.addItem(ItemRegistry.SWAMP_BROTH, "Swamp Broth");
		this.addItem(ItemRegistry.STURDY_STOCK, "Sturdy Stock");
		this.addItem(ItemRegistry.PEAR_CORDIAL, "Pear Cordial");
		this.addItem(ItemRegistry.SHAMANS_BREW, "Shaman's Brew");
		this.addItem(ItemRegistry.LAKE_BROTH, "Lake Broth");
		this.addItem(ItemRegistry.SHELL_STOCK, "Shell Stock");
		this.addItem(ItemRegistry.FROG_LEG_EXTRACT, "Frog Leg Extract");
		this.addItem(ItemRegistry.WITCH_TEA, "Witch Tea");
		this.addItem(ItemRegistry.HERBLORE_BOOK, "Herblore Book");
		this.add("item.thebetweenlands.modifiers.armor", "When on armor:");
		this.add("item.thebetweenlands.modifiers.tool", "When on tool:");
		this.addItem(ItemRegistry.CRIMSON_MIDDLE_GEM, "Crimson Middle Gem");
		this.add("item.thebetweenlands.crimson_middle_gem.armor", " - Chance to hurt the enemy when attacked");
		this.add("item.thebetweenlands.crimson_middle_gem.tool", " - Chance to gain strength when attacking");
		this.addItem(ItemRegistry.GREEN_MIDDLE_GEM, "Green Middle Gem");
		this.add("item.thebetweenlands.green_middle_gem.armor", " - Chance to absorb damage when attacked");
		this.add("item.thebetweenlands.green_middle_gem.tool", " - Chance to heal when attacking");
		this.addItem(ItemRegistry.AQUA_MIDDLE_GEM, "Aqua Middle Gem");
		this.add("item.thebetweenlands.aqua_middle_gem.armor", " - Chance to gain defense when attacked");
		this.add("item.thebetweenlands.aqua_middle_gem.tool", " - Chance to weaken the enemy when attacking");
		this.addItem(ItemRegistry.LIFE_CRYSTAL, "Life Crystal");
		this.addItem(ItemRegistry.LIFE_CRYSTAL_FRAGMENT, "Life Crystal Fragment");
		this.add("item.thebetweenlands.life_crystal.remaining", "%s%% remaining");
		this.addItem(ItemRegistry.PYRAD_FLAME, "Pyrad Flame");
		this.add("item.thebetweenlands.mob.health", "Health: %s/%s");
		this.addItem(ItemRegistry.TINY_SLUDGE_WORM, "Tiny Sludge Worm");
		this.addItem(ItemRegistry.TINY_SLUDGE_WORM_HELPER, "Tiny Sludge Worm Helper");
		this.addItem(ItemRegistry.SHIMMER_STONE, "Shimmerstone");
		//tarminion
		this.addItem(ItemRegistry.SLUDGE_BALL, "Sludge Ball");
		//rope
		this.addItem(ItemRegistry.ANGRY_PEBBLE, "Angry Pebble");
		this.addItemWithDesc(ItemRegistry.OCTINE_INGOT, "Octine Ingot", "Hot enough to set moss on fire");
		this.addItem(ItemRegistry.SHAMBLER_TONGUE, "Shambler Tongue");
		this.addItemWithDesc(ItemRegistry.SAP_SPIT, "Sap Spit", "Keeps decay at bay.");
		this.addItem(ItemRegistry.RUNE_DOOR_KEY, "Rune Door Key");
		this.addItemWithDesc(ItemRegistry.LURKER_SKIN_PATCH, "Lurker Skin Patch", "Fixes Draeton leakages");
		this.addItem(ItemRegistry.DRAETON_BALLOON, "Draeton Balloon");
		this.addItem(ItemRegistry.DRAETON_BURNER, "Draeton Burner");
		this.addItem(ItemRegistry.DRAETON, "Draeton");
		this.addItem(ItemRegistry.DRAETON_FURNACE_UPGRADE, "Draeton Furnace Upgrade");
		this.addItem(ItemRegistry.DRAETON_ANCHOR_UPGRADE, "Draeton Anchor Upgrade");
		this.addItem(ItemRegistry.DRAETON_CRAFTING_UPGRADE, "Draeton Crafting Upgrade");
		this.addItem(ItemRegistry.WEEDWOOD_ROWBOAT_LANTERN_UPGRADE, "Weedwood Rowboat Lantern Upgrade");
		this.addItem(ItemRegistry.AMATE_NAME_TAG, "Amate Name Tag");
		this.addItem(ItemRegistry.DULL_LAVENDER_DYE, "Dull Lavender Dye");
		this.addItem(ItemRegistry.MAROON_DYE, "Maroon Dye");
		this.addItem(ItemRegistry.SHADOW_GREEN_DYE, "Shadow Green Dye");
		this.addItem(ItemRegistry.CAMELOT_MAGENTA_DYE, "Camelot Magenta Dye");
		this.addItem(ItemRegistry.SAFFRON_DYE, "Saffron Dye");
		this.addItem(ItemRegistry.CARIBBEAN_GREEN_DYE, "Caribbean Green Dye");
		this.addItem(ItemRegistry.VIVID_TANGERINE_DYE, "Vivid Tangerine Dye");
		this.addItem(ItemRegistry.CHAMPAGNE_DYE, "Champagne Dye");
		this.addItem(ItemRegistry.RAISIN_BLACK_DYE, "Raisin Black Dye");
		this.addItem(ItemRegistry.SUSHI_GREEN_DYE, "Sushi Green Dye");
		this.addItem(ItemRegistry.ELM_CYAN_DYE, "Elm Cyan Dye");
		this.addItem(ItemRegistry.CADMIUM_GREEN_DYE, "Cadmium Green Dye");
		this.addItem(ItemRegistry.LAVENDER_BLUE_DYE, "Lavender Blue Dye");
		this.addItem(ItemRegistry.BROWN_RUST_DYE, "Brown Rust Dye");
		this.addItem(ItemRegistry.MIDNIGHT_PURPLE_DYE, "Mignight Purple Dye");
		this.addItem(ItemRegistry.PEWTER_GREY_DYE, "Pewter Grey Dye");
		this.addItem(ItemRegistry.DULL_LAVENDER_ITEM_FRAME, "Dull Lavender Item Frame");
		this.addItem(ItemRegistry.MAROON_ITEM_FRAME, "Maroon Item Frame");
		this.addItem(ItemRegistry.SHADOW_GREEN_ITEM_FRAME, "Shadow Green Item Frame");
		this.addItem(ItemRegistry.CAMELOT_MAGENTA_ITEM_FRAME, "Camelot Magenta Item Frame");
		this.addItem(ItemRegistry.SAFFRON_ITEM_FRAME, "Saffron Item Frame");
		this.addItem(ItemRegistry.CARIBBEAN_GREEN_ITEM_FRAME, "Caribbean Green Item Frame");
		this.addItem(ItemRegistry.VIVID_TANGERINE_ITEM_FRAME, "Vivid Tangerine Item Frame");
		this.addItem(ItemRegistry.CHAMPAGNE_ITEM_FRAME, "Champagne Item Frame");
		this.addItem(ItemRegistry.RAISIN_BLACK_ITEM_FRAME, "Raisin Black Item Frame");
		this.addItem(ItemRegistry.SUSHI_GREEN_ITEM_FRAME, "Sushi Green Item Frame");
		this.addItem(ItemRegistry.ELM_CYAN_ITEM_FRAME, "Elm Cyan Item Frame");
		this.addItem(ItemRegistry.CADMIUM_GREEN_ITEM_FRAME, "Cadmium Green Item Frame");
		this.addItem(ItemRegistry.LAVENDER_BLUE_ITEM_FRAME, "Lavender Blue Item Frame");
		this.addItem(ItemRegistry.BROWN_RUST_ITEM_FRAME, "Brown Rust Item Frame");
		this.addItem(ItemRegistry.MIDNIGHT_PURPLE_ITEM_FRAME, "Mignight Purple Item Frame");
		this.addItem(ItemRegistry.PEWTER_GREY_ITEM_FRAME, "Pewter Grey Item Frame");
		this.addItem(ItemRegistry.PHEROMONE_THORAX, "Pheromone Thorax");
		this.addItem(ItemRegistry.SILK_FILTER, "Silk Mesh Strainer");
		this.addItem(ItemRegistry.MOSS_FILTER, "Moss Mesh Strainer");
		this.addItem(ItemRegistry.SILKY_PEBBLE, "Silky Pebble");

		this.addItem(ItemRegistry.BONE_HELMET, "Bone Helmet");
		this.addItem(ItemRegistry.BONE_CHESTPLATE, "Bone Chestplate");
		this.addItem(ItemRegistry.BONE_LEGGINGS, "Bone Leggings");
		this.addItem(ItemRegistry.BONE_BOOTS, "Bone Boots");
		this.addItem(ItemRegistry.LURKER_SKIN_HELMET, "Lurker Skin Helmet");
		this.addItem(ItemRegistry.LURKER_SKIN_CHESTPLATE, "Lurker Skin Chestplate");
		this.addItem(ItemRegistry.LURKER_SKIN_LEGGINGS, "Lurker Skin Leggings");
		this.addItem(ItemRegistry.LURKER_SKIN_BOOTS, "Lurker Skin Boots");
		this.addItem(ItemRegistry.SYRMORITE_HELMET, "Syrmorite Helmet");
		this.addItem(ItemRegistry.SYRMORITE_CHESTPLATE, "Syrmorite Chestplate");
		this.addItem(ItemRegistry.SYRMORITE_LEGGINGS, "Syrmorite Leggings");
		this.addItem(ItemRegistry.SYRMORITE_BOOTS, "Syrmorite Boots");
		this.addItem(ItemRegistry.VALONITE_HELMET, "Valonite Helmet");
		this.addItem(ItemRegistry.VALONITE_CHESTPLATE, "Valonite Chestplate");
		this.addItem(ItemRegistry.VALONITE_LEGGINGS, "Valonite Leggings");
		this.addItem(ItemRegistry.VALONITE_BOOTS, "Valonite Boots");
		this.addItem(ItemRegistry.ANCIENT_HELMET, "Ancient Helmet");
		this.addItem(ItemRegistry.ANCIENT_CHESTPLATE, "Ancient Chestplate");
		this.addItem(ItemRegistry.ANCIENT_LEGGINGS, "Ancient Leggings");
		this.addItem(ItemRegistry.ANCIENT_BOOTS, "Ancient Boots");
		this.add("item.thebetweenlands.ancient_armor.desc", "Reduces Magic Damage.\nUp to half magic damage reduction with a full set equipped.");
		this.addItem(ItemRegistry.AMPHIBIOUS_HELMET, "Amphibious Helmet");
		this.addItem(ItemRegistry.AMPHIBIOUS_CHESTPLATE, "Amphibious Chestplate");
		this.addItem(ItemRegistry.AMPHIBIOUS_LEGGINGS, "Amphibious Leggings");
		this.addItem(ItemRegistry.AMPHIBIOUS_BOOTS, "Amphibious Boots");
		this.add("item.thebetweenlands.amphibious_armor.upgrade", " - %s x%s");
		this.addItem(ItemRegistry.RUBBER_BOOTS, "Rubber Boots");
		this.addItem(ItemRegistry.MARSH_RUNNER_BOOTS, "Boots of the Marsh Runner");
		this.addItem(ItemRegistry.WEEDWOOD_SWORD, "Weedwood Sword");
		this.addItem(ItemRegistry.WEEDWOOD_SHOVEL, "Weedwood Shovel");
		this.addItem(ItemRegistry.WEEDWOOD_AXE, "Weedwood Axe");
		this.addItem(ItemRegistry.WEEDWOOD_PICKAXE, "Weedwood Pickaxe");
		this.addItem(ItemRegistry.BONE_SWORD, "Bone Sword");
		this.addItem(ItemRegistry.BONE_SHOVEL, "Bone Shovel");
		this.addItem(ItemRegistry.BONE_AXE, "Bone Axe");
		this.addItem(ItemRegistry.BONE_PICKAXE, "Bone Pickaxe");
		this.addItem(ItemRegistry.OCTINE_SWORD, "Octine Sword");
		this.addItem(ItemRegistry.OCTINE_SHOVEL, "Octine Shovel");
		this.addItem(ItemRegistry.OCTINE_AXE, "Octine Axe");
		this.addItem(ItemRegistry.OCTINE_PICKAXE, "Octine Pickaxe");
		this.addItem(ItemRegistry.VALONITE_SWORD, "Valonite Sword");
		this.addItem(ItemRegistry.VALONITE_SHOVEL, "Valonite Shovel");
		this.addItem(ItemRegistry.VALONITE_AXE, "Valonite Axe");
		this.addItem(ItemRegistry.VALONITE_GREATAXE, "Valonite Greataxe");
		this.addItem(ItemRegistry.VALONITE_PICKAXE, "Valonite Pickaxe");
		this.addItemWithDesc(ItemRegistry.OCTINE_SHIELD, "Octine Shield", "Sets enemies on fire");
		this.addItemWithDesc(ItemRegistry.VALONITE_SHIELD, "Valonite Shield", "Hold '%1$s' + '%2$s' to charge up and then let go of '%1$s' to charge at enemies.\nReflects projectiles");
		this.addItem(ItemRegistry.WEEDWOOD_SHIELD, "Weedwood Shield");
		this.addItem(ItemRegistry.LIVING_WEEDWOOD_SHIELD, "Living Weedwood Shield");
		this.addItemWithDesc(ItemRegistry.SYRMORITE_SHIELD, "Syrmorite Shield", "Hold '%1$s' + '%2$s' to charge up and then let go of '%1$s' to charge at enemies");
		this.addItem(ItemRegistry.BONE_SHIELD, "Bone Shield");
		this.addItem(ItemRegistry.GREEN_DENTROTHYST_SHIELD, "Green Dentrothyst Shield");
		this.addItem(ItemRegistry.ORANGE_DENTROTHYST_SHIELD, "Orange Dentrothyst Shield");
		this.addItem(ItemRegistry.POLISHED_GREEN_DENTROTHYST_SHIELD, "Green Dentrothyst Shield");
		this.addItem(ItemRegistry.POLISHED_ORANGE_DENTROTHYST_SHIELD, "Polished Orange Dentrothyst Shield");
		this.add("item.thebetweenlands.dentrothyst_shield.desc", "Blocks splash potion effects");
		this.addItemWithDesc(ItemRegistry.LURKER_SKIN_SHIELD, "Lurker Skin Shield", "Can also be used as a raft");
		this.addItem(ItemRegistry.SYRMORITE_SHEARS, "Syrmorite Shears");
		this.addItem(ItemRegistry.SICKLE, "Sickle");
		//shockwave sword
		this.addItem(ItemRegistry.ANGLER_TOOTH_ARROW, "Angler Tooth Arrow");
		this.addItem(ItemRegistry.POISONED_ANGLER_TOOTH_ARROW, "Poisoned Angler Tooth Arrow");
		this.addItemWithDesc(ItemRegistry.OCTINE_ARROW, "Octine Arrow", "Use with caution!");
		this.addItemWithDesc(ItemRegistry.BASILISK_ARROW, "Basilisk Arrow", "Causes paralysis");
		this.addItem(ItemRegistry.SLUDGE_WORM_ARROW, "Sludge Worm Arrow");
		this.addItem(ItemRegistry.SHOCK_ARROW, "Shock Arrow");
		this.addItem(ItemRegistry.CHIROMAW_BARB, "Chiromaw Barb");
		this.addItem(ItemRegistry.WEEDWOOD_BOW, "Weedwood Bow");
		this.addItem(ItemRegistry.PREDATOR_BOW, "Predator Bow");
		//ancient weps
		this.addItem(ItemRegistry.PESTLE, "Pestle");
		this.add("item.thebetweenlands.pestle.desc", "Place Pestle in Mortar");
		this.add("item.thebetweenlands.pestle.remaining", "%d%% Remaining: %d more uses.");
		this.addItem(ItemRegistry.NET, "Net");
		this.addItem(ItemRegistry.SMALL_LURKER_SKIN_POUCH, "Lurker Skin Pouch");
		this.addItem(ItemRegistry.MEDIUM_LURKER_SKIN_POUCH, "Lurker Skin Pouch");
		this.addItem(ItemRegistry.LARGE_LURKER_SKIN_POUCH, "Lurker Skin Pouch");
		this.addItem(ItemRegistry.XL_LURKER_SKIN_POUCH, "Lurker Skin Pouch");
		this.add("item.thebetweenlands.lurker_skin_pouch.size", "%d inventory slots");
		this.add("item.thebetweenlands.lurker_skin_pouch.upgrade", "Craft surrounded with Lurker Skin to upgrade");
		this.add("item.thebetweenlands.lurker_skin_pouch.usage", "Press '%s' or right click to open the Pouch");
		//caving rope light
		//grappling hooks
		this.addItem(ItemRegistry.VOLARKITE, "Volarkite");
		this.addItemWithDesc(ItemRegistry.SLINGSHOT, "Simple Slingshot", "Shoots Betweenstone Pebbles");
		this.addItem(ItemRegistry.WEEDWOOD_FISHING_ROD, "Weedwood Fishing Rod");
		this.add("item.thebetweenlands.weedwood_fishing_rod.broken", "%s is broken\nand needs a new line and float.");
		this.add("item.thebetweenlands.weedwood_fishing_rod.baited", "Has Worm: %s");
		//spears
		this.addItem(ItemRegistry.WEEDWOOD_BUCKET, "Weedwood Bucket");
		this.add(ItemRegistry.WEEDWOOD_BUCKET.get().getDescriptionId() + ".fluid", "Weedwood Bucket (%s)");
		this.addItem(ItemRegistry.SYRMORITE_BUCKET, "Syrmorite Bucket");
		this.add(ItemRegistry.SYRMORITE_BUCKET.get().getDescriptionId() + ".fluid", "Syrmorite Bucket (%s)");
		this.addItem(ItemRegistry.WEEDWOOD_INFUSION_BUCKET, "Weedwood Infusion Bucket");
		this.addItem(ItemRegistry.SYRMORITE_INFUSION_BUCKET, "Syrmorite Infusion Bucket");
		this.add("item.thebetweenlands.infusion_bucket.empty", "Empty");
		this.add("item.thebetweenlands.infusion_bucket.time", "Infusion time:§r %s");
		this.add("item.thebetweenlands.infusion_bucket.ingredients", "Ingredients:");
		this.add("item.thebetweenlands.infusion_bucket.ingredient_amount", "%sx %s");
		this.add("item.thebetweenlands.infusion_bucket.aspect", " - %s (%s)");
		this.addItemWithDesc(ItemRegistry.SOLID_RUBBER_SYRMORITE_BUCKET, "Syrmorite Bucket with Solid Rubber", "Right click to extract the rubber from the bucket");
		this.addItem(ItemRegistry.ASCENT_UPGRADE, "Ascent Upgrade");
		this.addItem(ItemRegistry.ELECTRIC_UPGRADE, "Electric Upgrade");
		this.addItem(ItemRegistry.FISH_VORTEX_UPGRADE, "Fish Vortex Upgrade");
		this.addItem(ItemRegistry.GLIDE_UPGRADE, "Glide Upgrade");
		this.addItem(ItemRegistry.URCHIN_SPIKE_UPGRADE, "Urchin Spike Upgrade");
		this.addItemWithDesc(ItemRegistry.BIOPATHIC_TRIGGERSTONE, "Biopathic Triggerstone", "Activates Amphibious Armor Ability Upgrade");
		this.add("item.thebetweenlands.biopathic_triggerstone.activate", "Right Click to Activate");
		this.addItemWithDesc(ItemRegistry.BIOPATHIC_LINKSTONE, "Biopathic Linkstone", "Toggles Amphibious Armor Ability Upgrade");
		this.add("item.thebetweenlands.biopathic_linkstone.activate", "Right Click to Toggle");
		this.add("item.thebetweenlands.biopathic_linkstone.toggle", "%s Active: %s");
		this.add("item.thebetweenlands.stone.select", "Sneak + Right Click to Scroll");
		this.add("item.thebetweenlands.stone.selected", "Selected Effect: %s");
		this.addItem(ItemRegistry.SILK_BUNDLE, "Silk Bundle");
		this.add("item.thebetweenlands.silk_bundle.item", "- %s");

		//skull mask
		//explorer hat
		//tree masks
		//gallery frames
		//silk mask
		this.addItem(ItemRegistry.WIGHTS_BANE, "Wight's Bane");
		this.addItem(ItemRegistry.SLUDGE_SLICER, "Sludge Slicer");
		this.addItem(ItemRegistry.CRITTER_CRUNCHER, "Critter Cruncher");
		this.addItem(ItemRegistry.HAG_HACKER, "Hag Hacker");
		this.addItem(ItemRegistry.VOODOO_DOLL, "Voodoo Doll");
		this.addItem(ItemRegistry.SWIFT_PICK, "Swift Pick");
		//erupters
		this.addItem(ItemRegistry.MIST_STAFF, "Staff of the Mist Walker");
		this.addItem(ItemRegistry.SHADOW_STAFF, "Staff of the Shadow Walker");
		this.addDisc(ItemRegistry.RECORD_ANCIENT, "Temple Disc", "Voog2 - Ancient");
		this.addDisc(ItemRegistry.RECORD_ASTATOS, "Legendary Disc", "Voog2 - Astatos");
		this.addDisc(ItemRegistry.RECORD_BENEATH_A_GREEN_SKY, "Music Disc", "Voog2 - Beneath A Green Sky");
		this.addDisc(ItemRegistry.RECORD_BETWEEN_YOU_AND_ME, "Tribeman's Disc", "Voog2 - Between You And Me");
		this.addDisc(ItemRegistry.RECORD_CHRISTMAS_ON_THE_MARSH, "Frosty Disc", "Voog2 - Christmas On The Marsh");
		this.addDisc(ItemRegistry.RECORD_DEEP_WATER_THEME, "Deep Water", "Rotch Gwylt - Deep Water");
		this.addDisc(ItemRegistry.RECORD_DJ_WIGHTS_MIXTAPE, "DJ Wight's Hot New Mixtape", "Voog2 - Rave In A Cave");
		this.addDisc(ItemRegistry.RECORD_HAG_DANCE, "Music Disc", "Voog2 - Hag Dance");
		this.addDisc(ItemRegistry.RECORD_LONELY_FIRE, "Music Disc", "Voog2 - Lonely Fire");
		this.addDisc(ItemRegistry.RECORD_ONWARDS, "Music Disc", "Voog2 - Onwards");
		this.addDisc(ItemRegistry.RECORD_STUCK_IN_THE_MUD, "Music Disc", "Voog2 - Stuck In The Mud");
		this.addDisc(ItemRegistry.RECORD_THE_EXPLORER, "Explorer's Disc", "Voog2 - The Explorer");
		this.addDisc(ItemRegistry.RECORD_WANDERING_WISPS, "Music Disc", "Voog2 - Wandering Wisps");
		this.addDisc(ItemRegistry.RECORD_WATERLOGGED, "Music Disc", "Voog2 - Waterlogged");
		this.addDisc(ItemRegistry.MYSTERIOUS_RECORD, "Mysterious Disc", "...");
		//amulets
		//amulet slot
		this.addItemWithDesc(ItemRegistry.RING_OF_POWER, "Ring of Power", "Grants a bonus to attack damage and movement speed at the cost of XP");
		this.addItemWithDesc(ItemRegistry.RING_OF_ASCENT, "Ring of Ascent", "Grants the gift of levitation at the cost of XP");
		this.addItemWithDesc(ItemRegistry.RING_OF_RECRUITMENT, "Ring of Recruitment", "Grants the power to recruit and control entities at the cost of XP");
		this.addItemWithDesc(ItemRegistry.RING_OF_SUMMONING, "Ring of Summoning", "Grants the ability to summon allies from the depths at the cost of XP");
		this.addItemWithDesc(ItemRegistry.RING_OF_DISPERSION, "Ring of Dispersion", "Grants the ability to move through walls at the cost of XP");
		this.addItemWithDesc(ItemRegistry.RING_OF_GATHERING, "Ring of Gathering", "Grants the ability to summon Betweenlands minions or pets lost while wearing this ring at the cost of XP. \nDead minions or pets need to be revived by animating the ring in an Animator.");
		this.addItem(ItemRegistry.THEM_SCRAP, "Lurking Shadows");
		this.addItem(ItemRegistry.MUTANTS_SCRAP, "Mutants of Terror");
		this.addItem(ItemRegistry.SHADOWS_SCRAP, "Note from a Fallen Shadow");
		this.addItem(ItemRegistry.RUINS_SCRAP, "Explorer's Entries: Marsh Ruins");
		this.addItem(ItemRegistry.HEADS_SCRAP, "Explorer's Entries: Idol Heads");
		this.addItem(ItemRegistry.TAR_SCRAP, "Explorer's Entries: Pools of Tar");
		this.addItem(ItemRegistry.DUNGEON_SCRAP, "Explorer's Entries: Dungeon Shrine");
		this.addItem(ItemRegistry.PITSTONE_SCRAP, "Explorer's Entries: Underground Ruins");
		this.addItem(ItemRegistry.TOWER_SCRAP, "Explorer's Entries: The Tower");
		this.addItem(ItemRegistry.FORT_SCRAP, "Explorer's Entries: The Fortress");
		this.addItem(ItemRegistry.MUMMY_BAIT, "Mummy Bait");
		this.addItem(ItemRegistry.BARK_AMULET, "Bark Amulet");
		this.addItem(ItemRegistry.AMATE_MAP, "Empty Amate Map");
		this.add("item.thebetweenlands.amate_map.invalid", "Can't create an Amate Map outside of The Betweenlands");
		this.addItem(ItemRegistry.FILLED_AMATE_MAP, "Amate Map");
		this.addItemWithDesc(ItemRegistry.BONE_WAYFINDER, "Bone Wayfinder", "Must be linked to a Menhir");
		this.addItem(ItemRegistry.MAGIC_ITEM_MAGNET, "Magic Item Magnet");
		this.addItem(ItemRegistry.GEM_SINGER, "Gem Singer");
		this.addItem(ItemRegistry.SNOT_POD, "Rocksnot Pod");
		this.addItem(ItemRegistry.GLUE, "Glue");
		this.addItem(ItemRegistry.TEST_CHIMP, "Test Chimp");
		this.addItem(ItemRegistry.TEST_FLAG, "Flag");

		this.addAspectItem(ItemRegistry.GROUND_LEAF, "Ground Leaf", "Leaves are dropped by the small leafy Swamp Plants that grow in Swamplands biomes, as well as from the Fallen Leaves that gather under trees there.");
		this.addAspectItem(ItemRegistry.GROUND_CATTAIL, "Ground Cattail", "Cattails are very common plants that grow in Swamplands, Patchy Islands, and Coarse Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_SWAMP_GRASS, "Ground Swamp Grass", "Swamp Grass is a common plant found in Swamplands, Patchy Islands, Coarse Islands, and Marsh biomes, and in Underground Oases.");
		this.addAspectItem(ItemRegistry.GROUND_SHOOTS, "Ground Shoots", "Shoots are small young plants found growing in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_ARROW_ARUM, "Ground Arrow Arum", "Arrow Arum is a leafy plant that grows in the wet Marsh biomes of The Betweenlands.");
		this.addAspectItem(ItemRegistry.GROUND_BUTTON_BUSH, "Ground Button Bush", "Button Bushes are small plants that grow in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_MARSH_HIBUSCUS, "Ground Marsh Hibiscus", "The Marsh Hibiscus is a pretty looking flower that grows in the Marsh biome.");
		this.addAspectItem(ItemRegistry.GROUND_PICKERELWEED, "Ground Pickerelweed", "Pickerelweed is a flower that can be found in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_SOFT_RUSH, "Ground Soft Rush", "Soft Rush is a small plant that grows in the Marsh biome.");
		this.addAspectItem(ItemRegistry.GROUND_MARSH_MALLOW, "Ground Marsh Mallow", "Marsh Mallows are small pink and white flowers that can be found in Marsh biomes. Quite contrary to their name, they don't taste particularly nice.");
		this.addAspectItem(ItemRegistry.GROUND_MILKWEED, "Ground Milkweed", "Milkweed is a bright pink flower that grows in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_BLUE_IRIS, "Ground Blue Iris", "Blue Iris is one of the two iris plants found growing in the Coarse Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_COPPER_IRIS, "Ground Copper Iris", "Copper Iris is one of the two iris plants found growing in the Coarse Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_BLUE_EYED_GRASS, "Ground Blue Eyed Grass", "Blue Eyed Grass is a plant with tiny blue flowers that can be found in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_BONESET, "Ground Boneset", "Boneset is a flower that grows in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_BOTTLE_BRUSH_GRASS, "Ground Bottle Brush Grass", "Bottlebrush Grass is a small plant that grows in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_WEEDWOOD_BARK, "Ground Weedwood Bark", "<scale:0.9>Weedwood Bark grows around the soft wood inside Weedwood Trees. It can also be derived from the Hollow Logs found scattered about Swamplands, Marsh, and Sludge Plains biomes.</scale>");
		this.addAspectItem(ItemRegistry.GROUND_DRIED_SWAMP_REED, "Ground Dried Swamp Reed", "Swamp Reeds grow in the water in Patchy Islands and Coarse Islands biomes, and on land in Swamplands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_ALGAE, "Ground Algae", "Large patches of Algae can be found quite commonly in any biome on the surface of the water.");
		this.addAspectItem(ItemRegistry.GROUND_ANGLER_TOOTH, "Ground Angler Tooth", "Angler Teeth are dropped by Anglers, which can be found lurking in the murky waters of The Betweenlands.");
		this.addAspectItem(ItemRegistry.GROUND_BLACKHAT_MUSHROOM, "Ground Blackhat Mushroom", "Blackhat Mushrooms can be found scattered about everywhere in Swamplands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_CRIMSON_SNAIL_SHELL, "Ground Crimson Snail Shell", "Crimson Snail Shells are dropped by Blood Snails, which are found in Swamplands and Patchy Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_BOG_BEAN, "Ground Bog Bean", "Found in the Patchy Islands biome, Bog Bean grows on Mud in shallow water.");
		this.addAspectItem(ItemRegistry.GROUND_BROOMSEDGE, "Ground Broomsedge", "Broomsedges are tall plants that can be found in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_BULB_CAPPED_MUSHROOM, "Ground Bulb-Capped Mushroom", "<scale:0.8>Bulb-Capped Mushrooms are luminous bright blue mushrooms that can be found growing around Giant Bulb-Capped Mushrooms in Patchy Islands biomes, and in Underground Oases. They have been known to cause minor trips.</scale>");
		this.addAspectItem(ItemRegistry.GROUND_CARDINAL_FLOWER, "Ground Cardinal Flower", "Cardinal Flowers are tall bright red plants that grow in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_CAVE_GRASS, "Ground Cave Grass", "Cave Grass grows deep underground in the Pitstone layer, away from the light.");
		this.addAspectItem(ItemRegistry.GROUND_CAVE_MOSS, "Ground Cave Moss", "Cave Moss can be found growing down underground in caves.");
		this.addAspectItem(ItemRegistry.GROUND_CRIMSON_MIDDLE_GEM, "Ground Crimson Middle Gem", "Crimson Middle Gems are one of three Middle Gem types that can be found stuck in Mud.");
		this.addAspectItem(ItemRegistry.GROUND_DEEP_WATER_CORAL, "Ground Deep Water Coral", "Deep Water Coral is a blue luminous aquatic plant that grows in Mud in Deep Waters biomes.");
		this.addAspectItem(ItemRegistry.GROUND_FLATHEAD_MUSHROOM, "Ground Flathead Mushroom", "Flathead Mushrooms grow very commonly in the Swamplands biome.");
		this.addAspectItem(ItemRegistry.GROUND_GOLDEN_CLUB, "Ground Golden Club", "Golden Clubs are strange orange flowers that grow in water in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_GREEN_MIDDLE_GEM, "Ground Green Middle Gem", "Green Middle Gems are one of three Middle Gem types that can be found stuck in Mud.");
		this.addAspectItem(ItemRegistry.GROUND_HANGER, "Ground Hanger", "Hangers are vine-like plants that grow off of Giant Weedwood and Hearthgrove Trees, Giant Roots, and down from caves.");
		this.addAspectItem(ItemRegistry.GROUND_LICHEN, "Ground Lichen", "<scale:0.9>Lichen is a plant can be found growing on Cragrock Spires in the Deep Waters biome, and also sometimes underground or on stone based structures.</scale>");
		this.addAspectItem(ItemRegistry.GROUND_MARSH_MARIGOLD, "Ground Marsh Marigold", "Marsh Marigolds are yellow flowers that grow in water in the Patchy Islands biome.");
		this.addAspectItem(ItemRegistry.GROUND_MIRE_CORAL, "Ground Mire Coral", "Mire Coral is an orange luminous aquatic plant that grows in Mud in Deep Waters, Patchy Islands, and Coarse Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_OCHRE_SNAIL_SHELL, "Ground Ochre Snail Shell", "Ochre Snail Shells are dropped by Mire Snails, which are found in Swamplands and Patchy Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_MOSS, "Ground Moss", "Moss is a plant that grows and spreads around almost anywhere.");
		this.addAspectItem(ItemRegistry.GROUND_NETTLE, "Ground Nettle", "Nettles can be found in Coarse Islands, Marsh and Swamplands biomes. They will sting you if you touch them, so be careful.");
		this.addAspectItem(ItemRegistry.GROUND_PHRAGMITES, "Ground Phragmites", "Phragmites are tall plants that grow everywhere in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_SLUDGECREEP, "Ground Sludgecreep", "Sludgecreep is a slime-feeding plant found in the Sludge Plains biome, including in the Sludgeon vaults.");
		this.addAspectItem(ItemRegistry.GROUND_SUNDEW, "Ground Sundew", "Sundews are large plants that grow in Marsh biomes.");
		this.addAspectItem(ItemRegistry.GROUND_SWAMP_KELP, "Ground Swamp Kelp", "Swamp Kelp is an aquatic plant that grows commonly in Deep Waters and Coarse Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_ROOTS, "Ground Roots", "<scale:0.8>Roots grow in Coarse Islands and Sludge Plains biomes, in both regular and Giant forms. They can also be derived from Pyrads, nature spirits found around Giant Weedwood Trees.</scale>");
		this.addAspectItem(ItemRegistry.GROUND_AQUA_MIDDLE_GEM, "Ground Aqua Middle Gem", "Aqua Middle Gems are one of three Middle Gem types that can be found stuck in Mud.");
		this.addAspectItem(ItemRegistry.GROUND_PITCHER_PLANT, "Ground Pitcher Plant", "Pitchers are large plants that grow in Swamplands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_WATER_WEEDS, "Ground Water Weeds", "Water Weeds can be found growing in Mud at the bottom of the water in Deep Waters biomes.");
		this.addAspectItem(ItemRegistry.GROUND_VENUS_FLY_TRAP, "Ground Venus Fly Trap", "Venus Fly Traps are small plants that grow in Swamplands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_VOLARPAD, "Ground Volarpad", "Volarpads are very large plants that grow commonly in Coarse Islands biomes and sometimes in Swamplands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_THORNS, "Ground Thorns", "Thorns are dangerous hanging plants that grow deep down underground in caves.");
		this.addAspectItem(ItemRegistry.GROUND_POISON_IVY, "Ground Poison Ivy", "Poison Ivy is a poisonous hanging plant that grows commonly on small Weedwood and Nibbletwig Trees.");
		this.addAspectItem(ItemRegistry.GROUND_BLADDERWORT_FLOWER, "Ground Bladderwort Flower", "Bladderworts are tall underwater plants that grow in Deep Waters biomes and more rarely in Coarse Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_BLADDERWORT_STALK, "Ground Bladderwort Stalk", "The stalk of the Bladderwort plant that grows in Deep Waters and Coarse Islands biomes.");
		this.addAspectItem(ItemRegistry.GROUND_EDGE_SHROOM, "Ground Edge Shroom", "Edge Shrooms are fungi that grow on edges in the Sludgeon vaults. They contain strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_EDGE_MOSS, "Ground Edge Moss", "Edge Moss is a plant that grows on edges in the Sludgeon vaults. It contains strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_EDGE_LEAF, "Ground Edge Leaf", "Edge Leaves are small plants that grow on edges in the Sludgeon vaults. They contain strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_ROTBULB, "Ground Rotbulb", "Rotbulbs are disgusting growths found in the Sludgeon vaults. They contain strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_PALE_GRASS, "Ground Pale Grass", "Pale Grass is a transparent, ghostly grass found in the Sludgeon vaults. It contains strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_STRING_ROOTS, "Ground String Roots", "String Roots hang from the ceiling of the Sludgeon vaults. They contain strange properties.");
		this.addAspectItem(ItemRegistry.GROUND_CRYPTWEED, "Ground Cryptweed", "Cryptweed is a mysterious hanging plant that grows in the Sludgeon vaults. It contains strange properties.");
		this.add("manual.thebetweenlands.herblore.thebetweenlands.sap_spit.desc", "Sap Spit is a tacky secretion produced by Spirit Trees. It seems to have regenerative properties.");
		this.addItem(ItemRegistry.GROUND_BETWEENSTONE_PEBBLE, "Ground Betweenstone Pebble");
		this.addItem(ItemRegistry.LEAF, "Leaf");
		this.addItem(ItemRegistry.ALGAE_CLUMP, "Algae Clump");
		this.addItem(ItemRegistry.ARROW_ARUM_LEAF, "Arrow Arum Leaf");
		this.addItem(ItemRegistry.BLUE_EYED_GRASS_FLOWERS, "Blue Eyed Grass Flowers");
		this.addItem(ItemRegistry.BLUE_IRIS_PETAL, "Blue Iris Petals");
		this.addItem(ItemRegistry.MIRE_CORAL_STALK, "Mire Coral Stalk");
		this.addItem(ItemRegistry.DEEP_WATER_CORAL_STALK, "Deep Water Coral Stalk");
		this.addItem(ItemRegistry.BOG_BEAN_FLOWER_DROP, "Bog Bean Flower");
		this.addItem(ItemRegistry.BONESET_FLOWERS, "Boneset Flowers");
		this.addItem(ItemRegistry.BOTTLE_BRUSH_GRASS_BLADES, "Bottle Brush Grass Blades");
		this.addItem(ItemRegistry.BROOMSEDGE_LEAVES, "Broomsedge Leaves");
		this.addItem(ItemRegistry.BUTTON_BUSH_FLOWERS, "Button Bush Flowers");
		this.addItem(ItemRegistry.CARDINAL_FLOWER_PETALS, "Cardinal Flower Petals");
		this.addItem(ItemRegistry.CATTAIL_HEAD, "Cattail Head");
		this.addItem(ItemRegistry.CAVE_GRASS_BLADES, "Cave Grass Blades");
		this.addItem(ItemRegistry.COPPER_IRIS_PETALS, "Copper Iris Blades");
		this.addItem(ItemRegistry.GOLDEN_CLUB_FLOWERS, "Golden Club Flowers");
		this.addItem(ItemRegistry.LICHEN_CLUMP, "Lichen Clump");
		this.addItem(ItemRegistry.MARSH_HIBISCUS_FLOWER, "Marsh Hibiscus Flower");
		this.addItem(ItemRegistry.MARSH_MALLOW_FLOWER, "Marsh Mallow Flower");
		this.addItem(ItemRegistry.MARSH_MARIGOLD_FLOWER_DROP, "Marsh Marigold Flower");
		this.addItem(ItemRegistry.NETTLE_LEAF, "Nettle Leaf");
		this.addItem(ItemRegistry.PHRAGMITE_STEMS, "Phragmite Stems");
		this.addItem(ItemRegistry.PICKERELWEED_FLOWER, "Pickerelweed Flower");
		this.addItem(ItemRegistry.SHOOT_LEAVES, "Shoot Leaves");
		this.addItem(ItemRegistry.SLUDGECREEP_LEAVES, "Sludgecreep Leaves");
		this.addItem(ItemRegistry.SOFT_RUSH_LEAVES, "Soft Rush Leaves");
		this.addItem(ItemRegistry.SUNDEW_HEAD, "Sundew Head");
		this.addItem(ItemRegistry.SWAMP_GRASS_BLADES, "Swamp Grass Blades");
		this.addItem(ItemRegistry.CAVE_MOSS_CLUMP, "Cave Moss Clump");
		this.addItem(ItemRegistry.MOSS_CLUMP, "Moss Clump");
		this.addItem(ItemRegistry.MILKWEED_FLOWER, "Milkweed Flower");
		this.addItem(ItemRegistry.HANGER_DROP, "Hanger");
		this.addItem(ItemRegistry.PITCHER_PLANT_TRAP, "Pitcher Plant Trap");
		this.addItem(ItemRegistry.WATER_WEEDS_DROP, "Water Weeds");
		this.addItem(ItemRegistry.VENUS_FLY_TRAP_HEAD, "Venus Fly Trap Head");
		this.addItem(ItemRegistry.VOLARPAD_LEAF, "Volarpad Leaf");
		this.addItem(ItemRegistry.THORN_BRANCH, "Thorn Branch");
		this.addItem(ItemRegistry.POISON_IVY_LEAF, "Poison Ivy Leaf");
		this.addItem(ItemRegistry.BLADDERWORT_STALK_DROP, "Bladderwort Stalk");
		this.addItem(ItemRegistry.BLADDERWORT_FLOWER_DROP, "Bladderwort Flower");
		this.addItem(ItemRegistry.EDGE_SHROOM_GILLS, "Edge Shroom Gills");
		this.addItem(ItemRegistry.EDGE_MOSS_CLUMP, "Edge Moss Clump");
		this.addItem(ItemRegistry.EDGE_LEAF_DROP, "Edge Leaf");
		this.addItem(ItemRegistry.ROTBULB_STALK, "Rotbulb Stalk");
		this.addItem(ItemRegistry.PALE_GRASS_BLADES, "Pale Grass Blades");
		this.addItem(ItemRegistry.STRING_ROOT_FIBERS, "String Root Fibers");
		this.addItem(ItemRegistry.CRYPTWEED_BLADES, "Cryptweed Blades");

		this.addItem(ItemRegistry.ASPECTRUS_FRUIT, "Aspectrus Fruit");
		this.add(ItemRegistry.ASPECTRUS_FRUIT.get().getDescriptionId() + ".aspect", "Aspectrus Fruit - %s");

		this.addItem(ItemRegistry.GREEN_DENTROTHYST_VIAL, "Green Dentrothyst Vial");
		this.addItem(ItemRegistry.DIRTY_DENTROTHYST_VIAL, "Dirty Dentrothyst Vial");
		this.addItem(ItemRegistry.ORANGE_DENTROTHYST_VIAL, "Orange Dentrothyst Vial");

		this.addItem(ItemRegistry.GREEN_ASPECT_VIAL, "Green Aspect Vial");
		this.addItem(ItemRegistry.ORANGE_ASPECT_VIAL, "Orange Aspect Vial");
		this.add("item.thebetweenlands.aspect_vial.aspect", "%s (%d)");
		this.add("item.thebetweenlands.aspect_vial.byariis", "Can be used as fuel for the Repeller");
		this.add("item.thebetweenlands.aspect_vial.freiwynn", "Can be used to turn item frames invisible");

		this.addItem(ItemRegistry.GREEN_ELIXIR, "Green Elixir Vial");
		this.addItem(ItemRegistry.ORANGE_ELIXIR, "Orange Elixir Vial");
		this.add("item.thebetweenlands.elixir.potency", "Potency: %s");
		this.add("item.thebetweenlands.elixir.duration", "Duration: %s (%s)");
		this.addElixir(ElixirEffectRegistry.EFFECT_STRENGTH, "Elixir of Strength", "Increases raw physical strength, causing one to deal more damage when they attack.", "<scale:0.8>The Elixir of Strength increases raw physical strength, causing one to deal more damage when they attack. <nl>A combination of Azuwynn and Ordaniis aspects is required to make this elixir. <nl>The more Azuwynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Elixir of Weakness, which reduces one's damage output.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_NIMBLEFEET, "Nimblefeet Elixir", "Enhances muscle swiftness and nimbleness, increasing one's movement speed.", "<scale:0.85>The Nimblefeet Elixir enhances muscle swiftness and nimbleness, increasing one's movement speed. <nl>A combination of Azuwynn, Ordaniis, and Yunugaz aspects is required to make this elixir. <nl>The more Yunugaz is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Lumbering Elixir, which slows one's movement.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_HEALING, "Elixir of Healing", "Accelerates natural regeneration, healing one's wounds over time.", "<scale:0.85>The Elixir of Healing accelerates natural regeneration, healing one's wounds over time. <nl>A combination of Yeowynn and Ordaniis aspects is required to make this elixir. <nl>The more Yeowynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Elixir of Draining, which drains one's health over time.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_RIPENING, "Elixir of Ripening", "Reverses the effects of the decaying aura of the Betweenlands, restoring one's physical and psychological health over time.", "<scale:0.75>The Elixir of Ripening reverses the effects of the decaying aura of the Betweenlands, restoring one's physical and psychological health over time. <nl>A combination of Yeowynn, Ordaniis, and Dayuniis aspects is required to make this elixir. <nl>The more Dayuniis is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Elixir of Decay, which accelerates one's vulnerability to the decaying aura’s effects.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_TOUGHSKIN, "Toughskin Elixir", "Increases skin toughness, protecting one from harmful plants found throughout the Betweenlands.", "<scale:0.8>The Toughskin Elixir increases skin toughness, protecting one from harmful plants found throughout the Betweenlands. <nl>A combination of Azuwynn, Yeowynn, and Celawynn aspects is required to make this elixir. <nl>The more Yeowynn is used, the stronger are the elixir’s effects. The more Celawynn is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Poisonsting Elixir, which poisons one instantly.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_FEASTING, "Elixir of Feasting", "Gives the stomach something tough to feed on, satisfying one's hunger over time.", "<scale:0.8>The Elixir of Feasting gives the stomach something tough to feed on, satisfying one's hunger over time. <nl>A combination of Yeowynn, Ordaniis, and Celawynn aspects is required to make this elixir. <nl>The more Celawynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Adding Byariis will corrupt the nature of the elixir, turning it into the Elixir of Starvation, which causes one to go hungry more quickly.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_HUNTERSSENSE, "Hunter's Sense Brew", "Enhances the senses, allowing one to see and smell the scent trails of creatures in order to track them down.", "<scale:0.8>The Hunter’s Sense Brew enhances the senses, allowing one to see and smell the scent trails of creatures in order to track them down. <nl>A combination of Freiwynn, Dayuniis, Ordaniis, and Firnalaz aspects is required to make this brew. <nl>The more Freiwynn is used, the stronger are the brew’s effects. The more Dayuniis is used, the longer the brew lasts. <nl>Adding Byariis will corrupt the nature of the brew, turning it into the Drunkard’s Brew, which causes one to experience heavy nausea.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_MASKING, "Masking Brew", "Masks natural odors like a perfume, making it harder for one to be detected by predators.", "<scale:0.8>The Masking Brew masks natural odors like a perfume, making it harder for one to be detected by predators. <nl>A combination of Dayuniis, Armaniis, and Byariis aspects is required to make this brew. <nl>The more Armaniis is used, the stronger are the brew’s effects. The more Dayuniis is used, the longer the brew lasts. <nl>Leaving out Byariis will reveal the true nature of the brew, turning it into the Stenching Brew, which makes it easier for one to be detected by predators.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_SWIFTARM, "Swiftarm Brew", "Enables arm muscles to work to their fullest, increasing one's arm swinging speed and thus allowing them to mine faster, pull back bows more rapidly, and strike foes more easily.", "<scale:0.75>The Swiftarm Brew enables arm muscles to work to their fullest, increasing one's arm swinging speed and thus allowing them to mine faster, pull back bows more rapidly, and strike foes more easily. <nl>A combination of Azuwynn, Dayuniis, Yunugaz, and Ordaniis aspects is required to make this brew. <nl>The more Azuwynn is used, the stronger are the brew’s effects. The more Ordaniis is used, the longer the brew lasts. <nl>Adding Byariis will corrupt the nature of the brew, turning it into the Slugarm Brew, which decreases one's arm swinging speed.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_CATSEYES, "Brew of the Cat's Eye", "Makes the eyes extremely sensitive to light, allowing one to see very well in the dark.", "<scale:0.8>The Brew of the Cat's Eye makes the eyes extremely sensitive to light, allowing one to see very well in the dark. <nl>A combination of Freiwynn, Dayuniis, Ordaniis, and Geoliirgaz aspects is required to make this brew. <nl>The more Freiwynn is used, the stronger are the brew's effects. The more Dayuniis is used, the longer the brew lasts. <nl>Adding Byariis will corrupt the nature of the brew, turning it into the Blindman's Brew, which causes one to be blinded.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_SAGITTARIUS, "Draught of Sagittarius", "Contains the power of Sagittarius, allowing one to see exactly what path their arrow will take when fired from a bow.", "<scale:0.75>The Draught of Sagittarius contains the power of Sagittarius, allowing one to see exactly what path their arrow will take when fired from a bow. <nl>A combination of Freiwynn, Dayuniis, Byariis, Ordaniis, and Armaniis aspects is required to make this draught. <nl>The more Freiwynn is used, the stronger are the draught's effects. The more Dayuniis is used, the longer the draught lasts. <nl>Leaving out Byariis will reveal the true nature of the draught, turning it into the Weakbow Draught, which reduces one's bow shooting range.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_SPIDERBREED, "Spiderbreed Draught", "Changes the workings of the skin and muscle, allowing one to climb up and down any obstacle as if they were an insect.", "<scale:0.75>The Spiderbreed Draught changes the workings of the skin and muscle, allowing one to climb up and down any obstacle as if they were an insect. <nl>A combination of Azuwynn, Fergalaz, Dayuniis, Yihinren, and Yunugaz aspects is required to make this draught. <nl>The more Azuwynn is used, the stronger are the draught’s effects. The more Yihinren is used, the longer the draught lasts. <nl>Adding Byariis will corrupt the nature of the draught, turning it into the Basilisk Draught, which causes one to experience paralysis.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_LIGHTWEIGHT, "Lightweight Draught", "Causes a strange sensation of weightlessness, allowing one to walk slowly over water as if it were solid ground.", "<scale:0.75>The Lightweight Draught causes a strange sensation of weightlessness, allowing one to walk slowly over water as if it were solid ground. <nl>A combination of Azuwynn, Byrginaz, Yunugaz, Yihinren, and Geoliirgaz aspects is required to make this draught. <nl>The more Yunugaz is used, the stronger are the draught’s effects. The more Yihinren is used, the longer the draught lasts. <nl>Adding Byariis will corrupt the nature of the draught, turning it into the Heavyweight Draught, which hinders one's swimming ability and causes them to sink in Mud no matter what they are wearing to counteract it.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_UNCLOUDED, "Draught of the Unclouded", "Clears a foggy mind, allowing one to see through dense fog as if it evaporated in front of their eyes.", "<scale:0.75>The Draught of the Unclouded clears a foggy mind, allowing one to see through dense fog as if it evaporated in front of their eyes. <nl>A combination of Dayuniis, Freiwynn, Geoliirgaz, Ordaniis, and Yunugaz aspects is required to make this draught. <nl>The more Geoliirgaz is used, the stronger are the draught's effects. The more Dayuniis is used, the longer the draught lasts. <nl>Adding Byariis will corrupt the nature of the draught, turning it into the Draught of the Fogged Mind, which causes one to hallucinate a very dense fog around them.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_GILLSGROWTH, "Shapeshifter's draught of Gillsgrowth");
		this.addElixir(ElixirEffectRegistry.EFFECT_WINGS, "Shapeshifter's draught of Wings");
		this.addElixir(ElixirEffectRegistry.EFFECT_HUNTERSSENSEMASTER, "Hunter's Sense Masterbrew");
		this.addElixir(ElixirEffectRegistry.EFFECT_WEAKNESS, "Elixir of Weakness", "Weakens the muscles, reducing one's damage output when they attack.", "<scale:0.8>The Elixir of Weakness weakens the muscles, reducing one's damage output when they attack. <nl>A combination of Azuwynn, Ordaniis, and Byariis aspects is required to make this elixir. <nl>The more Azuwynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Elixir of Strength, which increases one's damage output.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_LUMBERING, "Lumbering Elixir", "Makes the muscles lethargic, reducing one's movement speed.", "<scale:0.85>The Lumbering Elixir makes the muscles lethargic, reducing one's movement speed. <nl>A combination of Azuwynn, Ordaniis, Yunugaz, and Byariis aspects is required to make this elixir. <nl>The more Yunugaz is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Nimblefeet Elixir, which speeds one's movement.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_DRAINING, "Elixir of Draining", "Drains one's health over time.", "<scale:0.85>The Elixir of Draining eats away at the body, draining one's health over time. <nl>A combination of Yeowynn, Ordaniis, and Byariis aspects is required to make this elixir. <nl>The more Yeowynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Elixir of Healing, which restores one's health over time.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_DECAY, "Elixir of Decay", "Increases vulnerability to the decaying aura of the Betweenlands, causing one to experience a quicker decline in physical and psychological health.", "<scale:0.75>The Elixir of Decay increases vulnerability to the decaying aura of the Betweenlands, causing one to experience a quicker decline in physical and psychological health. <nl>A combination of Yeowynn, Ordaniis, Dayuniis, and Byariis aspects is required to make this elixir. <nl>The more Dayuniis is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Elixir of Ripening, which reverses one's responses to the decaying aura.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_POISONSTING, "Poisonsting Elixir", "Contains the wrath of the sinister plants found in the Betweenlands, poisoning one instantly.", "<scale:0.8>The Poisonsting Elixir contains the wrath of the sinister plants found in the Betweenlands, poisoning one instantly. <nl>A combination of Azuwynn, Yeowynn, Celawynn, and Byariis aspects is required to make this elixir. <nl>The more Yeowynn is used, the stronger are the elixir’s effects. The more Celawynn is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Toughskin Elixir, which protects one from harmful plants.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_STARVATION, "Elixir of Starvation", "Makes the stomach digest food faster and less efficiently, causing one to go hungry more quickly.", "<scale:0.8>The Elixir of Starvation makes the stomach digest food faster and less efficiently, causing one to go hungry more quickly. <nl>A combination of Yeowynn, Ordaniis, Celawynn, and Byariis aspects is required to make this elixir. <nl>The more Celawynn is used, the stronger are the elixir’s effects. The more Ordaniis is used, the longer the elixir lasts. <nl>Leaving out Byariis will reveal the true nature of the elixir, turning it into the Elixir of Feasting, which fills one's stomach.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_DRUNKARD, "Drunkard's Brew", "Causes one to experience a heavy bout of nausea.", "<scale:0.75>The Drunkard’s Brew is highly intoxicating, causing one to experience a heavy bout of nausea. <nl>A combination of Freiwynn, Dayuniis, Ordaniis, Firnalaz, and Byariis aspects is required to make this brew. <nl>The more Freiwynn is used, the stronger are the brew’s effects. The more Dayuniis is used, the longer the brew lasts. <nl>Leaving out Byariis will reveal the true nature of the brew, turning it into the Hunter’s Sense Brew, which allows one to detect the scent trails of creatures.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_STENCHING, "Stenching Brew", "Causes the emission of a very potent odor that is desired by monsters, making it easier for one to be detected by predators.", "<scale:0.8>The Stenching Brew has a very potent odor that is desired by monsters, making it easier for one to be detected by predators. <nl>A combination of Dayuniis and Armaniis aspects is required to make this brew. <nl>The more Armaniis is used, the stronger are the brew’s effects. The more Dayuniis is used, the longer the brew lasts. <nl>Adding Byariis will corrupt the nature of the brew, turning it into the Masking Brew, which makes it harder for one to be detected by predators.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_SLUGARM, "Slugarm Brew", "Makes the arms feel numb, decreasing one's arm swinging speed and thus causing them to mine slower and strike foes less easily.", "<scale:0.75>The Slugarm Brew makes the arms feel numb, decreasing one's arm swinging speed and thus causing them to mine slower and strike foes less easily. <nl>A combination of Azuwynn, Dayuniis, Yunugaz, Ordaniis, and Byariis aspects is required to make this brew. <nl>The more Azuwynn is used, the stronger are the brew’s effects. The more Ordaniis is used, the longer the brew lasts. <nl>Leaving out Byariis will reveal the true nature of the brew, turning it into the Swiftarm Brew, which increases one's arm swinging speed.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_BLINDMAN, "Blindman's Brew", "Severely limits the function of the eye, causing one to only be able to see a small distance in front of them and be unable to sprint.", "<scale:0.75>The Blindman’s Brew severely limits the functions of the eye, causing one to only be able to see a small distance in front of them and be unable to sprint. <nl>A combination of Freiwynn, Dayuniis, Ordaniis, Geoliirgaz, and Byariis aspects is required to make this brew. <nl>The more Freiwynn is used, the stronger are the brew's effects. The more Dayuniis is used, the longer the brew lasts. <nl>Leaving out Byariis will reveal the true nature of the brew, turning it into the Brew of the Cat’s Eye, which allows one to see better in the dark.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_WEAKBOW, "Weakbow Draught", "Reduces archery skill, greatly limiting one's bow shooting range.", "<scale:0.8>The Weakbow Draught reduces archery skill, greatly limiting one's bow shooting range. <nl>A combination of Freiwynn, Dayuniis, Ordaniis, and Armaniis aspects is required to make this draught. <nl>The more Freiwynn is used, the stronger are the draught's effects. The more Dayuniis is used, the longer the draught lasts. <nl>Adding Byariis will corrupt the nature of the draught, turning it into the Draught of Sagittarius, which allows one to see the path of an arrow fired from a bow.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_BASILISK, "Basilisk Draught", "Petrifies the motor cortex of the brain, causing one to be frozen in place.", "<scale:0.75>The Basilisk Draught petrifies the motor cortex of the brain, causing one to be frozen in place. <nl>A combination of Azuwynn, Fergalaz, Dayuniis, Yihinren, Yunugaz, and Byariis aspects is required to make this draught. <nl>The more Azuwynn is used, the stronger are the draught’s effects. The more Yihinren is used, the longer the draught lasts. <nl>Leaving out Byariis will reveal the true nature of the draught, turning it into the Spiderbreed Draught, which allows one to climb on obstacles.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_HEAVYWEIGHT, "Heavyweight Draught", "Gives a strange sense of heaviness, causing one to find swimming more difficult and causing them to sink in Mud despite whatever they may be wearing to protect them from it.", "<scale:0.75>The Heavyweight Draught gives a strange sense of heaviness, causing one to find swimming more difficult and causing them to sink in Mud despite whatever they may be wearing to protect them from it. <nl>A combination of Azuwynn, Byrginaz, Yunugaz, Yihinren, Geoliirgaz, and Byariis aspects is required to make this draught. <nl>The more Yunugaz is used, the stronger are the draught’s effects. The more Yihinren is used, the longer the draught lasts. <nl>Leaving out Byariis will reveal the true nature of the draught, turning it into the Lightweight Draught, which allows one to walk over water.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_FOGGEDMIND, "Draught of the Fogged Mind", "Clouds the mind with worrisome thoughts, causing one to see the illusion of a thick fog surrounding them.", "<scale:0.75>The Draught of the Fogged Mind clouds the mind with worrisome thoughts, causing one to see the illusion of a thick fog surrounding them. <nl>A combination of Dayuniis, Freiwynn, Geoliirgaz, Ordaniis, Yunugaz, and Byariis aspects is required to make this draught. <nl>The more Geoliirgaz is used, the stronger are the draught's effects. The more Dayuniis is used, the longer the draught lasts. <nl>Leaving out Byariis will reveal the true nature of the draught, turning it into the Draught of the Unclouded, which causes any fog to be cleared from one's vision.</scale>");
		this.addElixir(ElixirEffectRegistry.EFFECT_DEFORMED, "Shapeshifter's draught of the Deformed");
		this.addElixir(ElixirEffectRegistry.EFFECT_LIMBLESS, "Shapeshifter's draught of the Limbless");
		this.addElixir(ElixirEffectRegistry.EFFECT_ISOLATEDSENSES, "Masterbrew of Isolated Senses");

		this.addAspect(AspectTypeRegistry.ARMANIIS, "Desire", "The aspect that influences the desire of a being or a thought.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.AZUWYNN, "Muscle", "The aspect that has effect on the muscles.<nl>Tier I aspect.");
		this.addAspect(AspectTypeRegistry.BYARIIS, "Corruption", "The aspect that changes the nature of anything to its opposite.<nl>Tier I special aspect.");
		this.addAspect(AspectTypeRegistry.BYRGINAZ, "Water", "The aspect that correlates to the element of water.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.CELAWYNN, "Stomach", "The aspect that influences the digestive organs and immune system.<nl>Tier I aspect.");
		this.addAspect(AspectTypeRegistry.DAYUNIIS, "Mind", "The aspect that has effect on the mind and the border between reality and imagination.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.FERGALAZ, "Earth", "The aspect that correlates to the element of earth.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.FIRNALAZ, "Fire", "The aspect that correlates to the element of fire.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.FREIWYNN, "Vision", "The aspect that has effect on the perception of light.<nl>Tier II aspect.");
		this.addAspect(AspectTypeRegistry.GEOLIIRGAZ, "Void", "The aspect that correlates to the formless element of void or ether.<nl>Tier III aspect.");
		this.addAspect(AspectTypeRegistry.ORDANIIS, "Enhance", "The aspect that activates other aspects or enhances power in any form.<nl>Tier I aspect.");
		this.addAspect(AspectTypeRegistry.UDURIIS, "Chaos", "The aspect that correlates to the natural orderless state of the universe.<nl>Tier III aspect.");
		this.addAspect(AspectTypeRegistry.WODREN, "Soul", "The aspect that affects the spiritual state and life force of a being.<nl>Tier III aspect.");
		this.addAspect(AspectTypeRegistry.YEOWYNN, "Health", "The aspect that influences physical health and recovery.<nl>Tier I aspect.");
		this.addAspect(AspectTypeRegistry.YIHINREN, "Form", "The aspect that affects both physical and psychological form.<nl>Tier III aspect.");
		this.addAspect(AspectTypeRegistry.YUNUGAZ, "Wind", "The aspect that correlates to the element of wind.<nl>Tier II aspect.");

		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.NONE, "None");
		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.ASCENT_BOOST, "Ascent");
		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.ELECTRIC, "Electric");
		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.FISH_VORTEX, "Fish Vortex");
		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.GLIDE, "Glide");
		this.addAmphibiousUpgrade(AmphibiousArmorUpgradeRegistry.URCHIN_SPIKE, "Urchin Spikes");

		this.add("commands.thebetweenlands.aspect.empty_hand", "Must be holding an item");
		this.add("commands.thebetweenlands.aspect.no_book", "There's no Herblore Book to write to");
		this.add("commands.thebetweenlands.aspect.no_aspects_held", "Item has no more possible aspects to discover");
		this.add("commands.thebetweenlands.aspect.discover_held", "Result: %s Aspect: %d");
		this.add("commands.thebetweenlands.aspect.discover_all", "Discovered all aspects of all items");
		this.add("commands.thebetweenlands.aspect.reset_held", "Removed discovered aspects");
		this.add("commands.thebetweenlands.aspect.reset_all", "Removed discovered aspects from all items");

		this.add("commands.thebetweenlands.event.not_in_bl", "You must be in the Betweenlands to toggle events");
		this.add("commands.thebetweenlands.event.invalid_event", "Unknown event '%s'");
		this.add("commands.thebetweenlands.event.already_on", "The event '%s' is already on");
		this.add("commands.thebetweenlands.event.already_off", "The event '%s' is already off");
		this.add("commands.thebetweenlands.event.already_enabled", "Events are already enabled");
		this.add("commands.thebetweenlands.event.already_disabled", "Events are already disabled");
		this.add("commands.thebetweenlands.event.fail_on", "The event '%s' could not be turned on");
		this.add("commands.thebetweenlands.event.fail_off", "The event '%s' could not be turned off");

		this.add("commands.thebetweenlands.event.on", "The event '%s' is now taking place");
		this.add("commands.thebetweenlands.event.off", "The event '%s' is no longer taking place");
		this.add("commands.thebetweenlands.event.all_off", "All events are no longer taking place");
		this.add("commands.thebetweenlands.event.enable", "Events are enabled");
		this.add("commands.thebetweenlands.event.disable", "Events are disabled");

		this.add("commands.thebetweenlands.reset_aspects.confirm", "Confirm with '/resetAspects confirm'");
		this.add("commands.thebetweenlands.reset_aspects.reset", "All aspects have been reset");

		SUBTITLE_GENERATOR.forEach(this::add);
		this.add("subtitles.thebetweenlands.entity.greebling_music", "Greebling musician plays");

		this.add("manual.thebetweenlands.herblore.found_in", "This aspect is found in:");
		this.add("manual.thebetweenlands.herblore.used_in", "This aspect is used in:");
		this.add("manual.thebetweenlands.herblore.has_aspects", "This item has the following aspects:");
		this.add("manual.thebetweenlands.herblore.open_entry", "Open guide book entry");

		this.add("manual.thebetweenlands.herblore.aspect_info.title", "Aspect Info");
		this.add("manual.thebetweenlands.herblore.ingredient_info.title", "Ingredient Info");
	}

	private void addItemWithDesc(DeferredItem<Item> item, String name, String desc) {
		this.addItem(item, name);
		this.add(item.get().getDescriptionId() + ".desc", desc);
	}

	private void addBlockWithDesc(DeferredBlock<Block> block, String name, String desc) {
		this.addBlock(block, name);
		this.add(block.get().getDescriptionId() + ".desc", desc);
	}

	private void addDisc(DeferredItem<Item> disc, String name, String desc) {
		this.addItem(disc, name);
		this.add(Util.makeDescriptionId("jukebox_song", disc.get().components().get(DataComponents.JUKEBOX_PLAYABLE).song().key().location()), desc);
	}

	private void addAspect(ResourceKey<AspectType> aspect, String manualType, String desc) {
		String base = Util.makeDescriptionId("aspect", aspect.location());
		this.add(base, StringUtils.capitalize(aspect.location().getPath()));
		this.add(base + ".type", manualType);
		this.add("manual.thebetweenlands.herblore." + aspect.location().toString().replace(':', '.') + ".desc", desc);
	}

	private void addAspectItem(DeferredItem<Item> aspect, String name, String desc) {
		this.addItem(aspect, name);
		this.add("manual.thebetweenlands.herblore." + aspect.getKey().location().toString().replace(':', '.') + ".desc", desc);
	}

	private void addElixir(Holder<ElixirEffect> elixir, String name) {
		this.add("item.thebetweenlands.elixir." + elixir.getKey().location().getPath(), name);
		this.add("effect.thebetweenlands." + elixir.getKey().location().getPath(), name);
	}

	private void addElixir(Holder<ElixirEffect> elixir, String name, String desc, String manualEntry) {
		String base = "item.thebetweenlands.elixir." + elixir.getKey().location().getPath();
		this.add(base, name);
		this.add("effect.thebetweenlands." + elixir.getKey().location().getPath(), name);
		this.add(base + "_effect", desc);
		this.add("manual.thebetweenlands.herblore." + elixir.getKey().location().toString().replace(':', '.') + ".desc", manualEntry);
	}

	public void addAdvancement(String key, String title, String desc) {
		this.add("advancement.thebetweenlands." + key, title);
		this.add("advancement.thebetweenlands." + key + ".desc", desc);
	}

	public void addEntityAndEgg(DeferredHolder<EntityType<?>, ? extends EntityType<?>> entity, String name) {
		this.addEntityType(entity, name);
		this.add("item.thebetweenlands." + entity.getId().getPath() + "_spawn_egg", name + " Spawn Egg");
	}

	public void addAmphibiousUpgrade(DeferredHolder<AmphibiousArmorUpgrade, ? extends AmphibiousArmorUpgrade> upgrade, String name) {
		this.add(Util.makeDescriptionId("amphibious_upgrade", upgrade.getId()), name);
	}

	@Override
	public void add(String key, String value) {
		super.add(key, value);
		List<LangFormatSplitter.Component> splitEnglish = LangFormatSplitter.split(value);
		this.upsideDownEntries.put(key, LangConversionHelper.convertComponents(splitEnglish));
	}

	@Override
	public CompletableFuture<?> run(CachedOutput cache) {
		//generate normal lang file
		CompletableFuture<?> languageGen = super.run(cache);
		ImmutableList.Builder<CompletableFuture<?>> futuresBuilder = new ImmutableList.Builder<>();
		futuresBuilder.add(languageGen);

		//generate en_ud file
		JsonObject upsideDownFile = new JsonObject();
		this.upsideDownEntries.forEach(upsideDownFile::addProperty);
		futuresBuilder.add(DataProvider.saveStable(cache, upsideDownFile, this.output.getOutputFolder(PackOutput.Target.RESOURCE_PACK).resolve(TheBetweenlands.ID).resolve("lang").resolve("en_ud.json")));

		return CompletableFuture.allOf(futuresBuilder.build().toArray(CompletableFuture[]::new));
	}

	@Override
	public String getName() {
		return "Betweenlands Language Files";
	}
}
