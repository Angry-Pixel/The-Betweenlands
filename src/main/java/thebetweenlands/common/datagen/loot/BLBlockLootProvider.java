package thebetweenlands.common.datagen.loot;

import net.minecraft.advancements.critereon.StatePropertiesPredicate;
import net.minecraft.core.Direction;
import net.minecraft.core.Holder;
import net.minecraft.core.HolderLookup;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.loot.BlockLootSubProvider;
import net.minecraft.world.flag.FeatureFlags;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.enchantment.Enchantment;
import net.minecraft.world.item.enchantment.Enchantments;
import net.minecraft.world.level.ItemLike;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.properties.BedPart;
import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.LootPool;
import net.minecraft.world.level.storage.loot.LootTable;
import net.minecraft.world.level.storage.loot.entries.AlternativesEntry;
import net.minecraft.world.level.storage.loot.entries.LootItem;
import net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer;
import net.minecraft.world.level.storage.loot.functions.ApplyBonusCount;
import net.minecraft.world.level.storage.loot.functions.CopyComponentsFunction;
import net.minecraft.world.level.storage.loot.functions.SetItemCountFunction;
import net.minecraft.world.level.storage.loot.predicates.*;
import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
import net.minecraft.world.level.storage.loot.providers.number.UniformGenerator;
import net.neoforged.neoforge.common.ItemAbilities;
import net.neoforged.neoforge.common.loot.CanItemPerformAbility;
import net.neoforged.neoforge.registries.DeferredHolder;
import thebetweenlands.common.TheBetweenlands;
import thebetweenlands.common.block.*;
import thebetweenlands.common.registries.BlockRegistry;
import thebetweenlands.common.registries.DataComponentRegistry;
import thebetweenlands.common.registries.ItemRegistry;

import java.util.Set;
import java.util.stream.Collectors;

public class BLBlockLootProvider extends BlockLootSubProvider {

	private static final LootItemCondition.Builder HAS_SHEARS = CanItemPerformAbility.canItemPerformAbility(ItemAbilities.SHEARS_DIG);
	private static final LootItemCondition.Builder HAS_SICKLE = CanItemPerformAbility.canItemPerformAbility(TheBetweenlands.SICKLE_HARVEST);

	protected BLBlockLootProvider(HolderLookup.Provider registries) {
		super(Set.of(), FeatureFlags.REGISTRY.allFlags(), registries);
	}

	@Override
	protected void generate() {
		HolderLookup.RegistryLookup<Enchantment> registrylookup = this.registries.lookupOrThrow(Registries.ENCHANTMENT);

		this.dropSelf(BlockRegistry.DRUID_STONE_1.get());
		this.dropSelf(BlockRegistry.DRUID_STONE_2.get());
		this.dropSelf(BlockRegistry.DRUID_STONE_3.get());
		this.dropSelf(BlockRegistry.DRUID_STONE_4.get());
		this.dropSelf(BlockRegistry.DRUID_STONE_5.get());
		this.dropSelf(BlockRegistry.DRUID_STONE_6.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.CORRUPT_BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.MUD.get());
		this.dropSelf(BlockRegistry.PEAT.get());
		this.dropSelf(BlockRegistry.SMOULDERING_PEAT.get());
		this.dropOther(BlockRegistry.SLUDGY_DIRT.get(), BlockRegistry.SWAMP_DIRT);
		this.dropOther(BlockRegistry.SPREADING_SLUDGY_DIRT.get(), BlockRegistry.SWAMP_DIRT);
		this.dropSelf(BlockRegistry.SLIMY_DIRT.get());
		this.add(BlockRegistry.SLIMY_GRASS.get(), block -> this.createSingleItemTableWithSilkTouch(block, BlockRegistry.SLIMY_DIRT));
		this.dropSelf(BlockRegistry.CRAGROCK.get());
		this.dropSelf(BlockRegistry.MOSSY_CRAGROCK_TOP.get());
		this.dropSelf(BlockRegistry.MOSSY_CRAGROCK_BOTTOM.get());
		this.dropSelf(BlockRegistry.PITSTONE.get());
		this.dropSelf(BlockRegistry.LIMESTONE.get());
		this.dropSelf(BlockRegistry.SWAMP_DIRT.get());
		this.dropSelf(BlockRegistry.COARSE_SWAMP_DIRT.get());
		this.add(BlockRegistry.SWAMP_GRASS.get(), block -> this.createSingleItemTableWithSilkTouch(block, BlockRegistry.SWAMP_DIRT));
		this.add(BlockRegistry.WISP.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(WispBlock.VISIBLE, true)))))));
		this.dropSelf(BlockRegistry.OCTINE_ORE.get());
		this.add(BlockRegistry.VALONITE_ORE.get(), block -> this.createOreDrop(block, ItemRegistry.VALONITE_SHARD.get()));
		this.add(BlockRegistry.SULFUR_ORE.get(), block -> this.createOreDrop(block, ItemRegistry.SULFUR.get()));
		this.add(BlockRegistry.SLIMY_BONE_ORE.get(), block -> this.createOreDrop(block, ItemRegistry.SLIMY_BONE.get()));
		this.add(BlockRegistry.SCABYST_ORE.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.SCABYST).apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 3.0F))).apply(ApplyBonusCount.addUniformBonusCount(registrylookup.getOrThrow(Enchantments.FORTUNE))))));
		this.dropSelf(BlockRegistry.SYRMORITE_ORE.get());
		this.dropSelf(BlockRegistry.CRIMSON_MIDDLE_GEM_ORE.get());
		this.dropSelf(BlockRegistry.GREEN_MIDDLE_GEM_ORE.get());
		this.dropSelf(BlockRegistry.AQUA_MIDDLE_GEM_ORE.get());
		this.dropWhenSilkTouch(BlockRegistry.STALACTITE.get());
		this.dropWhenSilkTouch(BlockRegistry.LIFE_CRYSTAL_STALACTITE.get());
		this.dropOther(BlockRegistry.LIFE_CRYSTAL_ORE_STALACTITE.get(), ItemRegistry.LIFE_CRYSTAL);
		this.dropSelf(BlockRegistry.SILT.get());
		this.dropSelf(BlockRegistry.FILTERED_SILT.get());
		this.add(BlockRegistry.DEAD_GRASS.get(), block -> this.createSingleItemTableWithSilkTouch(block, BlockRegistry.SWAMP_DIRT));
		this.dropSelf(BlockRegistry.SOLID_TAR.get());
		this.add(BlockRegistry.PUDDLE.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.PEARL_BLOCK.get());
		this.dropSelf(BlockRegistry.ANCIENT_REMNANT_BLOCK.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_LOG.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_BARK.get());
		this.dropSelf(BlockRegistry.ROTTEN_BARK.get());
		this.dropOther(BlockRegistry.SPREADING_ROTTEN_BARK.get(), BlockRegistry.ROTTEN_BARK);
		this.dropSelf(BlockRegistry.RUBBER_LOG.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_LOG.get());
		this.dropSelf(BlockRegistry.TARRED_HEARTHGROVE_LOG.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_BARK.get());
		this.dropSelf(BlockRegistry.TARRED_HEARTHGROVE_BARK.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_LOG.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_BARK.get());
		this.dropSelf(BlockRegistry.SPIRIT_TREE_LOG.get());
		this.dropSelf(BlockRegistry.SPIRIT_TREE_BARK.get());
		this.dropSelf(BlockRegistry.WEEDWOOD.get());
		this.dropSelf(BlockRegistry.SAP_LOG.get());
		this.dropSelf(BlockRegistry.SAP_BARK.get());
		this.add(BlockRegistry.WEEDWOOD_LEAVES.get(), block -> this.createBLLeavesDrops(block, BlockRegistry.WEEDWOOD_SAPLING.get(), true));
		this.add(BlockRegistry.SAP_LEAVES.get(), block -> this.createBLLeavesDrops(block, BlockRegistry.SAP_SAPLING.get(), false));
		this.add(BlockRegistry.RUBBER_TREE_LEAVES.get(), block -> this.createBLLeavesDrops(block, BlockRegistry.RUBBER_SAPLING.get(), false));
		this.add(BlockRegistry.HEARTHGROVE_LEAVES.get(), block -> this.createBLLeavesDrops(block, BlockRegistry.HEARTHGROVE_SAPLING.get(), false));
		this.add(BlockRegistry.NIBBLETWIG_LEAVES.get(), block -> this.createBLLeavesDrops(block, BlockRegistry.NIBBLETWIG_SAPLING.get(), false));
		this.add(BlockRegistry.TOP_SPIRIT_TREE_LEAVES.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.SPIRIT_FRUIT.get()).when(LootItemRandomChanceCondition.randomChance(1.0F / 140.0F)))));
		this.add(BlockRegistry.MIDDLE_SPIRIT_TREE_LEAVES.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.SPIRIT_FRUIT.get()).when(LootItemRandomChanceCondition.randomChance(1.0F / 140.0F)))));
		this.add(BlockRegistry.BOTTOM_SPIRIT_TREE_LEAVES.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.SPIRIT_FRUIT.get()).when(LootItemRandomChanceCondition.randomChance(1.0F / 140.0F)))));
		this.dropSelf(BlockRegistry.WEEDWOOD_PLANKS.get());
		this.dropSelf(BlockRegistry.RUBBER_TREE_PLANKS.get());
		this.dropSelf(BlockRegistry.GIANT_ROOT_PLANKS.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_PLANKS.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_PLANKS.get());
		this.dropSelf(BlockRegistry.ANGRY_BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_BRICKS.get());
		this.dropOther(BlockRegistry.MIRAGE_BETWEENSTONE_BRICKS.get(), BlockRegistry.BETWEENSTONE_BRICKS);
		this.dropSelf(BlockRegistry.BETWEENSTONE_TILES.get());
		this.dropSelf(BlockRegistry.CHISELED_BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.CHISELED_CRAGROCK.get());
		this.dropSelf(BlockRegistry.CRACKED_CHISELED_CRAGROCK.get());
		this.dropSelf(BlockRegistry.MOSSY_CHISELED_CRAGROCK.get());
		this.dropSelf(BlockRegistry.CHISELED_LIMESTONE.get());
		this.dropSelf(BlockRegistry.CHISELED_PITSTONE.get());
		this.dropSelf(BlockRegistry.CHISELED_SCABYST_1.get());
		this.dropSelf(BlockRegistry.CHISELED_SCABYST_2.get());
		this.dropSelf(BlockRegistry.CHISELED_SCABYST_3.get());
		this.dropSelf(BlockRegistry.DOTTED_SCABYST_PITSTONE.get());
		this.dropSelf(BlockRegistry.HORIZONTAL_SCABYST_PITSTONE.get());
		this.dropSelf(BlockRegistry.SCABYST_BRICKS.get());
		this.dropSelf(BlockRegistry.CRACKED_BETWEENSTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.CRACKED_BETWEENSTONE_TILES.get());
		this.dropSelf(BlockRegistry.CRACKED_LIMESTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.CRAGROCK_BRICKS.get());
		this.dropSelf(BlockRegistry.CRACKED_CRAGROCK_BRICKS.get());
		this.dropSelf(BlockRegistry.MOSSY_CRAGROCK_BRICKS.get());
		this.dropSelf(BlockRegistry.CRAGROCK_TILES.get());
		this.dropSelf(BlockRegistry.CRACKED_CRAGROCK_TILES.get());
		this.dropSelf(BlockRegistry.MOSSY_CRAGROCK_TILES.get());
		this.dropSelf(BlockRegistry.GLOWING_BETWEENSTONE_TILE.get());
		this.dropSelf(BlockRegistry.INACTIVE_GLOWING_SMOOTH_CRAGROCK.get());
		this.dropSelf(BlockRegistry.GLOWING_SMOOTH_CRAGROCK.get());
		this.dropSelf(BlockRegistry.LIMESTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.LIMESTONE_TILES.get());
		this.dropSelf(BlockRegistry.MOSSY_BETWEENSTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.MOSSY_BETWEENSTONE_TILES.get());
		this.dropSelf(BlockRegistry.MOSSY_LIMESTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.MUD_BRICKS.get());
		this.dropSelf(BlockRegistry.MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.RUBBER_BLOCK.get());
		this.dropSelf(BlockRegistry.PITSTONE_BRICKS.get());
		this.dropSelf(BlockRegistry.PITSTONE_TILES.get());
		this.dropSelf(BlockRegistry.POLISHED_LIMESTONE.get());
		this.dropSelf(BlockRegistry.SMOOTH_BETWEENSTONE.get());
		this.dropSelf(BlockRegistry.SMOOTH_CRAGROCK.get());
		this.dropSelf(BlockRegistry.OCTINE_BLOCK.get());
		this.dropSelf(BlockRegistry.SYRMORITE_BLOCK.get());
		this.dropSelf(BlockRegistry.VALONITE_BLOCK.get());
		this.dropSelf(BlockRegistry.SCABYST_BLOCK.get());
		this.dropSelf(BlockRegistry.WEAK_BETWEENSTONE_TILES.get());
		this.dropSelf(BlockRegistry.WEAK_POLISHED_LIMESTONE.get());
		this.dropSelf(BlockRegistry.WEAK_MOSSY_BETWEENSTONE_TILES.get());
		this.dropSelf(BlockRegistry.WEAK_SMOOTH_CRAGROCK.get());
		this.add(BlockRegistry.ORANGE_DENTROTHYST.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.ORANGE_DENTROTHYST_SHARD).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F))))));
		this.add(BlockRegistry.GREEN_DENTROTHYST.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.GREEN_DENTROTHYST_SHARD).apply(SetItemCountFunction.setCount(ConstantValue.exactly(4.0F))))));
		this.add(BlockRegistry.LOOT_POT_1.get(), LootTable.lootTable());
		this.add(BlockRegistry.LOOT_POT_2.get(), LootTable.lootTable());
		this.add(BlockRegistry.LOOT_POT_3.get(), LootTable.lootTable());
		this.add(BlockRegistry.MOB_SPAWNER.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.TEMPLE_PILLAR.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_PILLAR.get());
		this.dropSelf(BlockRegistry.PITSTONE_PILLAR.get());
		this.dropSelf(BlockRegistry.LIMESTONE_PILLAR.get());
		this.dropSelf(BlockRegistry.CRAGROCK_PILLAR.get());
//		this.add(BlockRegistry.TAR_BEAST_SPAWNER.get(), LootTable.lootTable());
		this.add(BlockRegistry.TAR_LOOT_POT_1.get(), LootTable.lootTable());
		this.add(BlockRegistry.TAR_LOOT_POT_2.get(), LootTable.lootTable());
		this.add(BlockRegistry.TAR_LOOT_POT_3.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.CRAGROCK_STAIRS.get());
		this.dropSelf(BlockRegistry.PITSTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.MUD_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.CRAGROCK_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.LIMESTONE_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.PITSTONE_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.LIMESTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.SMOOTH_BETWEENSTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.SMOOTH_CRAGROCK_STAIRS.get());
		this.dropSelf(BlockRegistry.POLISHED_LIMESTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.SCABYST_BRICK_STAIRS.get());
		this.dropSelf(BlockRegistry.SULFUR_BLOCK.get());
		this.dropSelf(BlockRegistry.TEMPLE_BRICKS.get());
		this.dropSelf(BlockRegistry.SMOOTH_PITSTONE.get());
		this.dropSelf(BlockRegistry.MIRE_CORAL_BLOCK.get());
		this.dropSelf(BlockRegistry.DEEP_WATER_CORAL_BLOCK.get());
		this.dropSelf(BlockRegistry.SLIMY_BONE_BLOCK.get());
		this.dropSelf(BlockRegistry.AQUA_MIDDLE_GEM_BLOCK.get());
		this.dropSelf(BlockRegistry.CRIMSON_MIDDLE_GEM_BLOCK.get());
		this.dropSelf(BlockRegistry.GREEN_MIDDLE_GEM_BLOCK.get());
		this.dropSelf(BlockRegistry.COMPOST_BLOCK.get());
		this.dropWhenSilkTouch(BlockRegistry.POLISHED_ORANGE_DENTROTHYST.get());
		this.dropWhenSilkTouch(BlockRegistry.POLISHED_GREEN_DENTROTHYST.get());
		this.dropWhenSilkTouch(BlockRegistry.SILT_GLASS.get());
		this.dropWhenSilkTouch(BlockRegistry.SILT_GLASS_PANE.get());
		this.dropSelf(BlockRegistry.LATTICE.get());
		this.dropSelf(BlockRegistry.FINE_LATTICE.get());
		this.dropWhenSilkTouch(BlockRegistry.FILTERED_SILT_GLASS.get());
		this.dropWhenSilkTouch(BlockRegistry.FILTERED_SILT_GLASS_PANE.get());
		this.dropWhenSilkTouch(BlockRegistry.POLISHED_ORANGE_DENTROTHYST_PANE.get());
		this.dropWhenSilkTouch(BlockRegistry.POLISHED_GREEN_DENTROTHYST_PANE.get());
		this.dropSelf(BlockRegistry.CONNECTED_AMATE_PAPER_PANE.get());
		this.dropSelf(BlockRegistry.ROUNDED_AMATE_PAPER_PANE.get());
		this.dropSelf(BlockRegistry.SQUARED_AMATE_PAPER_PANE.get());
		this.dropSelf(BlockRegistry.SMOOTH_PITSTONE_STAIRS.get());
		this.dropSelf(BlockRegistry.SOLID_TAR_STAIRS.get());
		this.dropSelf(BlockRegistry.TEMPLE_BRICK_STAIRS.get());
		this.add(BlockRegistry.SPIKE_TRAP.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.WEEDWOOD_STAIRS.get());
		this.dropSelf(BlockRegistry.RUBBER_TREE_STAIRS.get());
		this.dropSelf(BlockRegistry.GIANT_ROOT_STAIRS.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_STAIRS.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_STAIRS.get());
		this.dropOther(BlockRegistry.POSSESSED_BLOCK.get(), BlockRegistry.BETWEENSTONE_BRICKS);
		this.add(BlockRegistry.ITEM_CAGE.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.ITEM_SHELF.get());
		this.dropSelf(BlockRegistry.THATCH.get());
		this.add(BlockRegistry.CRAGROCK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.PITSTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.BETWEENSTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SMOOTH_PITSTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SOLID_TAR_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.TEMPLE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.BETWEENSTONE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.MUD_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.CRAGROCK_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.LIMESTONE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.LIMESTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SMOOTH_BETWEENSTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SMOOTH_CRAGROCK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.POLISHED_LIMESTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.PITSTONE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.WEEDWOOD_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.RUBBER_TREE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.GIANT_ROOT_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.HEARTHGROVE_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.NIBBLETWIG_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.MUD_BRICK_SHINGLE_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.MUD_BRICK_SHINGLE_WALL.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.MAROON_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.SAFFRON_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_FILTERED_SILT_GLASS.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.MAROON_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLES.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.MAROON_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLE_SLAB.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.MAROON_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.SAFFRON_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_STAIRS.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_MUD_BRICK_SHINGLE_STAIRS.get());
		this.add(BlockRegistry.THATCH_SLAB.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SCABYST_BRICK_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.PITSTONE_WALL.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_WALL.get());
		this.dropSelf(BlockRegistry.SOLID_TAR_WALL.get());
		this.dropSelf(BlockRegistry.TEMPLE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.SMOOTH_PITSTONE_WALL.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.MUD_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.CRAGROCK_WALL.get());
		this.dropSelf(BlockRegistry.CRAGROCK_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.LIMESTONE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.LIMESTONE_WALL.get());
		this.dropSelf(BlockRegistry.POLISHED_LIMESTONE_WALL.get());
		this.dropSelf(BlockRegistry.PITSTONE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.SMOOTH_BETWEENSTONE_WALL.get());
		this.dropSelf(BlockRegistry.SMOOTH_CRAGROCK_WALL.get());
		this.dropSelf(BlockRegistry.MOSSY_BETWEENSTONE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.MOSSY_SMOOTH_BETWEENSTONE_WALL.get());
		this.dropSelf(BlockRegistry.CRACKED_BETWEENSTONE_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.SCABYST_BRICK_WALL.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_FENCE.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_LOG_FENCE.get());
		this.dropSelf(BlockRegistry.RUBBER_TREE_FENCE.get());
		this.dropSelf(BlockRegistry.GIANT_ROOT_FENCE.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_FENCE.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_FENCE.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_LOG_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.RUBBER_TREE_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.GIANT_ROOT_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_PRESSURE_PLATE.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_PRESSURE_PLATE.get());
		this.dropSelf(BlockRegistry.SYRMORITE_PRESSURE_PLATE.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_BUTTON.get());
		this.dropSelf(BlockRegistry.BETWEENSTONE_BUTTON.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_LADDER.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_LEVER.get());
		this.add(BlockRegistry.MUD_LOOT_POT_1.get(), LootTable.lootTable());
		this.add(BlockRegistry.MUD_LOOT_POT_2.get(), LootTable.lootTable());
		this.add(BlockRegistry.MUD_LOOT_POT_3.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.WORM_PILLAR.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_4.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_5.get());
		this.dropSelf(BlockRegistry.WORM_PILLAR_TOP.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_4.get());
		this.dropSelf(BlockRegistry.SLUDGY_WORM_PILLAR_TOP_5.get());
		this.dropSelf(BlockRegistry.COMPACTED_MUD.get());
		this.dropSelf(BlockRegistry.MUD_TILES.get());
		this.dropSelf(BlockRegistry.DECAYED_MUD_TILES.get());
		this.dropSelf(BlockRegistry.CRACKED_MUD_TILES.get());
		this.dropSelf(BlockRegistry.CRACKED_DECAYED_MUD_TILES.get());
		this.add(BlockRegistry.PUFFSHROOM.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.CARVED_MUD_BRICKS.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICKS_4.get());
		this.dropSelf(BlockRegistry.CARVED_MUD_BRICK_EDGE.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_CARVED_MUD_BRICK_EDGE_4.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICKS_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICKS_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICKS_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICKS_4.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_1.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_2.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_3.get());
		this.dropSelf(BlockRegistry.SLUDGY_MUD_BRICK_STAIRS_4.get());
		this.add(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_1.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_2.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_3.get(), this::createSlabItemTable);
		this.add(BlockRegistry.SLUDGY_MUD_BRICK_SLAB_4.get(), this::createSlabItemTable);
		this.add(BlockRegistry.BEAM_ORIGIN.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.BEAM_TUBE.get());
		this.dropSelf(BlockRegistry.BEAM_LENS_SUPPORT.get());
		this.dropSelf(BlockRegistry.BEAM_RELAY.get());
		this.add(BlockRegistry.MUD_BRICK_ALCOVE.get(), LootTable.lootTable());
		this.add(BlockRegistry.LOOT_URN_1.get(), LootTable.lootTable());
		this.add(BlockRegistry.LOOT_URN_2.get(), LootTable.lootTable());
		this.add(BlockRegistry.LOOT_URN_3.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.DUNGEON_DOOR_COMBINATION.get());
		this.dropSelf(BlockRegistry.CLIMBABLE_MUD_BRICKS.get());
		this.add(BlockRegistry.BROKEN_MUD_TILES.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.DUNGEON_WALL_CANDLE.get());
		this.dropSelf(BlockRegistry.WOODEN_SUPPORT_BEAM_1.get());
		this.dropSelf(BlockRegistry.WOODEN_SUPPORT_BEAM_2.get());
		this.dropSelf(BlockRegistry.WOODEN_SUPPORT_BEAM_3.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_1.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_2.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_3.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_4.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_5.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_6.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_7.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_8.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_9.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_10.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_11.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_12.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_13.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_14.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_15.get());
		this.dropSelf(BlockRegistry.CARVED_ROTTEN_BARK_16.get());
		this.add(BlockRegistry.MUD_BRICK_SPIKE_TRAP.get(), LootTable.lootTable());
		this.add(BlockRegistry.MUD_TILES_SPIKE_TRAP.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.COMPACTED_MUD_SLOPE.get());
		this.add(BlockRegistry.COMPACTED_MUD_SLAB.get(), this::createSlabItemTable);
		this.dropOther(BlockRegistry.COMPACTED_MUD_MIRAGE.get(), BlockRegistry.COMPACTED_MUD);
		this.dropSelf(BlockRegistry.ROTTEN_PLANKS.get());
		this.dropSelf(BlockRegistry.ROTTEN_STAIRS.get());
		this.add(BlockRegistry.ROTTEN_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.ROTTEN_FENCE.get());
		this.dropSelf(BlockRegistry.ROTTEN_FENCE_GATE.get());
		this.add(BlockRegistry.BRAZIER.get(), block -> this.createSinglePropConditionTable(block, BrazierBlock.HALF, DoubleBlockHalf.LOWER));
		this.add(BlockRegistry.BULB_CAPPED_MUSHROOM_CAP.get(), block -> this.createMushroomBlockDrop(block, ItemRegistry.BULB_CAPPED_MUSHROOM));
		this.dropWhenSilkTouch(BlockRegistry.BULB_CAPPED_MUSHROOM_STALK.get());
		this.dropSelf(BlockRegistry.SHELF_FUNGUS.get());
		this.add(BlockRegistry.ROOT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.TANGLED_ROOT))));
		this.dropSelf(BlockRegistry.GIANT_ROOT.get());
		this.dropOther(BlockRegistry.HOLLOW_LOG.get(), ItemRegistry.DRY_BARK);
		this.dropSelf(BlockRegistry.PURIFIED_SWAMP_DIRT.get());
		this.dropOther(BlockRegistry.DUG_SWAMP_GRASS.get(), BlockRegistry.SWAMP_DIRT);
		this.dropOther(BlockRegistry.DUG_SWAMP_DIRT.get(), BlockRegistry.SWAMP_DIRT);
		this.dropOther(BlockRegistry.PURIFIED_DUG_SWAMP_GRASS.get(), BlockRegistry.SWAMP_DIRT);
		this.dropOther(BlockRegistry.PURIFIED_DUG_SWAMP_DIRT.get(), BlockRegistry.SWAMP_DIRT);
		this.dropWhenSilkTouch(BlockRegistry.BLACK_ICE.get());
		this.add(BlockRegistry.SNOW.get(), block -> LootTable.lootTable().withPool(LootPool.lootPool().when(LootItemEntityPropertyCondition.entityPresent(LootContext.EntityTarget.THIS)).add(
			AlternativesEntry.alternatives(
				AlternativesEntry.alternatives(SnowLayerBlock.LAYERS.getPossibleValues(),
						value -> LootItem.lootTableItem(Items.SNOWBALL)
							.when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, value)))
							.apply(SetItemCountFunction.setCount(ConstantValue.exactly(value))))
					.when(this.doesNotHaveSilkTouch()),
				AlternativesEntry.alternatives(SnowLayerBlock.LAYERS.getPossibleValues(),
					value -> value == 8 ? LootItem.lootTableItem(Blocks.SNOW_BLOCK) : LootItem.lootTableItem(Blocks.SNOW)
						.apply(SetItemCountFunction.setCount(ConstantValue.exactly(value)))
						.when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SnowLayerBlock.LAYERS, value))))))));
		this.dropSelf(BlockRegistry.PORTAL_LOG.get());
		this.add(BlockRegistry.PORTAL_FRAME_TOP_RIGHT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_TOP.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_TOP_LEFT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_LEFT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_RIGHT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_BOTTOM_RIGHT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_BOTTOM.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.PORTAL_FRAME_BOTTOM_LEFT.get(), block -> this.createSilkTouchDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(BlockRegistry.PORTAL_LOG))));
		this.add(BlockRegistry.DRUID_ALTAR.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.PURIFIER.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_CRAFTING_TABLE.get());
		this.dropSelf(BlockRegistry.COMPOST_BIN.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_JUKEBOX.get());
		this.dropSelf(BlockRegistry.SULFUR_FURNACE.get());
		this.dropSelf(BlockRegistry.DUAL_SULFUR_FURNACE.get());
//		this.dropSelf(BlockRegistry.WEEDWOOD_CHEST.get());
		this.dropOther(BlockRegistry.WEEDWOOD_RUBBER_TAP.get(), ItemRegistry.WEEDWOOD_BUCKET);
		this.dropOther(BlockRegistry.SYRMORITE_RUBBER_TAP.get(), ItemRegistry.SYRMORITE_BUCKET);
		this.dropOther(BlockRegistry.SLUDGE.get(), ItemRegistry.SLUDGE_BALL);
		this.dropSelf(BlockRegistry.SULFUR_TORCH.get());
		this.dropSelf(BlockRegistry.EXTINGUISHED_SULFUR_TORCH.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.RUBBER_TREE_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.SYRMORITE_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.GIANT_ROOT_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.ROTTEN_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_WEEDWOOD_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_RUBBER_TREE_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_GIANT_ROOT_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_HEARTHGROVE_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_NIBBLETWIG_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.TREATED_ROTTEN_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.SCABYST_TRAPDOOR.get());
		this.dropSelf(BlockRegistry.SYRMORITE_HOPPER.get());
		this.dropSelf(BlockRegistry.MUD_FLOWER_POT.get());
		this.dropSelf(BlockRegistry.MUD_FLOWER_POT_CANDLE.get());
		this.dropSelf(BlockRegistry.GECKO_CAGE.get());
		this.dropSelf(BlockRegistry.INFUSER.get());
		this.dropSelf(BlockRegistry.GREEN_ASPECT_VIAL.get());
		this.dropSelf(BlockRegistry.ORANGE_ASPECT_VIAL.get());
		this.dropSelf(BlockRegistry.MORTAR.get());
		this.dropSelf(BlockRegistry.CENSER.get());
		this.dropSelf(BlockRegistry.WEEDWOOD_BARREL.get());
		this.dropSelf(BlockRegistry.SYRMORITE_BARREL.get());
		this.dropSelf(BlockRegistry.ANIMATOR.get());
		this.dropSelf(BlockRegistry.ALEMBIC.get());
		this.dropSelf(BlockRegistry.ROPE.get());
		this.dropSelf(BlockRegistry.DAMP_TORCH.get());
		this.dropSelf(BlockRegistry.WALKWAY.get());
		this.dropSelf(BlockRegistry.CHIP_PATH.get());
		this.dropSelf(BlockRegistry.THATCH_ROOF.get());
		this.dropSelf(BlockRegistry.MUD_BRICK_SHINGLE_ROOF.get());
		this.add(BlockRegistry.REPELLER.get(), block -> this.createSinglePropConditionTable(block, RepellerBlock.HALF, DoubleBlockHalf.LOWER));
		this.add(BlockRegistry.WAYSTONE.get(), block -> this.createSinglePropConditionTable(block, WaystoneBlock.PART, WaystoneBlock.Part.BOTTOM));
		this.add(BlockRegistry.DEEPMAN_SIMULACRUM_1.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.DEEPMAN_SIMULACRUM_2.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.DEEPMAN_SIMULACRUM_3.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.LAKE_CAVERN_SIMULACRUM_1.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.LAKE_CAVERN_SIMULACRUM_2.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.LAKE_CAVERN_SIMULACRUM_3.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.ROOTMAN_SIMULACRUM_1.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.ROOTMAN_SIMULACRUM_2.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.add(BlockRegistry.ROOTMAN_SIMULACRUM_3.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.SIMULACRUM_EFFECT.get()))))));
		this.dropSelf(BlockRegistry.OFFERING_TABLE.get());
		this.dropSelf(BlockRegistry.WIND_CHIME.get());
		this.dropSelf(BlockRegistry.PAPER_LANTERN_1.get());
		this.dropSelf(BlockRegistry.PAPER_LANTERN_2.get());
		this.dropSelf(BlockRegistry.PAPER_LANTERN_3.get());
		this.dropSelf(BlockRegistry.SILT_GLASS_LANTERN.get());
		this.add(BlockRegistry.FISHING_TACKLE_BOX.get(), this::createShulkerBoxDrop);
		this.add(BlockRegistry.SMOKING_RACK.get(), block -> this.createSinglePropConditionTable(block, SmokingRackBlock.HALF, DoubleBlockHalf.LOWER));
		this.dropSelf(BlockRegistry.FISH_TRIMMING_TABLE.get());
		this.dropSelf(BlockRegistry.CRAB_POT.get());
		this.dropSelf(BlockRegistry.CRAB_POT_FILTER.get());
		this.dropSelf(BlockRegistry.SILT_GLASS_JAR.get());
		this.dropSelf(BlockRegistry.GLOWING_GOOP.get());
		this.dropSelf(BlockRegistry.REED_MAT.get());
		this.dropSelf(BlockRegistry.LYESTONE.get());
		this.add(BlockRegistry.MIST_BRIDGE.get(), LootTable.lootTable());
		this.add(BlockRegistry.SHADOW_WALKER.get(), LootTable.lootTable());
		this.dropSelf(BlockRegistry.STEEPING_POT.get());
		this.dropSelf(BlockRegistry.GRUB_HUB.get());
		this.dropSelf(BlockRegistry.WATER_FILTER.get());
		this.add(BlockRegistry.FILTERED_SILT_GLASS_JAR.get(), block -> LootTable.lootTable().withPool(this.applyExplosionCondition(block, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).apply(CopyComponentsFunction.copyComponents(CopyComponentsFunction.Source.BLOCK_ENTITY).include(DataComponentRegistry.STORED_FLUID.get()))))));
		this.dropSelf(BlockRegistry.MOTH_HOUSE.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_SAMITE.get());
		this.dropSelf(BlockRegistry.MAROON_SAMITE.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_SAMITE.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_SAMITE.get());
		this.dropSelf(BlockRegistry.SAFFRON_SAMITE.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_SAMITE.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_SAMITE.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_SAMITE.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_SAMITE.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_SAMITE.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_SAMITE.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_SAMITE.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_SAMITE.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_SAMITE.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_SAMITE.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_SAMITE.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.MAROON_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.SAFFRON_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_SAMITE_CANVAS_PANEL.get());
		this.dropSelf(BlockRegistry.DULL_LAVENDER_REED_MAT.get());
		this.dropSelf(BlockRegistry.MAROON_REED_MAT.get());
		this.dropSelf(BlockRegistry.SHADOW_GREEN_REED_MAT.get());
		this.dropSelf(BlockRegistry.CAMELOT_MAGENTA_REED_MAT.get());
		this.dropSelf(BlockRegistry.SAFFRON_REED_MAT.get());
		this.dropSelf(BlockRegistry.CARIBBEAN_GREEN_REED_MAT.get());
		this.dropSelf(BlockRegistry.VIVID_TANGERINE_REED_MAT.get());
		this.dropSelf(BlockRegistry.CHAMPAGNE_REED_MAT.get());
		this.dropSelf(BlockRegistry.RAISIN_BLACK_REED_MAT.get());
		this.dropSelf(BlockRegistry.SUSHI_GREEN_REED_MAT.get());
		this.dropSelf(BlockRegistry.ELM_CYAN_REED_MAT.get());
		this.dropSelf(BlockRegistry.CADMIUM_GREEN_REED_MAT.get());
		this.dropSelf(BlockRegistry.LAVENDER_BLUE_REED_MAT.get());
		this.dropSelf(BlockRegistry.BROWN_RUST_REED_MAT.get());
		this.dropSelf(BlockRegistry.MIDNIGHT_PURPLE_REED_MAT.get());
		this.dropSelf(BlockRegistry.PEWTER_GREY_REED_MAT.get());
		this.dropSelf(BlockRegistry.TREATED_WEEDWOOD_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_WEEDWOOD_STAIRS.get());
		this.add(BlockRegistry.TREATED_WEEDWOOD_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_WEEDWOOD_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_WEEDWOOD_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.TREATED_RUBBER_TREE_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_RUBBER_TREE_STAIRS.get());
		this.add(BlockRegistry.TREATED_RUBBER_TREE_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_RUBBER_TREE_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_RUBBER_TREE_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.TREATED_GIANT_ROOT_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_GIANT_ROOT_STAIRS.get());
		this.add(BlockRegistry.TREATED_GIANT_ROOT_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_GIANT_ROOT_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_GIANT_ROOT_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.TREATED_HEARTHGROVE_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_HEARTHGROVE_STAIRS.get());
		this.add(BlockRegistry.TREATED_HEARTHGROVE_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_HEARTHGROVE_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_HEARTHGROVE_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.TREATED_NIBBLETWIG_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_NIBBLETWIG_STAIRS.get());
		this.add(BlockRegistry.TREATED_NIBBLETWIG_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_NIBBLETWIG_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_NIBBLETWIG_FENCE_GATE.get());
		this.dropSelf(BlockRegistry.TREATED_ROTTEN_PLANKS.get());
		this.dropSelf(BlockRegistry.TREATED_ROTTEN_STAIRS.get());
		this.add(BlockRegistry.TREATED_ROTTEN_SLAB.get(), this::createSlabItemTable);
		this.dropSelf(BlockRegistry.TREATED_ROTTEN_FENCE.get());
		this.dropSelf(BlockRegistry.TREATED_ROTTEN_FENCE_GATE.get());
		this.add(BlockRegistry.WEEDWOOD_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.SYRMORITE_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.RUBBER_TREE_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.GIANT_ROOT_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.HEARTHGROVE_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.NIBBLETWIG_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.SCABYST_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.ROTTEN_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_WEEDWOOD_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_RUBBER_TREE_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_GIANT_ROOT_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_HEARTHGROVE_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_NIBBLETWIG_DOOR.get(), this::createDoorTable);
		this.add(BlockRegistry.TREATED_ROTTEN_DOOR.get(), this::createDoorTable);
		this.dropSelf(BlockRegistry.WEEDWOOD_SIGN.get());
		this.add(BlockRegistry.MOSS_BED.get(), block -> this.createSinglePropConditionTable(block, BedBlock.PART, BedPart.HEAD));

		this.dropSelf(BlockRegistry.WEEDWOOD_SAPLING.get());
		this.dropSelf(BlockRegistry.SAP_SAPLING.get());
		this.dropSelf(BlockRegistry.RUBBER_SAPLING.get());
		this.dropSelf(BlockRegistry.NIBBLETWIG_SAPLING.get());
		this.dropSelf(BlockRegistry.HEARTHGROVE_SAPLING.get());
		this.dropSelf(BlockRegistry.SPIRIT_TREE_SAPLING.get());
		this.dropSelf(BlockRegistry.ROOT_POD.get());
		this.add(BlockRegistry.EDGE_SHROOM.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.EDGE_SHROOM_GILLS));
		this.add(BlockRegistry.EDGE_MOSS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.EDGE_MOSS_CLUMP));
		this.add(BlockRegistry.EDGE_LEAF.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.EDGE_LEAF_DROP));
		this.add(BlockRegistry.PITCHER_PLANT.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.PITCHER_PLANT_TRAP));
		this.add(BlockRegistry.WEEPING_BLUE.get(), block -> LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(block).when(HAS_SHEARS))));
		this.add(BlockRegistry.SUNDEW.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SUNDEW_HEAD));
		this.dropOther(BlockRegistry.BLACK_HAT_MUSHROOM.get(), ItemRegistry.BLACK_HAT_MUSHROOM);
		this.dropOther(BlockRegistry.BULB_CAPPED_MUSHROOM.get(), ItemRegistry.BULB_CAPPED_MUSHROOM);
		this.dropOther(BlockRegistry.FLATHEAD_MUSHROOM.get(), ItemRegistry.FLATHEAD_MUSHROOM);
		this.add(BlockRegistry.VENUS_FLY_TRAP.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.VENUS_FLY_TRAP_HEAD));
		this.add(BlockRegistry.VOLARPAD.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.VOLARPAD_LEAF));
		this.add(BlockRegistry.SWAMP_PLANT.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.LEAF));
		this.dropSelf(BlockRegistry.SWAMP_KELP.get());
		this.dropOther(BlockRegistry.SWAMP_KELP_PLANT.get(), BlockRegistry.SWAMP_KELP);
		this.add(BlockRegistry.MIRE_CORAL.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MIRE_CORAL_STALK));
		this.add(BlockRegistry.DEEP_WATER_CORAL.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.DEEP_WATER_CORAL_STALK));
		this.add(BlockRegistry.WATER_WEEDS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.WATER_WEEDS_DROP));
		this.add(BlockRegistry.ALGAE.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.ALGAE_CLUMP));
		this.add(BlockRegistry.POISON_IVY.get(), block -> LootTable.lootTable().withPool(LootPool.lootPool().add(this.applyExplosionDecay(block, LootItem.lootTableItem(block)
			.when(HAS_SHEARS)
			.apply(Direction.values(), direction -> SetItemCountFunction.setCount(ConstantValue.exactly(1.0F), true)
				.when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(MultifaceBlock.getFaceProperty(direction), true))))
			.apply(SetItemCountFunction.setCount(ConstantValue.exactly(-1.0F), true)))
				.otherwise(this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.POISON_IVY_LEAF).when(HAS_SICKLE))))));
		this.add(BlockRegistry.ARROW_ARUM.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.ARROW_ARUM_LEAF));
		this.add(BlockRegistry.BLUE_EYED_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BLUE_EYED_GRASS_FLOWERS));
		this.add(BlockRegistry.BLUE_IRIS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BLUE_IRIS_PETAL));
		this.add(BlockRegistry.BONESET.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BONESET_FLOWERS));
		this.add(BlockRegistry.BOTTLE_BRUSH_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BOTTLE_BRUSH_GRASS_BLADES));
		this.add(BlockRegistry.BROOMSEDGE.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BROOMSEDGE_LEAVES));
		this.add(BlockRegistry.BUTTON_BUSH.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BUTTON_BUSH_FLOWERS));
		this.add(BlockRegistry.CARDINAL_FLOWER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CARDINAL_FLOWER_PETALS));
		this.add(BlockRegistry.CATTAIL.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CATTAIL_HEAD));
		this.add(BlockRegistry.CAVE_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CAVE_GRASS_BLADES));
		this.add(BlockRegistry.COPPER_IRIS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.COPPER_IRIS_PETALS));
		this.add(BlockRegistry.MARSH_HIBISCUS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MARSH_HIBISCUS_FLOWER));
		this.add(BlockRegistry.MARSH_MALLOW.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MARSH_MALLOW_FLOWER));
		this.add(BlockRegistry.BLADDERWORT_FLOWER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BLADDERWORT_FLOWER_DROP));
		this.add(BlockRegistry.BLADDERWORT_STALK.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BLADDERWORT_STALK_DROP));
		this.add(BlockRegistry.BOG_BEAN_FLOWER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BOG_BEAN_FLOWER_DROP));
		this.add(BlockRegistry.BOG_BEAN_STALK.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.BOG_BEAN_FLOWER_DROP));
		this.add(BlockRegistry.GOLDEN_CLUB_FLOWER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.GOLDEN_CLUB_FLOWERS));
		this.add(BlockRegistry.GOLDEN_CLUB_STALK.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.GOLDEN_CLUB_FLOWERS));
		this.add(BlockRegistry.MARSH_MARIGOLD_FLOWER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MARSH_MARIGOLD_FLOWER_DROP));
		this.add(BlockRegistry.MARSH_MARIGOLD_STALK.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MARSH_MARIGOLD_FLOWER_DROP));
		this.add(BlockRegistry.TALL_SWAMP_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SWAMP_GRASS_BLADES));
		this.add(BlockRegistry.MILKWEED.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MILKWEED_FLOWER));
		this.add(BlockRegistry.NETTLE.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.NETTLE_LEAF));
		this.add(BlockRegistry.FLOWERED_NETTLE.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.NETTLE_LEAF));
		this.add(BlockRegistry.PICKERELWEED.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.PICKERELWEED_FLOWER));
		this.add(BlockRegistry.PHRAGMITES.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.PHRAGMITE_STEMS));
		this.add(BlockRegistry.SHOOTS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SHOOT_LEAVES));
		this.add(BlockRegistry.SLUDGECREEP.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SLUDGECREEP_LEAVES));
		this.add(BlockRegistry.TALL_SLUDGECREEP.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SLUDGECREEP_LEAVES));
		this.add(BlockRegistry.SOFT_RUSH.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SOFT_RUSH_LEAVES));
		this.dropSelf(BlockRegistry.SWAMP_REED.get());
		this.add(BlockRegistry.THORNS.get(), block -> LootTable.lootTable().withPool(LootPool.lootPool().add(this.applyExplosionDecay(block, LootItem.lootTableItem(block)
				.when(HAS_SHEARS)
				.apply(Direction.values(), direction -> SetItemCountFunction.setCount(ConstantValue.exactly(1.0F), true)
					.when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(MultifaceBlock.getFaceProperty(direction), true))))
				.apply(SetItemCountFunction.setCount(ConstantValue.exactly(-1.0F), true)))
			.otherwise(this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.THORN_BRANCH).when(HAS_SICKLE))))));
		this.add(BlockRegistry.TALL_CATTAIL.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CATTAIL_HEAD));
		this.add(BlockRegistry.SHORT_SWAMP_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.SWAMP_GRASS_BLADES));
		this.add(BlockRegistry.DEAD_WEEDWOOD_BUSH.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.WEEDWOOD_STICK));
		this.add(BlockRegistry.WEEDWOOD_BUSH.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.WEEDWOOD_STICK))));
		this.add(BlockRegistry.STICK_NESTING_BLOCK.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.WEEDWOOD_STICK))));
		this.add(BlockRegistry.BONE_NESTING_BLOCK.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionDecay(block, LootItem.lootTableItem(ItemRegistry.SLIMY_BONE))));
		this.add(BlockRegistry.CAVE_MOSS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CAVE_MOSS_CLUMP));
		this.dropOther(BlockRegistry.CAVE_MOSS_PLANT.get(), BlockRegistry.CAVE_MOSS);
		this.add(BlockRegistry.CRYPTWEED.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.CRYPTWEED_BLADES));
		this.dropOther(BlockRegistry.CRYPTWEED_PLANT.get(), BlockRegistry.CRYPTWEED);
		this.add(BlockRegistry.STRING_ROOTS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.STRING_ROOT_FIBERS));
		this.dropOther(BlockRegistry.STRING_ROOTS_PLANT.get(), BlockRegistry.STRING_ROOTS);
		this.add(BlockRegistry.PALE_GRASS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.PALE_GRASS_BLADES));
		this.add(BlockRegistry.ROTBULB.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.ROTBULB_STALK));
		this.add(BlockRegistry.MOSS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MOSS_CLUMP));
		this.add(BlockRegistry.DEAD_MOSS.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.MOSS_CLUMP));
		this.add(BlockRegistry.LICHEN.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.LICHEN_CLUMP));
		this.add(BlockRegistry.DEAD_LICHEN.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.LICHEN_CLUMP));
		this.add(BlockRegistry.HANGER.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.HANGER_DROP));
		this.add(BlockRegistry.SEEDED_HANGER.get(), block -> this.createShearsDispatchTable(block, this.applyExplosionCondition(block, LootItem.lootTableItem(ItemRegistry.HANGER_DROP).when(HAS_SICKLE).otherwise(LootItem.lootTableItem(ItemRegistry.MIDDLE_FRUIT_BUSH_SEEDS)))));
		this.add(BlockRegistry.PHEROMONE_INFUSED_WEEDWOOD_BUSH.get(), LootTable.lootTable());
		this.add(BlockRegistry.MOTH_INFESTED_WEEDWOOD_BUSH.get(), LootTable.lootTable());
		this.dropOther(BlockRegistry.GRUB_INFESTED_WEEDWOOD_BUSH.get(), ItemRegistry.SILK_GRUB);
		this.dropOther(BlockRegistry.SILK_COCOONED_WEEDWOOD_BUSH.get(), ItemRegistry.SILK_COCOON);
		this.add(BlockRegistry.DECAY_INFESTED_WEEDWOOD_BUSH.get(), LootTable.lootTable());
		this.add(BlockRegistry.FALLEN_LEAVES.get(), block -> this.createShearsWithSickleDrop(block, ItemRegistry.LEAF));

		//TODO all of these. None of these are properly in the mod yet
		this.add(BlockRegistry.ASPECTRUS_CROP.get(), LootTable.lootTable());
		this.add(BlockRegistry.FUNGUS_CROP.get(), LootTable.lootTable());
		this.add(BlockRegistry.MIDDLE_FRUIT_BUSH.get(), LootTable.lootTable());
		this.add(BlockRegistry.BARNACLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.BETWEENSTONE_PEBBLE.get(), LootTable.lootTable());

		this.add(BlockRegistry.WHITE_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.LIGHT_GRAY_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.GRAY_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.BLACK_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.RED_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.ORANGE_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.YELLOW_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.GREEN_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.LIME_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.BLUE_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.CYAN_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.LIGHT_BLUE_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.PURPLE_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.MAGENTA_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.PINK_PRESENT.get(), LootTable.lootTable());
		this.add(BlockRegistry.BROWN_PRESENT.get(), LootTable.lootTable());

		this.add(BlockRegistry.RED_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.YELLOW_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.GREEN_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.CYAN_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.BLUE_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.LIGHT_BLUE_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.MAGENTA_BAUBLE.get(), LootTable.lootTable());
		this.add(BlockRegistry.PINK_BAUBLE.get(), LootTable.lootTable());
	}

	protected LootTable.Builder createBLLeavesDrops(Block leavesBlock, Block saplingBlock, boolean stick) {
		HolderLookup.RegistryLookup<Enchantment> registrylookup = this.registries.lookupOrThrow(Registries.ENCHANTMENT);
		var builder = this.createSilkTouchOrShearsDispatchTable(leavesBlock, this.applyExplosionCondition(leavesBlock, LootItem.lootTableItem(saplingBlock))
			.when(BonusLevelTableCondition.bonusLevelFlatChance(registrylookup.getOrThrow(Enchantments.FORTUNE), 0.05F, 0.0625F, 0.083333336F, 0.1F)));
		if (stick) {
			builder.withPool(
				LootPool.lootPool()
					.setRolls(ConstantValue.exactly(1.0F))
					.when(HAS_SHEARS.or(this.hasSilkTouch()).invert())
					.add(this.applyExplosionDecay(leavesBlock, LootItem.lootTableItem(ItemRegistry.WEEDWOOD_STICK)
						.apply(SetItemCountFunction.setCount(UniformGenerator.between(1.0F, 2.0F)))))
					.when(BonusLevelTableCondition.bonusLevelFlatChance(registrylookup.getOrThrow(Enchantments.FORTUNE), 0.02F, 0.022222223F, 0.025F, 0.033333335F, 0.1F)));
		}
		return builder;
	}

	protected LootTable.Builder createShearsWithSickleDrop(Block block, ItemLike sickleDrop) {
		return this.createShearsDispatchTable(block, this.applyExplosionCondition(block, LootItem.lootTableItem(sickleDrop).when(HAS_SICKLE)));
	}

	//[VanillaCopy] of a few different methods from BlockLoot. These are here just so we can support modded shears
	@Override
	protected LootTable.Builder createShearsDispatchTable(Block block, LootPoolEntryContainer.Builder<?> builder) {
		return createSelfDropDispatchTable(block, HAS_SHEARS, builder);
	}

	@Override
	protected LootTable.Builder createSilkTouchOrShearsDispatchTable(Block block, LootPoolEntryContainer.Builder<?> builder) {
		return createSelfDropDispatchTable(block, HAS_SHEARS.or(this.hasSilkTouch()), builder);
	}

	@Override
	protected Iterable<Block> getKnownBlocks() {
		return BlockRegistry.BLOCKS.getEntries().stream().map(DeferredHolder::value).collect(Collectors.toList());
	}
}
