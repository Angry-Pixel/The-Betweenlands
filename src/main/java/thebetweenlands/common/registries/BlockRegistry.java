package thebetweenlands.common.registries;

import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;
import net.neoforged.neoforge.registries.DeferredBlock;
import net.neoforged.neoforge.registries.DeferredRegister;
import thebetweenlands.common.TheBetweenlands;
import thebetweenlands.common.block.BarrelBlock;
import thebetweenlands.common.component.entity.circlegem.CircleGemType;
import thebetweenlands.common.block.*;
import thebetweenlands.common.block.MossBlock;
import thebetweenlands.common.block.MudBlock;
import thebetweenlands.common.world.BLTreeGrowers;
import thebetweenlands.util.BLDyeColor;
import thebetweenlands.util.BLWoodTypes;

import java.util.function.Function;
import java.util.function.Supplier;

//TODO improve map colors
//TODO write CTM loader for filtered glass (all variants), filtered glass pane, dug soil,
@SuppressWarnings("unused")
public class BlockRegistry {

	public static final DeferredRegister.Blocks BLOCKS = DeferredRegister.createBlocks(TheBetweenlands.ID);

	public static final DeferredBlock<LiquidBlock> SWAMP_WATER = BLOCKS.register("swamp_water", () -> new LiquidBlock(FluidRegistry.SWAMP_WATER_STILL.get(), BlockBehaviour.Properties.of().mapColor(MapColor.WATER).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY)));
	public static final DeferredBlock<LiquidBlock> STAGNANT_WATER = BLOCKS.register("stagnant_water", () -> new StagnantWaterBlock(FluidRegistry.STAGNANT_WATER_STILL.get(), BlockBehaviour.Properties.of().mapColor(MapColor.WATER).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY)));
	public static final DeferredBlock<LiquidBlock> TAR = BLOCKS.register("tar", () -> new TarBlock(FluidRegistry.TAR_STILL.get(), BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLACK).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY)));
	public static final DeferredBlock<LiquidBlock> RUBBER = BLOCKS.register("rubber", () -> new LiquidBlock(FluidRegistry.RUBBER_STILL.get(), BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).replaceable().noCollission().strength(100.0F).pushReaction(PushReaction.DESTROY).noLootTable().liquid().sound(SoundType.EMPTY)));
	public static final DeferredBlock<Block> DRUID_STONE_1 = register("druid_stone_1", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));
	public static final DeferredBlock<Block> DRUID_STONE_2 = register("druid_stone_2", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));
	public static final DeferredBlock<Block> DRUID_STONE_3 = register("druid_stone_3", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));
	public static final DeferredBlock<Block> DRUID_STONE_4 = register("druid_stone_4", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));
	public static final DeferredBlock<Block> DRUID_STONE_5 = register("druid_stone_5", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));
	public static final DeferredBlock<Block> DRUID_STONE_6 = register("druid_stone_6", () -> new DruidStoneBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F).lightLevel(value -> 12)));

	//terrain
	public static final DeferredBlock<Block> BETWEENLANDS_BEDROCK = register("bedrock", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.BEDROCK)));
	public static final DeferredBlock<Block> BETWEENSTONE = register("betweenstone", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F)));
	public static final DeferredBlock<Block> CORRUPT_BETWEENSTONE = register("corrupt_betweenstone", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F)));
	public static final DeferredBlock<Block> MUD = register("mud", () -> new MudBlock(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.MUD).isValidSpawn((state, level, pos, type) -> true).isRedstoneConductor((state, level, pos) -> true).isViewBlocking((state, level, pos) -> true).isSuffocating((state, level, pos) -> true)));
	public static final DeferredBlock<Block> PEAT = register("peat", () -> new PeatBlock(BlockBehaviour.Properties.of().mapColor(MapColor.DIRT).strength(0.5F).sound(SoundType.PACKED_MUD)));
	public static final DeferredBlock<Block> SMOULDERING_PEAT = register("smouldering_peat", () -> new SmoulderingPeatBlock(BlockBehaviour.Properties.ofFullCopy(PEAT.get())));
	public static final DeferredBlock<Block> SLUDGY_DIRT = register("sludgy_dirt", () -> new SludgyDirtBlock(BlockBehaviour.Properties.of().strength(0.5F).randomTicks().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> SPREADING_SLUDGY_DIRT = BLOCKS.register("spreading_sludgy_dirt", () -> new SpreadingSludgyDirtBlock(BlockBehaviour.Properties.of().lootFrom(SLUDGY_DIRT).strength(0.5F).randomTicks().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> SLIMY_DIRT = register("slimy_dirt", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> SLIMY_GRASS = register("slimy_grass", () -> new SlimyGrassBlock(BlockBehaviour.Properties.of().strength(0.5F).randomTicks().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> CRAGROCK = register("cragrock", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F)));
	public static final DeferredBlock<Block> MOSSY_CRAGROCK_BOTTOM = register("mossy_cragrock_bottom", () -> new MossyCragrockBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).randomTicks().sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_CRAGROCK_TOP = register("mossy_cragrock_top", () -> new MossyCragrockBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).randomTicks().sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PITSTONE = register("pitstone", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.5F, 10.0F)));
	public static final DeferredBlock<Block> LIMESTONE = register("limestone", () -> new Block(BlockBehaviour.Properties.ofFullCopy(Blocks.STONE).strength(1.2F, 8.0F)));
	public static final DeferredBlock<Block> SWAMP_DIRT = register("swamp_dirt", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.ROOTED_DIRT)));
	public static final DeferredBlock<Block> COARSE_SWAMP_DIRT = register("coarse_swamp_dirt", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.ROOTED_DIRT)));
	public static final DeferredBlock<Block> SWAMP_GRASS = register("swamp_grass", () -> new SwampGrassBlock(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> WISP = register("wisp", () -> new WispBlock(BlockBehaviour.Properties.of().instabreak().noCollission().noOcclusion().sound(SoundType.STONE)));
	public static final DeferredBlock<Block> OCTINE_ORE = register("octine_ore", () -> new OctineOreBlock(ConstantInt.of(0), BlockBehaviour.Properties.of().lightLevel(value -> 13).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> VALONITE_ORE = register("valonite_ore", () -> new DropExperienceBlock(UniformInt.of(5, 12), BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SULFUR_ORE = register("sulfur_ore", () -> new SulfurOreBlock(UniformInt.of(0, 2), BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLIMY_BONE_ORE = register("slimy_bone_ore", () -> new DropExperienceBlock(UniformInt.of(1, 4), BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SCABYST_ORE = register("scabyst_ore", () -> new DropExperienceBlock(UniformInt.of(4, 10), BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SYRMORITE_ORE = register("syrmorite_ore", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> AQUA_MIDDLE_GEM_ORE = register("aqua_middle_gem_ore", () -> new CircleGemBlock(CircleGemType.AQUA, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRIMSON_MIDDLE_GEM_ORE = register("crimson_middle_gem_ore", () -> new CircleGemBlock(CircleGemType.CRIMSON, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GREEN_MIDDLE_GEM_ORE = register("green_middle_gem_ore", () -> new CircleGemBlock(CircleGemType.GREEN, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	//TODO stalactites
	public static final DeferredBlock<Block> SILT = register("silt", () -> new SiltBlock(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.SAND)));
	public static final DeferredBlock<Block> FILTERED_SILT = register("filtered_silt", () -> new SiltBlock(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.SAND)));
	public static final DeferredBlock<Block> DEAD_GRASS = register("dead_grass", () -> new DeadGrassBlock(BlockBehaviour.Properties.of().strength(0.5F).randomTicks().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SOLID_TAR = register("solid_tar", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PUDDLE = BLOCKS.register("puddle", () -> new PuddleBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().randomTicks().strength(0.1F)));
	public static final DeferredBlock<Block> PEARL_BLOCK = register("pearl_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.2F, 8.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> ANCIENT_REMNANT_BLOCK = register("ancient_remnant_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.2F, 8.0F).sound(SoundType.STONE)));

	//trees
	public static final DeferredBlock<Block> WEEDWOOD_LOG = register("weedwood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> WEEDWOOD_BARK = register("weedwood_bark", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> WEEDWOOD = register("weedwood", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> ROTTEN_BARK = register("rotten_bark", () -> new RottenLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> SPREADING_ROTTEN_BARK = BLOCKS.register("spreading_rotten_bark", () -> new SpreadingRottenLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).lootFrom(ROTTEN_BARK).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> RUBBER_LOG = register("rubber_log", () -> new RubberLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> HEARTHGROVE_LOG = register("hearthgrove_log", () -> new HearthgroveLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> HEARTHGROVE_BARK = register("hearthgrove_bark", () -> new HearthgroveLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> TARRED_HEARTHGROVE_LOG = register("tarred_hearthgrove_log", () -> new TarredHearthgroveLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> TARRED_HEARTHGROVE_BARK = register("tarred_hearthgrove_bark", () -> new TarredHearthgroveLogBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> NIBBLETWIG_LOG = register("nibbletwig_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> NIBBLETWIG_BARK = register("nibbletwig_bark", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> SPIRIT_TREE_LOG = register("spirit_tree_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> SPIRIT_TREE_BARK = register("spirit_tree_bark", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> SAP_LOG = register("sap_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> SAP_BARK = register("sap_bark", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> WEEDWOOD_SAPLING = register("weedwood_sapling", () -> new SaplingBlock(BLTreeGrowers.WEEDWOOD, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SAP_SAPLING = register("sap_sapling", () -> new SaplingBlock(BLTreeGrowers.SAP, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> RUBBER_SAPLING = register("rubber_sapling", () -> new SaplingBlock(BLTreeGrowers.RUBBER, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> HEARTHGROVE_SAPLING = register("hearthgrove_sapling", () -> new SaplingBlock(BLTreeGrowers.HEARTHGROVE, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> NIBBLETWIG_SAPLING = register("nibbletwig_sapling", () -> new SaplingBlock(BLTreeGrowers.NIBBLETWIG, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SPIRIT_TREE_SAPLING = register("spirit_tree_sapling", () -> new SaplingBlock(BLTreeGrowers.SPIRIT_TREE, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS).pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> WEEDWOOD_LEAVES = register("weedwood_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> SAP_LEAVES = register("sap_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> RUBBER_TREE_LEAVES = register("rubber_tree_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> HEARTHGROVE_LEAVES = register("hearthgrove_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> NIBBLETWIG_LEAVES = register("nibbletwig_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> TOP_SPIRIT_TREE_LEAVES = register("top_spirit_tree_leaves", () -> new SpiritTreeLeavesBlock(SpiritTreeLeavesBlock.LeafType.TOP, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> MIDDLE_SPIRIT_TREE_LEAVES = register("middle_spirit_tree_leaves", () -> new SpiritTreeLeavesBlock(SpiritTreeLeavesBlock.LeafType.MIDDLE, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> BOTTOM_SPIRIT_TREE_LEAVES = register("bottom_spirit_tree_leaves", () -> new SpiritTreeLeavesBlock(SpiritTreeLeavesBlock.LeafType.BOTTOM, BlockBehaviour.Properties.of().ignitedByLava().mapColor(MapColor.PLANT).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn((state, level, pos, value) -> false).isSuffocating((state, level, pos) -> false).isViewBlocking((state, level, pos) -> false).ignitedByLava().pushReaction(PushReaction.DESTROY).isRedstoneConductor((state, level, pos) -> false)));

	public static final DeferredBlock<Block> WEEDWOOD_PLANKS = register("weedwood_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> RUBBER_TREE_PLANKS = register("rubber_tree_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(1.75F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> GIANT_ROOT_PLANKS = register("giant_root_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(1.75F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> HEARTHGROVE_PLANKS = register("hearthgrove_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(1.75F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> NIBBLETWIG_PLANKS = register("nibbletwig_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(1.75F, 5.0F).sound(SoundType.WOOD)));

	public static final DeferredBlock<Block> ANGRY_BETWEENSTONE = register("angry_betweenstone", () -> new Block(BlockBehaviour.Properties.of().lightLevel(value -> 12).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BETWEENSTONE_BRICKS = register("betweenstone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MIRAGE_BETWEENSTONE_BRICKS = register("mirage_betweenstone_bricks", () -> new MirageBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BETWEENSTONE_TILES = register("betweenstone_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_BETWEENSTONE = register("chiseled_betweenstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_CRAGROCK = register("chiseled_cragrock", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_CHISELED_CRAGROCK = register("cracked_chiseled_cragrock", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_CHISELED_CRAGROCK = register("mossy_chiseled_cragrock", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_LIMESTONE = register("chiseled_limestone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_PITSTONE = register("chiseled_pitstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_SCABYST_1 = register("chiseled_scabyst_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_SCABYST_2 = register("chiseled_scabyst_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CHISELED_SCABYST_3 = register("chiseled_scabyst_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DOTTED_SCABYST_PITSTONE = register("dotted_scabyst_pitstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> HORIZONTAL_SCABYST_PITSTONE = register("horizontal_scabyst_pitstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SCABYST_BRICKS = register("scabyst_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_BETWEENSTONE_BRICKS = register("cracked_betweenstone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_BETWEENSTONE_TILES = register("cracked_betweenstone_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_LIMESTONE_BRICKS = register("cracked_limestone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRAGROCK_BRICKS = register("cragrock_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_CRAGROCK_BRICKS = register("cracked_cragrock_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_CRAGROCK_BRICKS = register("mossy_cragrock_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRAGROCK_TILES = register("cragrock_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_CRAGROCK_TILES = register("cragrock_cragrock_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_CRAGROCK_TILES = register("mossy_cragrock_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GLOWING_BETWEENSTONE_TILE = register("glowing_betweenstone_tile", () -> new Block(BlockBehaviour.Properties.of().lightLevel(value -> 13).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> INACTIVE_GLOWING_SMOOTH_CRAGROCK = register("inactive_glowing_smooth_cragrock", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GLOWING_SMOOTH_CRAGROCK = register("glowing_smooth_cragrock", () -> new Block(BlockBehaviour.Properties.of().lightLevel(value -> 13).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> LIMESTONE_BRICKS = register("limestone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> LIMESTONE_TILES = register("limestone_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_BETWEENSTONE_BRICKS = register("mossy_betweenstone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_BETWEENSTONE_TILES = register("mossy_betweenstone_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_LIMESTONE_BRICKS = register("mossy_limestone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MOSSY_SMOOTH_BETWEENSTONE = register("mossy_smooth_betweenstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MUD_BRICKS = register("mud_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MUD_BRICK_SHINGLES = register("mud_brick_shingles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> RUBBER_BLOCK = register("rubber_block", () -> new RubberBlock(BlockBehaviour.Properties.of().strength(1.0F).sound(SoundType.SLIME_BLOCK)));
	public static final DeferredBlock<Block> PITSTONE_BRICKS = register("pitstone_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PITSTONE_TILES = register("pitstone_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> POLISHED_LIMESTONE = register("polished_limestone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SMOOTH_BETWEENSTONE = register("smooth_betweenstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SMOOTH_CRAGROCK = register("smooth_cragrock", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> OCTINE_BLOCK = register("octine_block", () -> new OctineBlock(BlockBehaviour.Properties.of().lightLevel(value -> 13).strength(1.5F, 10.0F).sound(SoundType.METAL)));
	public static final DeferredBlock<Block> SYRMORITE_BLOCK = register("syrmorite_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.METAL)));
	public static final DeferredBlock<Block> VALONITE_BLOCK = register("valonite_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.METAL)));
	public static final DeferredBlock<Block> SCABYST_BLOCK = register("scabyst_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEAK_BETWEENSTONE_TILES = register("weak_betweenstone_tiles", () -> new CollapsingBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEAK_POLISHED_LIMESTONE = register("weak_polished_limestone", () -> new CollapsingBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEAK_MOSSY_BETWEENSTONE_TILES = register("weak_mossy_betweenstone_tiles", () -> new CollapsingBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEAK_SMOOTH_CRAGROCK = register("weak_smooth_cragrock", () -> new CollapsingBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GREEN_DENTROTHYST = register("green_dentrothyst", () -> new StainedGlassBlock(DyeColor.GREEN, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> ORANGE_DENTROTHYST = register("orange_dentrothyst", () -> new StainedGlassBlock(DyeColor.ORANGE, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> LOOT_POT_1 = register("loot_pot_1", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> LOOT_POT_2 = register("loot_pot_2", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> LOOT_POT_3 = register("loot_pot_3", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	//TODO spawner
	public static final DeferredBlock<Block> TEMPLE_PILLAR = register("temple_pillar", () -> new TemplePillarBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BETWEENSTONE_PILLAR = register("betweenstone_pillar", () -> new TemplePillarBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PITSTONE_PILLAR = register("pitstone_pillar", () -> new TemplePillarBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> LIMESTONE_PILLAR = register("limestone_pillar", () -> new TemplePillarBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRAGROCK_PILLAR = register("cragrock_pillar", () -> new TemplePillarBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	//TODO tar beast spawner
	public static final DeferredBlock<Block> TAR_LOOT_POT_1 = register("tar_loot_pot_1", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> TAR_LOOT_POT_2 = register("tar_loot_pot_2", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> TAR_LOOT_POT_3 = register("tar_loot_pot_3", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> CRAGROCK_STAIRS = register("cragrock_stairs", () -> new StairBlock(CRAGROCK.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(CRAGROCK.get())));
	public static final DeferredBlock<Block> PITSTONE_STAIRS = register("pitstone_stairs", () -> new StairBlock(PITSTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(PITSTONE.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_STAIRS = register("betweenstone_stairs", () -> new StairBlock(BETWEENSTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_BRICK_STAIRS = register("betweenstone_brick_stairs", () -> new StairBlock(BETWEENSTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MUD_BRICK_STAIRS = register("mud_brick_stairs", () -> new StairBlock(MUD_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICKS.get())));
	public static final DeferredBlock<Block> CRAGROCK_BRICK_STAIRS = register("cragrock_brick_stairs", () -> new StairBlock(CRAGROCK_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(CRAGROCK_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_BRICK_STAIRS = register("limestone_brick_stairs", () -> new StairBlock(LIMESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(LIMESTONE_BRICKS.get())));
	public static final DeferredBlock<Block> PITSTONE_BRICK_STAIRS = register("pitstone_brick_stairs", () -> new StairBlock(PITSTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(PITSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_STAIRS = register("limestone_stairs", () -> new StairBlock(LIMESTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(LIMESTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_BETWEENSTONE_STAIRS = register("smooth_betweenstone_stairs", () -> new StairBlock(SMOOTH_BETWEENSTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_CRAGROCK_STAIRS = register("smooth_cragrock_stairs", () -> new StairBlock(SMOOTH_CRAGROCK.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SMOOTH_CRAGROCK.get())));
	public static final DeferredBlock<Block> POLISHED_LIMESTONE_STAIRS = register("polished_limestone_stairs", () -> new StairBlock(POLISHED_LIMESTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(POLISHED_LIMESTONE.get())));
	public static final DeferredBlock<Block> MOSSY_BETWEENSTONE_BRICK_STAIRS = register("mossy_betweenstone_brick_stairs", () -> new StairBlock(MOSSY_BETWEENSTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MOSSY_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MOSSY_SMOOTH_BETWEENSTONE_STAIRS = register("mossy_smooth_betweenstone_stairs", () -> new StairBlock(MOSSY_SMOOTH_BETWEENSTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MOSSY_SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> CRACKED_BETWEENSTONE_BRICK_STAIRS = register("cracked_betweenstone_brick_stairs", () -> new StairBlock(CRACKED_BETWEENSTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(CRACKED_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> SCABYST_BRICK_STAIRS = register("scabyst_brick_stairs", () -> new StairBlock(SCABYST_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SCABYST_BRICKS.get())));
	public static final DeferredBlock<Block> SULFUR_BLOCK = register("sulfur_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> TEMPLE_BRICKS = register("temple_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SMOOTH_PITSTONE = register("smooth_pitstone", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MIRE_CORAL_BLOCK = register("mire_coral_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DEEP_WATER_CORAL_BLOCK = register("deep_water_coral_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLIMY_BONE_BLOCK = register("slimy_bone_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> AQUA_MIDDLE_GEM_BLOCK = register("aqua_middle_gem_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRIMSON_MIDDLE_GEM_BLOCK = register("crimson_middle_gem_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GREEN_MIDDLE_GEM_BLOCK = register("green_middle_gem_block", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> COMPOST_BLOCK = register("compost_block", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.AZALEA)));
	public static final DeferredBlock<Block> POLISHED_GREEN_DENTROTHYST = register("polished_green_dentrothyst", () -> new StainedGlassBlock(DyeColor.GREEN, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> POLISHED_ORANGE_DENTROTHYST = register("polished_orange_dentrothyst", () -> new StainedGlassBlock(DyeColor.ORANGE, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> SILT_GLASS = register("silt_glass", () -> new TransparentBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> SILT_GLASS_PANE = register("silt_glass_pane", () -> new IronBarsBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> LATTICE = register("lattice", () -> new IronBarsBlock(BlockBehaviour.Properties.of().strength(1.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> FINE_LATTICE = register("fine_lattice", () -> new IronBarsBlock(BlockBehaviour.Properties.of().strength(1.5F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> FILTERED_SILT_GLASS = register("filtered_silt_glass", () -> new TransparentBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> FILTERED_SILT_GLASS_PANE = register("filtered_silt_glass_pane", () -> new ThickerGlassPaneBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> POLISHED_GREEN_DENTROTHYST_PANE = register("polished_green_dentrothyst_pane", () -> new StainedGlassPaneBlock(DyeColor.GREEN, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> POLISHED_ORANGE_DENTROTHYST_PANE = register("polished_orange_dentrothyst_pane", () -> new StainedGlassPaneBlock(DyeColor.ORANGE, BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> CONNECTED_AMATE_PAPER_PANE = register("connected_amate_paper_pane", () -> new ThickerGlassPaneBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> SQUARED_AMATE_PAPER_PANE = register("squared_amate_paper_pane", () -> new ThickerGlassPaneBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> ROUNDED_AMATE_PAPER_PANE = register("rounded_amate_paper_pane", () -> new ThickerGlassPaneBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> SMOOTH_PITSTONE_STAIRS = register("smooth_pitstone_stairs", () -> new StairBlock(SMOOTH_PITSTONE.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SMOOTH_PITSTONE.get())));
	public static final DeferredBlock<Block> SOLID_TAR_STAIRS = register("solid_tar_stairs", () -> new StairBlock(SOLID_TAR.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SOLID_TAR.get())));
	public static final DeferredBlock<Block> TEMPLE_BRICK_STAIRS = register("temple_brick_stairs", () -> new StairBlock(TEMPLE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(TEMPLE_BRICKS.get())));
	public static final DeferredBlock<Block> SPIKE_TRAP = register("spike_trap", () -> new SpikeTrapBlock(BlockBehaviour.Properties.of().strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEEDWOOD_STAIRS = register("weedwood_stairs", () -> new StairBlock(WEEDWOOD_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(WEEDWOOD_PLANKS.get())));
	public static final DeferredBlock<Block> RUBBER_TREE_STAIRS = register("rubber_tree_stairs", () -> new StairBlock(RUBBER_TREE_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(RUBBER_TREE_PLANKS.get())));
	public static final DeferredBlock<Block> GIANT_ROOT_STAIRS = register("giant_stairs", () -> new StairBlock(GIANT_ROOT_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(GIANT_ROOT_PLANKS.get())));
	public static final DeferredBlock<Block> HEARTHGROVE_STAIRS = register("hearthgrove_stairs", () -> new StairBlock(HEARTHGROVE_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(HEARTHGROVE_PLANKS.get())));
	public static final DeferredBlock<Block> NIBBLETWIG_STAIRS = register("nibbletwig_stairs", () -> new StairBlock(NIBBLETWIG_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(NIBBLETWIG_PLANKS.get())));
	public static final DeferredBlock<Block> POSSESSED_BLOCK = register("possessed_block", () -> new PossessedBlock(BlockBehaviour.Properties.of().strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> ITEM_CAGE = register("item_cage", () -> new ItemCageBlock(BlockBehaviour.Properties.of().lightLevel(value -> 12).noOcclusion().strength(10.0F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> ITEM_SHELF = register("item_shelf", () -> new ItemShelfBlock(BlockBehaviour.Properties.of().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> THATCH = register("thatch", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.AZALEA)));
	public static final DeferredBlock<Block> CRAGROCK_SLAB = register("cragrock_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(CRAGROCK.get())));
	public static final DeferredBlock<Block> PITSTONE_SLAB = register("pitstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(PITSTONE.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_SLAB = register("betweenstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_PITSTONE_SLAB = register("smooth_pitstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_PITSTONE.get())));
	public static final DeferredBlock<Block> SOLID_TAR_SLAB = register("solid_tar_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SOLID_TAR.get())));
	public static final DeferredBlock<Block> TEMPLE_BRICK_SLAB = register("temple_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(TEMPLE_BRICKS.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_BRICK_SLAB = register("betweenstone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MUD_BRICK_SLAB = register("mud_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICKS.get())));
	public static final DeferredBlock<Block> CRAGROCK_BRICK_SLAB = register("cragrock_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(CRAGROCK_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_BRICK_SLAB = register("limestone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(LIMESTONE_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_SLAB = register("limestone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(LIMESTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_BETWEENSTONE_SLAB = register("smooth_betweenstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_CRAGROCK_SLAB = register("smooth_cragrock_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_CRAGROCK.get())));
	public static final DeferredBlock<Block> POLISHED_LIMESTONE_SLAB = register("polished_limestone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(POLISHED_LIMESTONE.get())));
	public static final DeferredBlock<Block> PITSTONE_BRICK_SLAB = register("pitstone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(PITSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MOSSY_BETWEENSTONE_BRICK_SLAB = register("mossy_betweenstone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MOSSY_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MOSSY_SMOOTH_BETWEENSTONE_SLAB = register("mossy_smooth_betweenstone_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MOSSY_SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> CRACKED_BETWEENSTONE_BRICK_SLAB = register("cracked_betweenstone_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(CRACKED_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> WEEDWOOD_SLAB = register("weedwood_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(WEEDWOOD_PLANKS.get())));
	public static final DeferredBlock<Block> RUBBER_TREE_SLAB = register("rubber_tree_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(RUBBER_TREE_PLANKS.get())));
	public static final DeferredBlock<Block> GIANT_ROOT_SLAB = register("giant_root_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(GIANT_ROOT_PLANKS.get())));
	public static final DeferredBlock<Block> HEARTHGROVE_SLAB = register("hearthgrove_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(HEARTHGROVE_PLANKS.get())));
	public static final DeferredBlock<Block> NIBBLETWIG_SLAB = register("nibbletwig_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(NIBBLETWIG_PLANKS.get())));
	public static final DeferredBlock<Block> MUD_BRICK_SHINGLE_SLAB = register("mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> MUD_BRICK_SHINGLE_STAIRS = register("mud_brick_shingle_stairs", () -> new StairBlock(MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> MUD_BRICK_SHINGLE_WALL = register("mud_brick_shingle_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> DULL_LAVENDER_FILTERED_SILT_GLASS_BLOCK = register("dull_lavender_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.DULL_LAVENDER, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> MAROON_FILTERED_SILT_GLASS_BLOCK = register("maroon_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.MAROON, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> SHADOW_GREEN_FILTERED_SILT_GLASS_BLOCK = register("shadow_green_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SHADOW_GREEN, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> CAMELOT_MAGENTA_FILTERED_SILT_GLASS_BLOCK = register("camelot_magenta_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CAMELOT_MAGENTA, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> SAFFRON_FILTERED_SILT_GLASS_BLOCK = register("saffron_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SAFFRON, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> CARIBBEAN_GREEN_FILTERED_SILT_GLASS_BLOCK = register("caribbean_green_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CARIBBEAN_GREEN, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> VIVID_TANGERINE_FILTERED_SILT_GLASS_BLOCK = register("vivid_tangerine_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.VIVID_TANGERINE, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> CHAMPAGNE_FILTERED_SILT_GLASS_BLOCK = register("champagne_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CHAMPAGNE, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> RAISIN_BLACK_FILTERED_SILT_GLASS_BLOCK = register("raisin_black_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.RAISIN_BLACK, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> SUSHI_GREEN_FILTERED_SILT_GLASS_BLOCK = register("sushi_green_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SUSHI_GREEN, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> ELM_CYAN_FILTERED_SILT_GLASS_BLOCK = register("elm_cyan_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.ELM_CYAN, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> CADMIUM_GREEN_FILTERED_SILT_GLASS_BLOCK = register("cadmium_green_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CADMIUM_GREEN, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> LAVENDER_BLUE_FILTERED_SILT_GLASS_BLOCK = register("lavender_blue_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.LAVENDER_BLUE, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> BROWN_RUST_FILTERED_SILT_GLASS_BLOCK = register("brown_rust_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.BROWN_RUST, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> MIDNIGHT_PURPLE_FILTERED_SILT_GLASS_BLOCK = register("midnight_purple_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.MIDNIGHT_PURPLE, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> PEWTER_GREY_FILTERED_SILT_GLASS_BLOCK = register("pewter_grey_filtered_silt_glass_block", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.PEWTER_GREY, BlockBehaviour.Properties.ofFullCopy(FILTERED_SILT_GLASS.get())));
	public static final DeferredBlock<Block> DULL_LAVENDER_MUD_BRICK_SHINGLES = register("dull_lavender_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.DULL_LAVENDER, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> MAROON_MUD_BRICK_SHINGLES = register("maroon_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.MAROON, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> SHADOW_GREEN_MUD_BRICK_SHINGLES = register("shadow_green_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SHADOW_GREEN, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> CAMELOT_MAGENTA_MUD_BRICK_SHINGLES = register("camelot_magenta_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CAMELOT_MAGENTA, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> SAFFRON_MUD_BRICK_SHINGLES = register("saffron_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SAFFRON, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> CARIBBEAN_GREEN_MUD_BRICK_SHINGLES = register("caribbean_green_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CARIBBEAN_GREEN, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> VIVID_TANGERINE_MUD_BRICK_SHINGLES = register("vivid_tangerine_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.VIVID_TANGERINE, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> CHAMPAGNE_MUD_BRICK_SHINGLES = register("champagne_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CHAMPAGNE, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> RAISIN_BLACK_MUD_BRICK_SHINGLES = register("raisin_black_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.RAISIN_BLACK, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> SUSHI_GREEN_MUD_BRICK_SHINGLES = register("sushi_green_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.SUSHI_GREEN, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> ELM_CYAN_MUD_BRICK_SHINGLES = register("elm_cyan_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.ELM_CYAN, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> CADMIUM_GREEN_MUD_BRICK_SHINGLES = register("cadmium_green_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.CADMIUM_GREEN, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> LAVENDER_BLUE_MUD_BRICK_SHINGLES = register("lavender_blue_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.LAVENDER_BLUE, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> BROWN_RUST_MUD_BRICK_SHINGLES = register("brown_rust_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.BROWN_RUST, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> MIDNIGHT_PURPLE_MUD_BRICK_SHINGLES = register("midnight_purple_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.MIDNIGHT_PURPLE, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> PEWTER_GREY_MUD_BRICK_SHINGLES = register("pewter_grey_mud_brick_shingles", () -> new StainedFilteredSiltGlassBlock(BLDyeColor.PEWTER_GREY, BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLES.get())));
	public static final DeferredBlock<Block> DULL_LAVENDER_MUD_BRICK_SHINGLE_SLAB = register("dull_lavender_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> MAROON_MUD_BRICK_SHINGLE_SLAB = register("maroon_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> SHADOW_GREEN_MUD_BRICK_SHINGLE_SLAB = register("shadow_green_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_SLAB = register("camelot_magenta_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> SAFFRON_MUD_BRICK_SHINGLE_SLAB = register("saffron_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_SLAB = register("caribbean_green_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> VIVID_TANGERINE_MUD_BRICK_SHINGLE_SLAB = register("vivid_tangerine_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> CHAMPAGNE_MUD_BRICK_SHINGLE_SLAB = register("champagne_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> RAISIN_BLACK_MUD_BRICK_SHINGLE_SLAB = register("raisin_black_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> SUSHI_GREEN_MUD_BRICK_SHINGLE_SLAB = register("sushi_green_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> ELM_CYAN_MUD_BRICK_SHINGLE_SLAB = register("elm_cyan_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> CADMIUM_GREEN_MUD_BRICK_SHINGLE_SLAB = register("cadmium_green_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> LAVENDER_BLUE_MUD_BRICK_SHINGLE_SLAB = register("lavender_blue_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> BROWN_RUST_MUD_BRICK_SHINGLE_SLAB = register("brown_rust_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_SLAB = register("midnight_purple_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> PEWTER_GREY_MUD_BRICK_SHINGLE_SLAB = register("pewter_grey_mud_brick_shingle_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_SLAB.get())));
	public static final DeferredBlock<Block> DULL_LAVENDER_MUD_BRICK_SHINGLE_STAIRS = register("dull_lavender_mud_brick_shingle_stairs", () -> new StairBlock(DULL_LAVENDER_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> MAROON_MUD_BRICK_SHINGLE_STAIRS = register("maroon_mud_brick_shingle_stairs", () -> new StairBlock(MAROON_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> SHADOW_GREEN_MUD_BRICK_SHINGLE_STAIRS = register("shadow_green_mud_brick_shingle_stairs", () -> new StairBlock(SHADOW_GREEN_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> CAMELOT_MAGENTA_MUD_BRICK_SHINGLE_STAIRS = register("camelot_magenta_mud_brick_shingle_stairs", () -> new StairBlock(CAMELOT_MAGENTA_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> SAFFRON_MUD_BRICK_SHINGLE_STAIRS = register("saffron_mud_brick_shingle_stairs", () -> new StairBlock(SAFFRON_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> CARIBBEAN_GREEN_MUD_BRICK_SHINGLE_STAIRS = register("caribbean_green_mud_brick_shingle_stairs", () -> new StairBlock(CARIBBEAN_GREEN_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> VIVID_TANGERINE_MUD_BRICK_SHINGLE_STAIRS = register("vivid_tangerine_mud_brick_shingle_stairs", () -> new StairBlock(VIVID_TANGERINE_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> CHAMPAGNE_MUD_BRICK_SHINGLE_STAIRS = register("champagne_mud_brick_shingle_stairs", () -> new StairBlock(CHAMPAGNE_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> RAISIN_BLACK_MUD_BRICK_SHINGLE_STAIRS = register("raisin_black_mud_brick_shingle_stairs", () -> new StairBlock(RAISIN_BLACK_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> SUSHI_GREEN_MUD_BRICK_SHINGLE_STAIRS = register("sushi_green_mud_brick_shingle_stairs", () -> new StairBlock(SUSHI_GREEN_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> ELM_CYAN_MUD_BRICK_SHINGLE_STAIRS = register("elm_cyan_mud_brick_shingle_stairs", () -> new StairBlock(ELM_CYAN_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> CADMIUM_GREEN_MUD_BRICK_SHINGLE_STAIRS = register("cadmium_green_mud_brick_shingle_stairs", () -> new StairBlock(CADMIUM_GREEN_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> LAVENDER_BLUE_MUD_BRICK_SHINGLE_STAIRS = register("lavender_blue_mud_brick_shingle_stairs", () -> new StairBlock(LAVENDER_BLUE_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> BROWN_RUST_MUD_BRICK_SHINGLE_STAIRS = register("brown_rust_mud_brick_shingle_stairs", () -> new StairBlock(BROWN_RUST_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> MIDNIGHT_PURPLE_MUD_BRICK_SHINGLE_STAIRS = register("midnight_purple_mud_brick_shingle_stairs", () -> new StairBlock(MIDNIGHT_PURPLE_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> PEWTER_GREY_MUD_BRICK_SHINGLE_STAIRS = register("pewter_grey_mud_brick_shingle_stairs", () -> new StairBlock(PEWTER_GREY_MUD_BRICK_SHINGLES.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(MUD_BRICK_SHINGLE_STAIRS.get())));
	public static final DeferredBlock<Block> THATCH_SLAB = register("thatch_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(THATCH.get())));
	public static final DeferredBlock<Block> SCABYST_BRICK_SLAB = register("scabyst_brick_slab", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SCABYST_BRICKS.get())));
	public static final DeferredBlock<Block> PITSTONE_WALL = register("pitstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(PITSTONE.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_WALL = register("betweenstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE.get())));
	public static final DeferredBlock<Block> SOLID_TAR_WALL = register("solid_tar_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(SOLID_TAR.get())));
	public static final DeferredBlock<Block> TEMPLE_BRICK_WALL = register("temple_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(TEMPLE_BRICKS.get())));
	public static final DeferredBlock<Block> SMOOTH_PITSTONE_WALL = register("smooth_pitstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_PITSTONE.get())));
	public static final DeferredBlock<Block> BETWEENSTONE_BRICK_WALL = register("betweenstone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MUD_BRICK_WALL = register("mud_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(MUD_BRICKS.get())));
	public static final DeferredBlock<Block> CRAGROCK_WALL = register("cragrock_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(CRAGROCK.get())));
	public static final DeferredBlock<Block> CRAGROCK_BRICK_WALL = register("cragrock_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(CRAGROCK_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_BRICK_WALL = register("limestone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(LIMESTONE_BRICKS.get())));
	public static final DeferredBlock<Block> LIMESTONE_WALL = register("limestone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(LIMESTONE.get())));
	public static final DeferredBlock<Block> POLISHED_LIMESTONE_WALL = register("polished_limestone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(POLISHED_LIMESTONE.get())));
	public static final DeferredBlock<Block> PITSTONE_BRICK_WALL = register("pitstone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(PITSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> SMOOTH_BETWEENSTONE_WALL = register("smooth_betweenstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> SMOOTH_CRAGROCK_WALL = register("smooth_cragrock_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(SMOOTH_CRAGROCK.get())));
	public static final DeferredBlock<Block> MOSSY_BETWEENSTONE_BRICK_WALL = register("mossy_betweenstone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(MOSSY_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> MOSSY_SMOOTH_BETWEENSTONE_WALL = register("mossy_smooth_betweenstone_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(MOSSY_SMOOTH_BETWEENSTONE.get())));
	public static final DeferredBlock<Block> CRACKED_BETWEENSTONE_BRICK_WALL = register("cracked_betweenstone_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(CRACKED_BETWEENSTONE_BRICKS.get())));
	public static final DeferredBlock<Block> SCABYST_BRICK_WALL = register("scabyst_brick_wall", () -> new WallBlock(BlockBehaviour.Properties.ofFullCopy(SCABYST_BRICKS.get())));
	public static final DeferredBlock<Block> WEEDWOOD_FENCE = register("weedwood_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_LOG_FENCE = register("weedwood_log_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> RUBBER_TREE_FENCE = register("rubber_tree_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> GIANT_ROOT_FENCE = register("giant_root_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> HEARTHGROVE_FENCE = register("hearthgrove_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> NIBBLETWIG_FENCE = register("nibbletwig_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_FENCE_GATE = register("weedwood_fence_gate", () -> new FenceGateBlock(BLWoodTypes.WEEDWOOD_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_LOG_FENCE_GATE = register("weedwood_log_fence_gate", () -> new FenceGateBlock(BLWoodTypes.WEEDWOOD_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> RUBBER_TREE_FENCE_GATE = register("rubber_tree_fence_gate", () -> new FenceGateBlock(BLWoodTypes.RUBBER_TREE_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> GIANT_ROOT_FENCE_GATE = register("giant_root_fence_gate", () -> new FenceGateBlock(BLWoodTypes.GIANT_ROOT_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> HEARTHGROVE_FENCE_GATE = register("hearthgrove_fence_gate", () -> new FenceGateBlock(BLWoodTypes.HEARTHGROVE_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> NIBBLETWIG_FENCE_GATE = register("nibbletwig_fence_gate", () -> new FenceGateBlock(BLWoodTypes.NIBBLETWIG_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_PRESSURE_PLATE = register("weedwood_pressure_plate", () -> new PressurePlateBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> BETWEENSTONE_PRESSURE_PLATE = register("betweenstone_pressure_plate", () -> new PressurePlateBlock(BLWoodTypes.BETWEENSTONE, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SYRMORITE_PRESSURE_PLATE = register("syrmorite_pressure_plate", () -> new SyrmoritePressurePlateBlock(BLWoodTypes.SYRMORITE, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.METAL)));
	public static final DeferredBlock<Block> WEEDWOOD_BUTTON = register("weedwood_button", () -> new ButtonBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, 30, BlockBehaviour.Properties.of().ignitedByLava().strength(0.5F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> BETWEENSTONE_BUTTON = register("betweenstone_button", () -> new ButtonBlock(BLWoodTypes.BETWEENSTONE, 20, BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEEDWOOD_LADDER = register("weedwood_ladder", () -> new LadderBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(0.4F).sound(SoundType.LADDER)));
	public static final DeferredBlock<Block> WEEDWOOD_LEVER = register("weedwood_lever", () -> new LeverBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(0.5F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> MUD_LOOT_POT_1 = register("mud_loot_pot_1", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> MUD_LOOT_POT_2 = register("mud_loot_pot_2", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> MUD_LOOT_POT_3 = register("mud_loot_pot_3", () -> new LootPotBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> WORM_PILLAR = register("worm_pillar", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_1 = register("sludgy_worm_pillar_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_2 = register("sludgy_worm_pillar_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_3 = register("sludgy_worm_pillar_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_4 = register("sludgy_worm_pillar_4", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_5 = register("sludgy_worm_pillar_5", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WORM_PILLAR_TOP = register("worm_pillar_top", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_TOP_1 = register("sludgy_worm_pillar_top_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_TOP_2 = register("sludgy_worm_pillar_top_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_TOP_3 = register("sludgy_worm_pillar_top_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_TOP_4 = register("sludgy_worm_pillar_top_4", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_WORM_PILLAR_TOP_5 = register("sludgy_worm_pillar_top_5", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> COMPACTED_MUD = register("compacted_mud", () -> new CompactMudBlock(BlockBehaviour.Properties.of().strength(1.0F, 10.0F).sound(SoundType.PACKED_MUD)));
	public static final DeferredBlock<Block> MUD_TILES = register("mud_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DECAYED_MUD_TILES = register("decayed_mud_tiles", () -> new Block(BlockBehaviour.Properties.of().friction(0.98F).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_MUD_TILES = register("cracked_mud_tiles", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRACKED_DECAYED_MUD_TILES = register("cracked_decayed_mud_tiles", () -> new Block(BlockBehaviour.Properties.of().friction(0.98F).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PUFFSHROOM = register("puffshroom", () -> new PuffshroomBlock(BlockBehaviour.Properties.of().strength(8.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CARVED_MUD_BRICKS = register("carved_mud_bricks", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICKS_1 = register("sludgy_carved_mud_bricks_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICKS_2 = register("sludgy_carved_mud_bricks_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICKS_3 = register("sludgy_carved_mud_bricks_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICKS_4 = register("sludgy_carved_mud_bricks_4", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CARVED_MUD_BRICK_EDGE = register("carved_mud_brick_edge", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICK_EDGE_1 = register("sludgy_carved_mud_brick_edge_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICK_EDGE_2 = register("sludgy_carved_mud_brick_edge_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICK_EDGE_3 = register("sludgy_carved_mud_brick_edge_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_CARVED_MUD_BRICK_EDGE_4 = register("sludgy_carved_mud_brick_edge_4", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICKS_1 = register("sludgy_mud_bricks_1", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICKS_2 = register("sludgy_mud_bricks_2", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICKS_3 = register("sludgy_mud_bricks_3", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICKS_4 = register("sludgy_mud_bricks_4", () -> new Block(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_STAIRS_1 = register("sludgy_mud_brick_stairs_1", () -> new StairBlock(SLUDGY_MUD_BRICKS_1.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_1.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_STAIRS_2 = register("sludgy_mud_brick_stairs_2", () -> new StairBlock(SLUDGY_MUD_BRICKS_2.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_2.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_STAIRS_3 = register("sludgy_mud_brick_stairs_3", () -> new StairBlock(SLUDGY_MUD_BRICKS_3.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_3.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_STAIRS_4 = register("sludgy_mud_brick_stairs_4", () -> new StairBlock(SLUDGY_MUD_BRICKS_4.get().defaultBlockState(), BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_4.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_SLAB_1 = register("sludgy_mud_brick_slab_1", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_1.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_SLAB_2 = register("sludgy_mud_brick_slab_2", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_2.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_SLAB_3 = register("sludgy_mud_brick_slab_3", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_3.get())));
	public static final DeferredBlock<Block> SLUDGY_MUD_BRICK_SLAB_4 = register("sludgy_mud_brick_slab_4", () -> new SlabBlock(BlockBehaviour.Properties.ofFullCopy(SLUDGY_MUD_BRICKS_4.get())));
	public static final DeferredBlock<Block> EDGE_SHROOM = register("edge_shroom", () -> new EdgePlantBlock(BlockBehaviour.Properties.of().ignitedByLava().instabreak().noCollission().noOcclusion().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> EDGE_MOSS = register("edge_moss", () -> new EdgePlantBlock(BlockBehaviour.Properties.of().ignitedByLava().instabreak().noCollission().noOcclusion().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> EDGE_LEAF = register("edge_leaf", () -> new EdgePlantBlock(BlockBehaviour.Properties.of().ignitedByLava().instabreak().noCollission().noOcclusion().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BEAM_ORIGIN = BLOCKS.register("beam_origin", () -> new BeamOriginBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BEAM_RELAY = register("beam_relay", () -> new BeamRelayBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BEAM_TUBE = register("beam_tube", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BEAM_LENS_SUPPORT = register("beam_lens_support", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DIAGONAL_ENERGY_BARRIER = BLOCKS.register("diagonal_energy_barrier", () -> new DiagonalEnergyBarrierBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(-1.0F, 6000000.0F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> MUD_BRICK_ALCOVE = register("mud_brick_alcove", () -> new MudBrickAlcoveBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.BLOCK).strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> LOOT_URN_1 = register("loot_urn_1", () -> new LootUrnBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> LOOT_URN_2 = register("loot_urn_2", () -> new LootUrnBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> LOOT_URN_3 = register("loot_urn_3", () -> new LootUrnBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.DECORATED_POT_CRACKED)));
	public static final DeferredBlock<Block> DUNGEON_DOOR_RUNES = BLOCKS.register("dungeon_door_runes", () -> new DungeonDoorRunesBlock(false, false, BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MIMIC_DUNGEON_DOOR_RUNES = BLOCKS.register("mimic_dungeon_door_runes", () -> new DungeonDoorRunesBlock(true, true, BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CRAWLER_DUNGEON_DOOR_RUNES = BLOCKS.register("crawler_dungeon_door_runes", () -> new DungeonDoorRunesBlock(true, false, BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DUNGEON_DOOR_COMBINATION = register("dungeon_door_combination", () -> new DungeonDoorCombinationBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CLIMBABLE_MUD_BRICKS = register("climbable_mud_bricks", () -> new ClimbableMudBricksBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> BROKEN_MUD_TILES = register("broken_mud_tiles", () -> new BrokenMudTilesBlock(BlockBehaviour.Properties.of().pushReaction(PushReaction.DESTROY).strength(1.5F, 10.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DUNGEON_WALL_CANDLE = register("dungeon_wall_candle", () -> new DungeonWallCandleBlock(BlockBehaviour.Properties.of().lightLevel(state -> state.getValue(DungeonWallCandleBlock.LIT) ? 13 : 0).noCollission().noOcclusion().pushReaction(PushReaction.DESTROY).strength(0.1F).sound(SoundType.CANDLE)));
	public static final DeferredBlock<Block> WOODEN_SUPPORT_BEAM_1 = register("wooden_support_beam_1", () -> new WoodenSupportBeamBlock(BlockBehaviour.Properties.of().ignitedByLava().noCollission().noOcclusion().pushReaction(PushReaction.DESTROY).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WOODEN_SUPPORT_BEAM_2 = register("wooden_support_beam_2", () -> new WoodenSupportBeamBlock(BlockBehaviour.Properties.of().ignitedByLava().noCollission().noOcclusion().pushReaction(PushReaction.DESTROY).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WOODEN_SUPPORT_BEAM_3 = register("wooden_support_beam_3", () -> new WoodenSupportBeamBlock(BlockBehaviour.Properties.of().ignitedByLava().noCollission().noOcclusion().pushReaction(PushReaction.DESTROY).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_1 = register("carved_rotten_bark_1", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_2 = register("carved_rotten_bark_2", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_3 = register("carved_rotten_bark_3", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_4 = register("carved_rotten_bark_4", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_5 = register("carved_rotten_bark_5", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_6 = register("carved_rotten_bark_6", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_7 = register("carved_rotten_bark_7", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_8 = register("carved_rotten_bark_8", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_9 = register("carved_rotten_bark_9", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_10 = register("carved_rotten_bark_10", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_11 = register("carved_rotten_bark_11", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_12 = register("carved_rotten_bark_12", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_13 = register("carved_rotten_bark_13", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_14 = register("carved_rotten_bark_14", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_15 = register("carved_rotten_bark_15", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CARVED_ROTTEN_BARK_16 = register("carved_rotten_bark_16", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> MUD_ENERGY_BARRIER = BLOCKS.register("mud_energy_barrier", () -> new Block(BlockBehaviour.Properties.of().lightLevel(value -> 12).strength(-1.0F, 6000000.0F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> MUD_BRICK_SPIKE_TRAP = register("mud_brick_spike_trap", () -> new SpikeTrapBlock(BlockBehaviour.Properties.of().strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MUD_TILES_SPIKE_TRAP = register("mud_tiles_spike_trap", () -> new SpikeTrapBlock(BlockBehaviour.Properties.of().strength(10.0F, 2000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> COMPACTED_MUD_SLOPE = register("compacted_mud_slope", () -> new StairBlock(COMPACTED_MUD.get().defaultBlockState(), BlockBehaviour.Properties.of().strength(1.0F, 10.0F).sound(SoundType.PACKED_MUD)));
	public static final DeferredBlock<Block> COMPACTED_MUD_SLAB = register("compacted_mud_slab", () -> new SlabBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.PACKED_MUD)));
	public static final DeferredBlock<Block> COMPACTED_MUD_MIRAGE = register("compacted_mud_mirage", () -> new MirageBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.PACKED_MUD)));
	public static final DeferredBlock<Block> ROTTEN_PLANKS = register("rotten_planks", () -> new Block(BlockBehaviour.Properties.of().ignitedByLava().strength(1.5F, 4.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> ROTTEN_SLAB = register("rotten_slab", () -> new SlabBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(1.5F, 4.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> ROTTEN_STAIRS = register("rotten_stairs", () -> new StairBlock(ROTTEN_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.of().ignitedByLava().strength(1.5F, 4.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> ROTTEN_FENCE = register("rotten_fence", () -> new FenceBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(1.5F, 4.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> ROTTEN_FENCE_GATE = register("rotten_fence_gate", () -> new FenceGateBlock(BLWoodTypes.ROTTEN_WOOD_TYPE, BlockBehaviour.Properties.of().ignitedByLava().strength(1.5F, 4.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> BRAZIER = register("brazier", () -> new BrazierBlock(BlockBehaviour.Properties.of().strength(1.5F, 10.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> DECAY_PIT_GROUND_CHAIN = BLOCKS.register("decay_pit_ground_chain", () -> new DecayPitGroundChainBlock(BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DECAY_PIT_HANGING_CHAIN = BLOCKS.register("decay_pit_hanging_chain", () -> new DecayPitHangingChainBlock(BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DECAY_PIT_CONTROL = BLOCKS.register("decay_pit_control", () -> new DecayPitControlBlock(BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).sound(SoundType.STONE)));
	//TODO invisible block variants for the decay pit control
	//perhaps consider making them all 1 block with variants that cycle the hitbox
	public static final DeferredBlock<Block> WHITE_PRESENT = register("white_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> LIGHT_GRAY_PRESENT = register("light_gray_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> GRAY_PRESENT = register("gray_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> BLACK_PRESENT = register("black_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> RED_PRESENT = register("red_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> ORANGE_PRESENT = register("orange_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> YELLOW_PRESENT = register("yellow_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> GREEN_PRESENT = register("green_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> LIME_PRESENT = register("lime_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> BLUE_PRESENT = register("blue_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> CYAN_PRESENT = register("cyan_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> LIGHT_BLUE_PRESENT = register("light_blue_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> PURPLE_PRESENT = register("purple_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> MAGENTA_PRESENT = register("magenta_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> PINK_PRESENT = register("pink_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> BROWN_PRESENT = register("brown_present", () -> new PresentBlock(BlockBehaviour.Properties.of().randomTicks().strength(0.8F).sound(SoundType.WOOL)));

	//plants
	public static final DeferredBlock<Block> PITCHER_PLANT = register("pitcher_plant", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> WEEPING_BLUE = register("weeping_blue", () -> new WeepingBlueBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SUNDEW = register("sundew", () -> new SundewBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLACK_HAT_MUSHROOM = register("black_hat_mushroom", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BULB_CAPPED_MUSHROOM = register("bulb_capped_mushroom", () -> new PlantBlock(BlockBehaviour.Properties.of().lightLevel(value -> 15).noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> FLATHEAD_MUSHROOM = register("flathead_mushroom", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> VENUS_FLY_TRAP = register("venus_fly_trap", () -> new VenusFlyTrapBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> VOLARPAD = register("volarpad", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SWAMP_PLANT = register("swamp_plant", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().replaceable().sound(SoundType.GRASS)));
	public static final DeferredBlock<GrowingPlantHeadBlock> SWAMP_KELP = register("swamp_kelp", () -> new SwampKelpBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().replaceable().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> SWAMP_KELP_PLANT = BLOCKS.register("swamp_kelp_plant", () -> new SwampKelpPlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XZ).instabreak().replaceable().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> MIRE_CORAL = register("mire_coral", () -> new UnderwaterPlantBlock(BlockBehaviour.Properties.of().lightLevel(value -> 15).noCollission().noOcclusion().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> DEEP_WATER_CORAL = register("deep_water_coral", () -> new UnderwaterPlantBlock(BlockBehaviour.Properties.of().lightLevel(value -> 15).noCollission().noOcclusion().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> WATER_WEEDS = register("water_weeds", () -> new WaterWeedsBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().replaceable().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> BULB_CAPPED_MUSHROOM_CAP = register("bulb_capped_mushroom_cap", () -> new BulbCappedMushroomCapBlock(BlockBehaviour.Properties.of().lightLevel(value -> 15).noOcclusion().strength(0.2F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> BULB_CAPPED_MUSHROOM_STALK = register("bulb_capped_mushroom_stalk", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().lightLevel(value -> 15).strength(0.2F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> SHELF_FUNGUS = register("shelf_fungus", () -> new ShelfFungusBlock(BlockBehaviour.Properties.of().strength(0.2F).sound(SoundType.WOOL)));
	public static final DeferredBlock<Block> ALGAE = register("algae", () -> new AlgaeBlock(BlockBehaviour.Properties.of().instabreak().pushReaction(PushReaction.DESTROY).noCollission().noOcclusion().replaceable().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> POISON_IVY = register("poison_ivy", () -> new PoisonIvyBlock(BlockBehaviour.Properties.of().mapColor(MapColor.PLANT).replaceable().noCollission().strength(0.2F).sound(SoundType.VINE).ignitedByLava().pushReaction(PushReaction.DESTROY)));
	//TODO root block, works like stalactites
	public static final DeferredBlock<Block> GIANT_ROOT = register("giant_root", () -> new Block(BlockBehaviour.Properties.of().strength(2.0F).sound(SoundType.WOOD).ignitedByLava()));
	public static final DeferredBlock<Block> ARROW_ARUM = register("arrow_arum", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLUE_EYED_GRASS = register("blue_eyed_grass", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLUE_IRIS = register("blue_iris", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BONESET = register("boneset", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BOTTLE_BRUSH_GRASS = register("bottle_brush_grass", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BROOMSEDGE = register("broomsedge", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BUTTON_BUSH = register("button_bush", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CARDINAL_FLOWER = register("cardinal_flower", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CATTAIL = register("cattail", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CAVE_GRASS = register("cave_grass", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> COPPER_IRIS = register("copper_iris", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> MARSH_HIBISCUS = register("marsh_hibiscus", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> MARSH_MALLOW = register("marsh_mallow", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLADDERWORT_FLOWER = register("bladderwort_flower", () -> new BladderwortFlowerBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLADDERWORT_STALK = register("bladderwort_stalk", () -> new BladderwortStalkBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> BOG_BEAN_FLOWER = register("bog_bean_flower", () -> new RootedFlowerBlock(BlockRegistry.BOG_BEAN_STALK, BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BOG_BEAN_STALK = BLOCKS.register("bog_bean_stalk", () -> new RootedFlowerStalkBlock(BlockRegistry.BOG_BEAN_FLOWER, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> GOLDEN_CLUB_FLOWER = register("golden_club_flower", () -> new RootedFlowerBlock(BlockRegistry.GOLDEN_CLUB_STALK, BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> GOLDEN_CLUB_STALK = BLOCKS.register("golden_club_stalk", () -> new RootedFlowerStalkBlock(BlockRegistry.GOLDEN_CLUB_FLOWER, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> MARSH_MARIGOLD_FLOWER = register("marsh_marigold_flower", () -> new RootedFlowerBlock(BlockRegistry.MARSH_MARIGOLD_STALK, BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> MARSH_MARIGOLD_STALK = BLOCKS.register("marsh_marigold_stalk", () -> new RootedFlowerStalkBlock(BlockRegistry.MARSH_MARIGOLD_FLOWER, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.WET_GRASS)));
	public static final DeferredBlock<Block> TALL_SWAMP_GRASS = register("tall_swamp_grass", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> MILKWEED = register("milkweed", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> NETTLE = register("nettle", () -> new NettleBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> FLOWERED_NETTLE = register("flowered_nettle", () -> new FloweredNettleBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> PICKERELWEED = register("pickerelweed", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> PHRAGMITES = register("phragmites", () -> new PhragmitesBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SHOOTS = register("shoots", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SLUDGECREEP = register("sludgecreep", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> TALL_SLUDGECREEP = register("tall_sludgecreep", () -> new SludgeDungeonPlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SOFT_RUSH = register("soft_rush", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SWAMP_REED = register("swamp_reed", () -> new SwampReedBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> THORNS = register("thorns", () -> new ThornsBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> TALL_CATTAIL = register("tall_cattail", () -> new FarmableDoublePlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SHORT_SWAMP_GRASS = register("short_swamp_grass", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> DEAD_WEEDWOOD_BUSH = register("dead_weedwood_bush", () -> new PlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> WEEDWOOD_BUSH = register("weedwood_bush", () -> new WeedwoodBushBlock(BlockBehaviour.Properties.of().noOcclusion().strength(0.35F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> STICK_NESTING_BLOCK = register("stick_nesting_block", () -> new NestBlock(BlockBehaviour.Properties.of().noOcclusion().strength(0.35F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BONE_NESTING_BLOCK = register("bone_nesting_block", () -> new NestBlock(BlockBehaviour.Properties.of().noOcclusion().strength(0.35F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> HOLLOW_LOG = register("hollow_log", () -> new HollowLogBlock(BlockBehaviour.Properties.of().noOcclusion().strength(0.8F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> CAVE_MOSS = register("cave_moss", () -> new HangingPlantBlock(BlockRegistry.CAVE_MOSS_PLANT, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CAVE_MOSS_PLANT = BLOCKS.register("cave_moss_plant", () -> new HangingPlantBodyBlock(BlockRegistry.CAVE_MOSS, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CRYPTWEED = register("cryptweed", () -> new SludgeDungeonHangingPlantBlock(BlockRegistry.CRYPTWEED_PLANT, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> CRYPTWEED_PLANT = BLOCKS.register("cryptweed_plant", () -> new HangingPlantBodyBlock(BlockRegistry.CRYPTWEED, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> STRING_ROOTS = register("string_roots", () -> new SludgeDungeonHangingPlantBlock(BlockRegistry.STRING_ROOTS_PLANT, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> STRING_ROOTS_PLANT = BLOCKS.register("string_roots_plant", () -> new HangingPlantBodyBlock(BlockRegistry.STRING_ROOTS, BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> PALE_GRASS = register("pale_grass", () -> new SludgeDungeonPlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).replaceable().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> ROTBULB = register("rotbulb", () -> new SludgeDungeonPlantBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().offsetType(BlockBehaviour.OffsetType.XYZ).replaceable().instabreak().sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> MOSS = register("moss", () -> new MossBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().randomTicks().strength(0.2F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> DEAD_MOSS = register("dead_moss", () -> new MossBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().strength(0.2F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> LICHEN = register("lichen", () -> new MossBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().randomTicks().strength(0.2F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> DEAD_LICHEN = register("dead_lichen", () -> new MossBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().replaceable().strength(0.2F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> HANGER = register("hanger", () -> new HangerBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().strength(0.1F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> SEEDED_HANGER = register("seeded_hanger", () -> new SeededHangerBlock(BlockBehaviour.Properties.of().noCollission().noOcclusion().randomTicks().strength(0.1F).sound(SoundType.GRASS)));
	//TODO crops and bushes
	public static final DeferredBlock<Block> PURIFIED_SWAMP_DIRT = register("purified_swamp_dirt", () -> new Block(BlockBehaviour.Properties.of().strength(0.5F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> DUG_SWAMP_DIRT = register("dug_swamp_dirt", () -> new DugDirtBlock(false, BlockBehaviour.Properties.of().randomTicks().strength(0.5F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> PURIFIED_DUG_SWAMP_DIRT = register("purified_dug_swamp_dirt", () -> new DugDirtBlock(true, BlockBehaviour.Properties.of().randomTicks().strength(0.5F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> DUG_SWAMP_GRASS = register("dug_swamp_grass", () -> new DugGrassBlock(false, BlockBehaviour.Properties.of().randomTicks().strength(0.5F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> PURIFIED_DUG_SWAMP_GRASS = register("purified_dug_swamp_grass", () -> new DugGrassBlock(true, BlockBehaviour.Properties.of().randomTicks().strength(0.5F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> BLACK_ICE = register("black_ice", () -> new BlackIceBlock(BlockBehaviour.Properties.of().noOcclusion().randomTicks().strength(0.5F).randomTicks().friction(0.98F).sound(SoundType.GLASS).isRedstoneConductor((state, level, pos) -> false)));
	public static final DeferredBlock<Block> SNOW = register("snow", () -> new BLSnowLayerBlock(BlockBehaviour.Properties.of().replaceable().forceSolidOff().randomTicks().strength(0.1F).sound(SoundType.SNOW)));
	//MISC
	public static final DeferredBlock<Block> PORTAL_LOG = register("portal_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL = BLOCKS.register("portal", () -> new TreePortalBlock(BlockBehaviour.Properties.of().strength(-1.0F, 6000000.0F).lightLevel(value -> 15).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> PORTAL_FRAME_TOP_LEFT = register("portal_frame_top_left", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_TOP = register("portal_frame_top", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_TOP_RIGHT = register("portal_frame_top_right", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_LEFT = register("portal_frame_left", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_RIGHT = register("portal_frame_right", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_BOTTOM_LEFT = register("portal_frame_top_bottom_left", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_BOTTOM = register("portal_frame_top_bottom", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> PORTAL_FRAME_BOTTOM_RIGHT = register("portal_frame_bottom_right", () -> new PortalFrameBlock(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> DRUID_ALTAR = register("druid_altar", () -> new DruidAltarBlock(BlockBehaviour.Properties.of().strength(8.0F, 100.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> PURIFIER = register("purifier", () -> new PurifierBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEEDWOOD_CRAFTING_TABLE = register("weedwood_crafting_table", () -> new WeedwoodCraftingTableBlock(BlockBehaviour.Properties.of().ignitedByLava().strength(2.5F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> COMPOST_BIN = register("compost_bin", () -> new CompostBinBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_JUKEBOX = register("weedwood_jukebox", () -> new WeedwoodJukeboxBlock(BlockBehaviour.Properties.of().strength(2.0F, 10.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> SULFUR_FURNACE = register("sulfur_furnace", () -> new SulfurFurnaceBlock(BlockBehaviour.Properties.of().strength(3.5F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> DUAL_SULFUR_FURNACE = register("dual_sulfur_furnace", () -> new DualSulfurFurnaceBlock(BlockBehaviour.Properties.of().strength(3.5F).sound(SoundType.STONE)));
	//TODO weedwood chest, also look into shared loot mechanics for other inventory blocks
	public static final DeferredBlock<Block> WEEDWOOD_RUBBER_TAP = BLOCKS.register("weedwood_rubber_tap", () -> new RubberTapBlock(540, BlockBehaviour.Properties.of().strength(3.5F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SYRMORITE_RUBBER_TAP = BLOCKS.register("syrmorite_rubber_tap", () -> new RubberTapBlock(260, BlockBehaviour.Properties.of().strength(3.5F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> SLUDGE = BLOCKS.register("sludge", () -> new SludgeBlock(BlockBehaviour.Properties.of().noOcclusion().forceSolidOff().replaceable().strength(0.1F).sound(SoundType.SLIME_BLOCK)));
	public static final DeferredBlock<Block> FALLEN_LEAVES = register("fallen_leaves", () -> new FallenLeavesBlock(BlockBehaviour.Properties.of().noOcclusion().forceSolidOff().strength(0.1F).sound(SoundType.GRASS)));
	public static final DeferredBlock<Block> ENERGY_BARRIER = BLOCKS.register("energy_barrier", () -> new EnergyBarrierBlock(BlockBehaviour.Properties.of().noOcclusion().lightLevel(value -> 12).strength(-1.0F, 6000000.0F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> WEEDWOOD_DOOR = BLOCKS.register("weedwood_door", () -> new DoorBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> RUBBER_TREE_DOOR = BLOCKS.register("rubber_tree_door", () -> new DoorBlock(BLWoodTypes.RUBBER_TREE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> GIANT_ROOT_DOOR = BLOCKS.register("giant_root_door", () -> new DoorBlock(BLWoodTypes.GIANT_ROOT_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> HEARTHGROVE_DOOR = BLOCKS.register("hearthgrove_door", () -> new DoorBlock(BLWoodTypes.HEARTHGROVE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> NIBBLETWIG_DOOR = BLOCKS.register("nibbletwig_door", () -> new DoorBlock(BLWoodTypes.NIBBLETWIG_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> ROTTEN_PLANK_DOOR = BLOCKS.register("rotten_plank_door", () -> new DoorBlock(BLWoodTypes.ROTTEN_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SYRMORITE_DOOR = BLOCKS.register("syrmorite_door", () -> new DoorBlock(BLWoodTypes.SYRMORITE, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).noOcclusion().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SCABYST_DOOR = BLOCKS.register("scabyst_door", () -> new DoorBlock(BLWoodTypes.SCABYST, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).noOcclusion().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_WEEDWOOD_DOOR = BLOCKS.register("treated_weedwood_door", () -> new DoorBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_RUBBER_TREE_DOOR = BLOCKS.register("treated_rubber_tree_door", () -> new DoorBlock(BLWoodTypes.RUBBER_TREE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_GIANT_ROOT_DOOR = BLOCKS.register("treated_giant_root_door", () -> new DoorBlock(BLWoodTypes.GIANT_ROOT_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_HEARTHGROVE_DOOR = BLOCKS.register("treated_hearthgrove_door", () -> new DoorBlock(BLWoodTypes.HEARTHGROVE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_NIBBLETWIG_DOOR = BLOCKS.register("treated_nibbletwig_door", () -> new DoorBlock(BLWoodTypes.NIBBLETWIG_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_ROTTEN_PLANK_DOOR = BLOCKS.register("treated_rotten_plank_door", () -> new DoorBlock(BLWoodTypes.ROTTEN_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> WEEDWOOD_SIGN = BLOCKS.register("weedwood_sign", () -> new StandingSignBlock(BLWoodTypes.WEEDWOOD_WOOD_TYPE, BlockBehaviour.Properties.of().forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava()));
	public static final DeferredBlock<Block> WEEDWOOD_WALL_SIGN = BLOCKS.register("weedwood_wall_sign", () -> new WallSignBlock(BLWoodTypes.WEEDWOOD_WOOD_TYPE, BlockBehaviour.Properties.of().forceSolidOn().instrument(NoteBlockInstrument.BASS).noCollission().strength(1.0F).ignitedByLava()));
	public static final DeferredBlock<Block> SULFUR_TORCH = BLOCKS.register("sulfur_torch", () -> new SulfurTorchBlock(BlockBehaviour.Properties.of().instabreak().lightLevel(value -> 14).noCollission().randomTicks().sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> SULFUR_WALL_TORCH = BLOCKS.register("sulfur_wall_torch", () -> new SulfurWallTorchBlock(BlockBehaviour.Properties.of().instabreak().lightLevel(value -> 14).noCollission().randomTicks().sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> EXTINGUISHED_SULFUR_TORCH = BLOCKS.register("extinguished_sulfur_torch", () -> new ExtinguishedSulfurTorchBlock(BlockBehaviour.Properties.of().instabreak().noCollission().sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> EXTINGUISHED_SULFUR_WALL_TORCH = BLOCKS.register("extinguished_sulfur_wall_torch", () -> new ExtinguishedSulfurWallTorchBlock(BlockBehaviour.Properties.of().instabreak().noCollission().sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> WEEDWOOD_TRAPDOOR = BLOCKS.register("weedwood_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> RUBBER_TREE_TRAPDOOR = BLOCKS.register("rubber_tree_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.RUBBER_TREE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> GIANT_ROOT_TRAPDOOR = BLOCKS.register("giant_root_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.GIANT_ROOT_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> HEARTHGROVE_TRAPDOOR = BLOCKS.register("hearthgrove_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.HEARTHGROVE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> NIBBLETWIG_TRAPDOOR = BLOCKS.register("nibbletwig_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.NIBBLETWIG_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> ROTTEN_PLANK_TRAPDOOR = BLOCKS.register("rotten_plank_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.ROTTEN_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SYRMORITE_TRAPDOOR = BLOCKS.register("syrmorite_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.SYRMORITE, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).noOcclusion().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SCABYST_TRAPDOOR = BLOCKS.register("scabyst_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.SCABYST, BlockBehaviour.Properties.of().strength(1.5F, 10.0F).noOcclusion().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_WEEDWOOD_TRAPDOOR = BLOCKS.register("treated_weedwood_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.WEEDWOOD_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(2.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_RUBBER_TREE_TRAPDOOR = BLOCKS.register("treated_rubber_tree_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.RUBBER_TREE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_GIANT_ROOT_TRAPDOOR = BLOCKS.register("treated_giant_root_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.GIANT_ROOT_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_HEARTHGROVE_TRAPDOOR = BLOCKS.register("treated_hearthgrove_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.HEARTHGROVE_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.75F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_NIBBLETWIG_TRAPDOOR = BLOCKS.register("treated_nibbletwig_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.NIBBLETWIG_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> TREATED_ROTTEN_PLANK_TRAPDOOR = BLOCKS.register("treated_rotten_plank_trapdoor", () -> new TrapDoorBlock(BLWoodTypes.ROTTEN_BLOCK_SET, BlockBehaviour.Properties.of().instrument(NoteBlockInstrument.BASS).strength(1.0F, 5.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY)));
	public static final DeferredBlock<Block> SYRMORITE_HOPPER = register("syrmorite_hopper", () -> new SyrmoriteHopperBlock(BlockBehaviour.Properties.ofFullCopy(Blocks.HOPPER)));
	public static final DeferredBlock<Block> MUD_FLOWER_POT = register("mud_flower_pot", () -> new MudFlowerPotBlock(BlockBehaviour.Properties.of().strength(0.3F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> MUD_FLOWER_POT_CANDLE = register("mud_flower_pot_candle", () -> new MudFlowerPotCandleBlock(BlockBehaviour.Properties.of().strength(0.3F).lightLevel(value -> value.getValue(MudFlowerPotCandleBlock.LIT) ? 13 : 0).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> GECKO_CAGE = register("gecko_cage", () -> new GeckoCageBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> INFUSER = register("infuser", () -> new InfuserBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> ORANGE_ASPECT_VIAL = register("orange_aspect_vial", () -> new AspectVialBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> GREEN_ASPECT_VIAL = register("green_aspect_vial", () -> new AspectVialBlock(BlockBehaviour.Properties.of().strength(0.4F).sound(SoundType.GLASS)));
	public static final DeferredBlock<Block> MORTAR = register("mortar", () -> new MortarBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> CENSER = register("censer", () -> new CenserBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.STONE)));
	public static final DeferredBlock<Block> WEEDWOOD_BARREL = register("weedwood_barrel", () -> new BarrelBlock(false, BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.WOOD)));
	public static final DeferredBlock<Block> SYRMORITE_BARREL = register("syrmorite_barrel", () -> new BarrelBlock(true, BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.METAL)));
	public static final DeferredBlock<Block> ANIMATOR = register("animator", () -> new AnimatorBlock(BlockBehaviour.Properties.of().strength(2.0F, 5.0F).sound(SoundType.METAL)));

	public static <T extends Block> DeferredBlock<T> register(String name, Supplier<? extends T> block) {
		return register(name, block, item -> () -> new BlockItem(item.get(), new Item.Properties()));
	}

	public static <T extends Block> DeferredBlock<T> register(String name, Supplier<? extends T> block, Function<DeferredBlock<T>, Supplier<? extends Item>> item) {
		DeferredBlock<T> reg = BLOCKS.register(name, block);
		ItemRegistry.ITEMS.register(name, item.apply(reg));
		return reg;
	}
}